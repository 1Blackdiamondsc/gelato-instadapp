{
  "address": "0x06894910D317967365e63654a81206D62BD357a4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_instaFeeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleAggregator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dsa",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromVaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_colToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_makerDestVaultId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_makerDestColType",
          "type": "string"
        }
      ],
      "name": "canDoRefinance",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dsa",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromVaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_colToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_makerDestVaultId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_makerDestColType",
          "type": "string"
        }
      ],
      "name": "getConditionData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instaFeeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_conditionData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ok",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb241316d4553d7ba46bdc64042bce1cd3e76502f4e55bf3ce0059fda198b6d95",
  "receipt": {
    "to": null,
    "from": "0xF953c3d475dc0a9877329F71e2CE3d2519a519A2",
    "contractAddress": "0x06894910D317967365e63654a81206D62BD357a4",
    "transactionIndex": 145,
    "gasUsed": "4521144",
    "logsBloom": "0x
    "blockHash": "0xcc78755fbb431133c614217a554eef07b05d2d2fc8de3fd03871e0673ff4baba",
    "transactionHash": "0xb241316d4553d7ba46bdc64042bce1cd3e76502f4e55bf3ce0059fda198b6d95",
    "logs": [],
    "blockNumber": 11729765,
    "cumulativeGasUsed": "11805580",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0c159985E905ea1A3dA7305D70583Dd618862cf4",
    "0x64f31D46C52bBDe223D863B11dAb9327aB1414E9"
  ],
  "solcInputHash": "06ff1a108d21b21e4ca3839d365cb0b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_instaFeeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleAggregator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dsa\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromVaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_colToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_makerDestVaultId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_makerDestColType\",\"type\":\"string\"}],\"name\":\"canDoRefinance\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dsa\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromVaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_colToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_makerDestVaultId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_makerDestColType\",\"type\":\"string\"}],\"name\":\"getConditionData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_conditionData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ok\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/gelato/conditions/ConditionCanDoRefinance.sol\":\"ConditionCanDoRefinance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/core/contracts/gelato_conditions/GelatoConditionsStandard.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\n\\nimport \\\"./IGelatoCondition.sol\\\";\\n\\nabstract contract GelatoConditionsStandard is IGelatoCondition {\\n    string internal constant OK = \\\"OK\\\";\\n}\\n\",\"keccak256\":\"0xa3d9ee5c4398914bbc0fe75fe54e57b73b8a4367caf9a40d9e5fd1ba9d4adb89\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_conditions/IGelatoCondition.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n\\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\\n    /// @dev Be careful only to encode a Task's condition.data as is and not with the\\n    ///  \\\"ok\\\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\\n    ///  source of Task identification.\\n    /// @param _conditionData This is the Condition.data field developers must encode their\\n    ///  Condition's specific parameters in.\\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\\n    function ok(uint256 _taskReceiptId, bytes calldata _conditionData, uint256 _cycleId)\\n        external\\n        view\\n        returns(string memory);\\n}\",\"keccak256\":\"0xd07607af93227ec5f8c2f5401289937b98c298f0d2398c1ba7410f82a6253964\",\"license\":\"UNLICENSED\"},\"contracts/constants/CAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// Aave Lending Pool Addresses Provider\\naddress constant LENDING_POOL_ADDRESSES_PROVIDER = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;\\naddress constant CHAINLINK_ETH_FEED = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\\naddress constant AAVE_PROTOCOL_DATA_PROVIDER = 0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d;\\n\",\"keccak256\":\"0x3e724d5ba5806a1feebd6ffed223db3b5e24abcb1c7e15aa4d74dd3752c20495\",\"license\":\"UNLICENSED\"},\"contracts/constants/CCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\naddress constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\\n\",\"keccak256\":\"0x7894ca47cf772ae6f312893382269e76775ea92787fba1eddd53e73a1104155e\",\"license\":\"UNLICENSED\"},\"contracts/constants/CDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nenum PROTOCOL {AAVE, MAKER, COMPOUND, NONE}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2519000), 3140500, 3971000, 4345000];\\n}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2028307), 2626711, 2944065, 3698800];\\n}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2358534), 2956937, 3381960, 4029400];\\n}\\n\\nuint256 constant FAST_TX_FEE = 30;\\nuint256 constant VAULT_CREATION_COST = 200000;\\nuint256 constant MAX_INSTA_FEE = 3e15;\\n\",\"keccak256\":\"0x5cb259ff9d661ebd3beb9d56e49ffb7dd5ff6a4c358c8acd913da52f5b99124b\",\"license\":\"UNLICENSED\"},\"contracts/constants/CGelato.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IGelatoGasPriceOracle\\n} from \\\"../interfaces/gelato/IGelatoGasPriceOracle.sol\\\";\\n\\nIGelatoGasPriceOracle constant GELATO_GAS_PRICE_ORACLE = IGelatoGasPriceOracle(\\n    0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C\\n);\\n\\naddress constant GELATO_EXECUTOR_MODULE = 0x98edc8067Cc671BCAE82D36dCC609C3E4e078AC8;\\n\",\"keccak256\":\"0xd701225d80680199dbc5b86bcf953151895629f8e05bd49954c8fd7eb6613873\",\"license\":\"UNLICENSED\"},\"contracts/constants/CInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// InstaDapp\\naddress constant INSTA_MEMORY = 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F;\\n\\n// Connectors\\naddress constant CONNECT_MAKER = 0xac02030d8a8F49eD04b2f52C394D3F901A10F8A9;\\naddress constant CONNECT_COMPOUND = 0x15FdD1e902cAC70786fe7D31013B1a806764B5a2;\\naddress constant INSTA_POOL_V2 = 0xeB4bf86589f808f90EEC8e964dBF16Bd4D284905;\\naddress constant CONNECT_AAVE_V2 = 0xBF6E4331ffd02F7043e62788FD272aeFc712f5ee;\\naddress constant CONNECT_DYDX = 0x6AF6C791c869DfA65f8A2fa042fA47D1535Bef25;\\naddress constant CONNECT_BASIC = 0xe5398f279175962E56fE4c5E0b62dc7208EF36c6;\\naddress constant CONNECT_FEE = 0xB99152F8073033B318C1Bfbfaaa582029e982CE9;\\n\\n// Insta Pool\\naddress constant INSTA_POOL_RESOLVER = 0xa004a5afBa04b74037E9E52bA1f7eb02b5E61509;\\nuint256 constant ROUTE_1_TOLERANCE = 1005e15;\\n\\n// Insta Mapping\\naddress constant INSTA_MAPPING = 0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88;\\n\\naddress constant INSTA_MAKER_RESOLVER = 0x0A7008B38E7015F8C36A49eEbc32513ECA8801E5;\\n\",\"keccak256\":\"0x0a6f769e4d928a6286024c823696c481fbeb75c85bd8648b450a18ff3fc0451d\",\"license\":\"UNLICENSED\"},\"contracts/constants/CMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\naddress constant MCD_MANAGER = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\\naddress constant JUG = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\\n\",\"keccak256\":\"0xba2dab3a9cd1c7edd900705917de16d2c9c85edc35c03a2e3535570814ecb067\",\"license\":\"UNLICENSED\"},\"contracts/constants/CTokens.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// ETH\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\naddress constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n// USD\\naddress constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\",\"keccak256\":\"0x737e5e061f0a86bb43c375e78caada7211726ed0786151e719d503e6b9b60d59\",\"license\":\"UNLICENSED\"},\"contracts/contracts/gelato/conditions/ConditionCanDoRefinance.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    GelatoConditionsStandard\\n} from \\\"@gelatonetwork/core/contracts/gelato_conditions/GelatoConditionsStandard.sol\\\";\\nimport {\\n    _getDebtBridgeRoute\\n} from \\\"../../../functions/gelato/FGelatoDebtBridge.sol\\\";\\nimport {PROTOCOL} from \\\"../../../constants/CDebtBridge.sol\\\";\\nimport {GelatoBytes} from \\\"../../../lib/GelatoBytes.sol\\\";\\nimport {DebtBridgeInputData} from \\\"../../../structs/SDebtBridge.sol\\\";\\nimport {\\n    _getMakerVaultDebt,\\n    _getMakerVaultCollateralBalance\\n} from \\\"../../../functions/dapps/FMaker.sol\\\";\\nimport {\\n    _getFlashLoanRoute,\\n    _getRealisedDebt\\n} from \\\"../../../functions/gelato/FGelatoDebtBridge.sol\\\";\\nimport {DAI} from \\\"../../../constants/CTokens.sol\\\";\\nimport {\\n    IInstaFeeCollector\\n} from \\\"../../../interfaces/InstaDapp/IInstaFeeCollector.sol\\\";\\n\\ncontract ConditionCanDoRefinance is GelatoConditionsStandard {\\n    address public immutable instaFeeCollector;\\n    address public immutable oracleAggregator;\\n\\n    constructor(address _instaFeeCollector, address _oracleAggregator) {\\n        instaFeeCollector = _instaFeeCollector;\\n        oracleAggregator = _oracleAggregator;\\n    }\\n\\n    function getConditionData(\\n        address _dsa,\\n        uint256 _fromVaultId,\\n        address _colToken,\\n        uint256 _makerDestVaultId,\\n        string calldata _makerDestColType\\n    ) public pure virtual returns (bytes memory) {\\n        return\\n            abi.encodeWithSelector(\\n                this.canDoRefinance.selector,\\n                _dsa,\\n                _fromVaultId,\\n                _colToken,\\n                _makerDestVaultId,\\n                _makerDestColType\\n            );\\n    }\\n\\n    function ok(\\n        uint256,\\n        bytes calldata _conditionData,\\n        uint256\\n    ) public view virtual override returns (string memory) {\\n        (\\n            address _dsa,\\n            uint256 _fromVaultId,\\n            address _colToken,\\n            uint256 _makerDestVaultId,\\n            string memory _makerDestColType\\n        ) =\\n            abi.decode(\\n                _conditionData[4:],\\n                (address, uint256, address, uint256, string)\\n            );\\n\\n        return\\n            canDoRefinance(\\n                _dsa,\\n                _fromVaultId,\\n                _colToken,\\n                _makerDestVaultId,\\n                _makerDestColType\\n            );\\n    }\\n\\n    function canDoRefinance(\\n        address _dsa,\\n        uint256 _fromVaultId,\\n        address _colToken,\\n        uint256 _makerDestVaultId,\\n        string memory _makerDestColType\\n    ) public view returns (string memory) {\\n        uint256 debtAmt = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n        return\\n            _getDebtBridgeRoute(\\n                DebtBridgeInputData({\\n                    dsa: _dsa,\\n                    colAmt: _getMakerVaultCollateralBalance(_fromVaultId),\\n                    colToken: _colToken,\\n                    debtAmt: debtAmt,\\n                    oracleAggregator: oracleAggregator,\\n                    makerDestVaultId: _makerDestVaultId,\\n                    makerDestColType: _makerDestColType,\\n                    fees: IInstaFeeCollector(instaFeeCollector).fee(),\\n                    flashRoute: _getFlashLoanRoute(DAI, debtAmt)\\n                })\\n            ) != PROTOCOL.NONE\\n                ? OK\\n                : \\\"CannotDoRefinance\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xb1658744208a639565f3e9ade64ae54b16e306ae52129dcf6864ea22c64bf6fc\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IAaveProtocolDataProvider\\n} from \\\"../../interfaces/dapps/Aave/IAaveProtocolDataProvider.sol\\\";\\nimport {\\n    ILendingPoolAddressesProvider\\n} from \\\"../../interfaces/dapps/Aave/ILendingPoolAddressesProvider.sol\\\";\\nimport {\\n    ChainLinkInterface\\n} from \\\"../../interfaces/dapps/Aave/ChainLinkInterface.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/dapps/Aave/ILendingPool.sol\\\";\\nimport {WETH, ETH} from \\\"../../constants/CTokens.sol\\\";\\nimport {AaveUserData} from \\\"../../structs/SAave.sol\\\";\\nimport {\\n    LENDING_POOL_ADDRESSES_PROVIDER,\\n    CHAINLINK_ETH_FEED,\\n    AAVE_PROTOCOL_DATA_PROVIDER\\n} from \\\"../../constants/CAave.sol\\\";\\nimport {ETH, WETH} from \\\"../../constants/CTokens.sol\\\";\\n\\nfunction _getEtherPrice() view returns (uint256 ethPrice) {\\n    ethPrice = uint256(ChainLinkInterface(CHAINLINK_ETH_FEED).latestAnswer());\\n}\\n\\nfunction _getUserData(address user)\\n    view\\n    returns (AaveUserData memory userData)\\n{\\n    (\\n        uint256 totalCollateralETH,\\n        uint256 totalDebtETH,\\n        uint256 availableBorrowsETH,\\n        uint256 currentLiquidationThreshold,\\n        uint256 ltv,\\n        uint256 healthFactor\\n    ) =\\n        ILendingPool(\\n            ILendingPoolAddressesProvider(LENDING_POOL_ADDRESSES_PROVIDER)\\n                .getLendingPool()\\n        )\\n            .getUserAccountData(user);\\n\\n    userData = AaveUserData(\\n        totalCollateralETH,\\n        totalDebtETH,\\n        availableBorrowsETH,\\n        currentLiquidationThreshold,\\n        ltv,\\n        healthFactor,\\n        _getEtherPrice()\\n    );\\n}\\n\\nfunction _getAssetLiquidationThreshold(address _token)\\n    view\\n    returns (uint256 liquidationThreshold)\\n{\\n    (, , liquidationThreshold, , , , , , , ) = IAaveProtocolDataProvider(\\n        AAVE_PROTOCOL_DATA_PROVIDER\\n    )\\n        .getReserveConfigurationData(_getTokenAddr(_token));\\n}\\n\\nfunction _getTokenAddr(address _token) pure returns (address) {\\n    return _token == ETH ? WETH : _token;\\n}\\n\",\"keccak256\":\"0xa20bfadadb13a66cc88e6b60f706bb66a44ceda97127a96f487978360cb47d24\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {CompData, AccountLiquidityLocalVars} from \\\"../../structs/SCompound.sol\\\";\\nimport {INSTA_MAPPING} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {COMPTROLLER} from \\\"../../constants/CCompound.sol\\\";\\nimport {InstaMapping} from \\\"../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {ICToken} from \\\"../../interfaces/dapps/Compound/ICToken.sol\\\";\\nimport {IComptroller} from \\\"../../interfaces/dapps/Compound/IComptroller.sol\\\";\\nimport {IPriceOracle} from \\\"../../interfaces/dapps/Compound/IPriceOracle.sol\\\";\\nimport {mul} from \\\"../../vendor/DSMath.sol\\\";\\n\\nfunction _getCToken(address _token) view returns (address) {\\n    return InstaMapping(INSTA_MAPPING).cTokenMapping(_token);\\n}\\n\\nfunction _wouldCompoundAccountBeLiquid(\\n    address _dsa,\\n    uint256 _colAmt,\\n    address _cTokenModify,\\n    uint256 _debtAmt\\n) view returns (bool) {\\n    AccountLiquidityLocalVars memory vars;\\n\\n    IComptroller comptroller = IComptroller(COMPTROLLER);\\n\\n    ICToken[] memory assets = comptroller.getAssetsIn(_dsa);\\n    for (uint256 i = 0; i < assets.length; i++) {\\n        ICToken asset = assets[i];\\n        // Read the balances and exchange rate from the cToken\\n        vars = _getAssetLiquidity(vars, _dsa, asset);\\n\\n        // Calculate effects of interacting with cTokenModify\\n        if (address(asset) == _cTokenModify) {\\n            vars.sumCollateral = mulScalarTruncateAddUInt(\\n                vars.tokensToDenom,\\n                _colAmt,\\n                vars.sumCollateral\\n            );\\n\\n            // borrow effect\\n            // sumBorrowPlusEffects += oraclePrice * debtAmt\\n            vars.sumBorrowPlusEffects = mulScalarTruncateAddUInt(\\n                vars.oraclePrice,\\n                _debtAmt,\\n                vars.sumBorrowPlusEffects\\n            );\\n        }\\n    }\\n\\n    if (assets.length == 0) {\\n        vars = _getAssetLiquidity(vars, _dsa, ICToken(_cTokenModify));\\n\\n        vars.sumCollateral = mulScalarTruncateAddUInt(\\n            vars.tokensToDenom,\\n            _colAmt,\\n            vars.sumCollateral\\n        );\\n\\n        vars.sumBorrowPlusEffects = mulScalarTruncateAddUInt(\\n            vars.oraclePrice,\\n            _debtAmt,\\n            vars.sumBorrowPlusEffects\\n        );\\n    }\\n\\n    return vars.sumCollateral > vars.sumBorrowPlusEffects;\\n}\\n\\nfunction _getAssetLiquidity(\\n    AccountLiquidityLocalVars memory vars,\\n    address _dsa,\\n    ICToken _asset\\n) view returns (AccountLiquidityLocalVars memory) {\\n    uint256 oErr;\\n    IComptroller comptroller = IComptroller(COMPTROLLER);\\n\\n    // Read the balances and exchange rate from the cToken\\n    (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRate) = ICToken(\\n        _asset\\n    )\\n        .getAccountSnapshot(_dsa);\\n    require(oErr == 0, \\\"_getAssetLiquidity: semi-opaque error code\\\");\\n    (, vars.collateralFactor, ) = (comptroller.markets(address(_asset)));\\n    vars.oraclePrice = IPriceOracle(IComptroller(COMPTROLLER).oracle())\\n        .getUnderlyingPrice(_asset);\\n    require(vars.oraclePrice != 0, \\\"\\\");\\n\\n    vars.tokensToDenom = mul_expScale(\\n        mul_expScale(vars.collateralFactor, vars.exchangeRate),\\n        vars.oraclePrice\\n    );\\n\\n    vars.sumCollateral = mulScalarTruncateAddUInt(\\n        vars.tokensToDenom,\\n        vars.cTokenBalance,\\n        vars.sumCollateral\\n    );\\n\\n    vars.sumBorrowPlusEffects = mulScalarTruncateAddUInt(\\n        vars.oraclePrice,\\n        vars.borrowBalance,\\n        vars.sumBorrowPlusEffects\\n    );\\n    return vars;\\n}\\n\\n// Compound Math Function\\n\\nfunction mulScalarTruncateAddUInt(\\n    uint256 _a,\\n    uint256 _b,\\n    uint256 _addend\\n) pure returns (uint256) {\\n    return mul_expScale(_a, _b) + _addend;\\n}\\n\\nfunction mul_expScale(uint256 _a, uint256 _b) pure returns (uint256) {\\n    return mul(_a, _b) / 1e18;\\n}\\n\\n// Compound Math Function\\n\",\"keccak256\":\"0xbc4c14090f162d4b6f7ce596cfb34825989b517c68b3e42fff8f52db083dea66\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {MCD_MANAGER} from \\\"../../constants/CMaker.sol\\\";\\nimport {INSTA_MAPPING} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {\\n    ITokenJoinInterface\\n} from \\\"../../interfaces/dapps/Maker/ITokenJoinInterface.sol\\\";\\nimport {IMcdManager} from \\\"../../interfaces/dapps/Maker/IMcdManager.sol\\\";\\nimport {InstaMapping} from \\\"../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {IVat} from \\\"../../interfaces/dapps/Maker/IVat.sol\\\";\\nimport {RAY, add, sub, mul} from \\\"../../vendor/DSMath.sol\\\";\\nimport {_stringToBytes32, _convertTo18} from \\\"../../vendor/Convert.sol\\\";\\n\\nfunction _getMakerVaultDebt(uint256 _vaultId) view returns (uint256 wad) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, , , ) = vat.ilks(ilk);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n    uint256 dai = vat.dai(urn);\\n\\n    uint256 rad = sub(mul(art, rate), dai);\\n    wad = rad / RAY;\\n\\n    wad = mul(wad, RAY) < rad ? wad + 1 : wad;\\n}\\n\\nfunction _getMakerRawVaultDebt(uint256 _vaultId) view returns (uint256 tab) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, , , ) = vat.ilks(ilk);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n\\n    uint256 rad = mul(art, rate);\\n\\n    tab = rad / RAY;\\n    tab = mul(tab, RAY) < rad ? tab + 1 : tab;\\n}\\n\\nfunction _getMakerVaultCollateralBalance(uint256 _vaultId)\\n    view\\n    returns (uint256)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    IVat vat = IVat(manager.vat());\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    (uint256 ink, ) = vat.urns(ilk, urn);\\n\\n    return ink;\\n}\\n\\nfunction _vaultWillBeSafe(\\n    uint256 _vaultId,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    require(_vaultId != 0, \\\"_vaultWillBeSafe: invalid vault id.\\\");\\n\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n\\n    ITokenJoinInterface tokenJoinContract =\\n        ITokenJoinInterface(InstaMapping(INSTA_MAPPING).gemJoinMapping(ilk));\\n\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, uint256 spot, , ) = vat.ilks(ilk);\\n    (uint256 ink, uint256 art) = vat.urns(ilk, urn);\\n    uint256 dai = vat.dai(urn);\\n\\n    uint256 dink = _convertTo18(tokenJoinContract.dec(), _colAmt);\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n\\n    ink = add(ink, dink);\\n    art = add(art, dart);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab <= mul(ink, spot);\\n}\\n\\nfunction _newVaultWillBeSafe(\\n    string memory _colType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (, uint256 rate, uint256 spot, , ) = vat.ilks(ilk);\\n\\n    ITokenJoinInterface tokenJoinContract =\\n        ITokenJoinInterface(InstaMapping(INSTA_MAPPING).gemJoinMapping(ilk));\\n\\n    uint256 ink = _convertTo18(tokenJoinContract.dec(), _colAmt);\\n    uint256 art = _getDebtAmt(_daiDebtAmt, 0, rate);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab <= mul(ink, spot);\\n}\\n\\nfunction _debtCeilingIsReachedNewVault(\\n    string memory _colType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (uint256 Art, uint256 rate, , uint256 line, ) = vat.ilks(ilk);\\n    uint256 Line = vat.Line();\\n    uint256 debt = vat.debt();\\n\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, 0, rate);\\n    uint256 dtab = mul(rate, dart);\\n\\n    debt = add(debt, dtab);\\n    Art = add(Art, dart);\\n\\n    return mul(Art, rate) > line || debt > Line;\\n}\\n\\nfunction _debtCeilingIsReached(uint256 _vaultId, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n\\n    (uint256 Art, uint256 rate, , uint256 line, ) = vat.ilks(ilk);\\n    uint256 dai = vat.dai(urn);\\n    uint256 Line = vat.Line();\\n    uint256 debt = vat.debt();\\n\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n    uint256 dtab = mul(rate, dart);\\n\\n    debt = add(debt, dtab);\\n    Art = add(Art, dart);\\n\\n    return mul(Art, rate) > line || debt > Line;\\n}\\n\\nfunction _debtIsDustNewVault(string memory _colType, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (, uint256 rate, , , uint256 dust) = vat.ilks(ilk);\\n    uint256 art = _getDebtAmt(_daiDebtAmt, 0, rate);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab < dust;\\n}\\n\\nfunction _debtIsDust(uint256 _vaultId, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n    (, uint256 rate, , , uint256 dust) = vat.ilks(ilk);\\n\\n    uint256 dai = vat.dai(urn);\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n    art = add(art, dart);\\n    uint256 tab = mul(rate, art);\\n\\n    return tab < dust;\\n}\\n\\nfunction _getVaultData(IMcdManager _manager, uint256 _vault)\\n    view\\n    returns (bytes32 ilk, address urn)\\n{\\n    ilk = _manager.ilks(_vault);\\n    urn = _manager.urns(_vault);\\n}\\n\\nfunction _getDebtAmt(\\n    uint256 _amt,\\n    uint256 _dai,\\n    uint256 _rate\\n) pure returns (uint256 dart) {\\n    dart = sub(mul(_amt, RAY), _dai) / _rate;\\n    dart = mul(dart, _rate) < mul(_amt, RAY) ? dart + 1 : dart;\\n}\\n\\nfunction _isVaultOwner(uint256 _vaultId, address _owner) view returns (bool) {\\n    if (_vaultId == 0) return false;\\n\\n    try IMcdManager(MCD_MANAGER).owns(_vaultId) returns (address owner) {\\n        return _owner == owner;\\n    } catch Error(string memory error) {\\n        revert(string(abi.encodePacked(\\\"FMaker._isVaultOwner:\\\", error)));\\n    } catch {\\n        revert(\\\"FMaker._isVaultOwner:undefined\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9a36cfb605947e1c73e96b95be4e34d2c913f23386d86be1923b34f3511a772a\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/FGelato.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {GELATO_GAS_PRICE_ORACLE} from \\\"../../constants/CGelato.sol\\\";\\nimport {mul} from \\\"../../vendor/DSMath.sol\\\";\\n\\nfunction _getGelatoGasPrice() view returns (uint256) {\\n    int256 oracleGasPrice = GELATO_GAS_PRICE_ORACLE.latestAnswer();\\n    if (oracleGasPrice <= 0) revert(\\\"_getGelatoGasPrice:0orBelow\\\");\\n    return uint256(oracleGasPrice);\\n}\\n\\nfunction _getGelatoExecutorFees(uint256 _gas) view returns (uint256) {\\n    return mul(_gas, _getGelatoGasPrice());\\n}\\n\",\"keccak256\":\"0x465e09df3c9d5dba7468a625f98bf3a543eaab1eeb0caf35436bf42722dd17e8\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/FGelatoDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {wmul, wdiv} from \\\"../../vendor/DSMath.sol\\\";\\nimport {\\n    INSTA_POOL_RESOLVER,\\n    ROUTE_1_TOLERANCE\\n} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {DebtBridgeInputData} from \\\"../../structs/SDebtBridge.sol\\\";\\nimport {\\n    _canDoMakerToAaveDebtBridge,\\n    _canDoMakerToMakerDebtBridge,\\n    _canDoMakerToCompoundDebtBridge\\n} from \\\"./conditions/FCanDoRefinance.sol\\\";\\nimport {\\n    PROTOCOL,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE,\\n    FAST_TX_FEE,\\n    VAULT_CREATION_COST\\n} from \\\"../../constants/CDebtBridge.sol\\\";\\nimport {\\n    IInstaPoolResolver\\n} from \\\"../../interfaces/InstaDapp/resolvers/IInstaPoolResolver.sol\\\";\\nimport {_getMakerVaultDebt} from \\\"../dapps/FMaker.sol\\\";\\nimport {_getGelatoExecutorFees} from \\\"./FGelato.sol\\\";\\nimport {DAI, ETH} from \\\"../../constants/CTokens.sol\\\";\\nimport {IOracleAggregator} from \\\"../../interfaces/gelato/IOracleAggregator.sol\\\";\\nimport {_convertTo18} from \\\"../../vendor/Convert.sol\\\";\\n\\nfunction _getFlashLoanRoute(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (uint256)\\n{\\n    IInstaPoolResolver.RouteData memory rData =\\n        IInstaPoolResolver(INSTA_POOL_RESOLVER).getTokenLimit(_debtToken);\\n\\n    if (rData.dydx > _debtAmt) return 0;\\n    if (rData.maker > _debtAmt) return 1;\\n    if (rData.compound > _debtAmt) return 2;\\n    if (rData.aave > _debtAmt) return 3;\\n    revert(\\\"FGelatoDebtBridge._getFlashLoanRoute: illiquid\\\");\\n}\\n\\nfunction _getDebtBridgeRoute(DebtBridgeInputData memory _data)\\n    view\\n    returns (PROTOCOL)\\n{\\n    if (_canDoMakerToAaveDebtBridge(_data)) return PROTOCOL.AAVE;\\n    else if (_canDoMakerToMakerDebtBridge(_data)) return PROTOCOL.MAKER;\\n    else if (_canDoMakerToCompoundDebtBridge(_data)) return PROTOCOL.COMPOUND;\\n    return PROTOCOL.NONE;\\n}\\n\\nfunction _getGasCostMakerToMaker(bool _newVault, uint256 _route)\\n    pure\\n    returns (uint256)\\n{\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToMaker: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            _newVault\\n                ? GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()[_route] +\\n                    VAULT_CREATION_COST\\n                : GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()[_route]\\n        );\\n}\\n\\nfunction _getGasCostMakerToCompound(uint256 _route) pure returns (uint256) {\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToCompound: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND()[_route]\\n        );\\n}\\n\\nfunction _getGasCostMakerToAave(uint256 _route) pure returns (uint256) {\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToAave: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE()[_route]\\n        );\\n}\\n\\nfunction _getGasCostPremium(uint256 _rawGasCost) pure returns (uint256) {\\n    return (_rawGasCost * (100 + FAST_TX_FEE)) / 100;\\n}\\n\\nfunction _getRealisedDebt(uint256 _debtToMove) pure returns (uint256) {\\n    return wmul(_debtToMove, ROUTE_1_TOLERANCE);\\n}\\n\\nfunction _checkRouteIndex(uint256 _route, string memory _revertMsg) pure {\\n    require(_route <= 4, _revertMsg);\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToAave(\\n    uint256 _fromVaultId,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToAave(_getFlashLoanRoute(DAI, wDaiToBorrow)),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToCompound(\\n    uint256 _fromVaultId,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToCompound(_getFlashLoanRoute(DAI, wDaiToBorrow)),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToMaker(\\n    uint256 _fromVaultId,\\n    bool _newVault,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToMaker(\\n                _newVault,\\n                _getFlashLoanRoute(DAI, wDaiToBorrow)\\n            ),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrow(\\n    uint256 _wDaiToBorrow,\\n    uint256 _gasCost,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    (uint256 gasCostInDAI, uint256 decimals) =\\n        IOracleAggregator(_oracleAggregator).getExpectedReturnAmount(\\n            _getGelatoExecutorFees(_gasCost),\\n            ETH,\\n            DAI\\n        );\\n\\n    gasCostInDAI = _convertTo18(decimals, gasCostInDAI);\\n\\n    return _wDaiToBorrow + gasCostInDAI + wmul(_wDaiToBorrow, _fees);\\n}\\n\",\"keccak256\":\"0x175aee7c0071ded9d065f293c225c65d8d29253e62e6199119d506c611a1e8d2\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/FCanDoRefinance.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {_isAaveLiquid} from \\\"./aave/FAaveHasLiquidity.sol\\\";\\nimport {_aavePositionWillBeSafe} from \\\"./aave/FAavePositionWillBeSafe.sol\\\";\\nimport {_isDebtAmtDust} from \\\"./maker/FIsDebtAmtDust.sol\\\";\\nimport {_isDebtCeilingReached} from \\\"./maker/FDebtCeilingIsReached.sol\\\";\\nimport {_destVaultWillBeSafe} from \\\"./maker/FDestVaultWillBeSafe.sol\\\";\\nimport {_cTokenHasLiquidity} from \\\"./compound/FCompoundHasLiquidity.sol\\\";\\nimport {\\n    _compoundPositionWillBeSafe\\n} from \\\"./compound/FCompoundPositionWillBeSafe.sol\\\";\\nimport {DebtBridgeInputData} from \\\"../../../structs/SDebtBridge.sol\\\";\\nimport {DAI} from \\\"../../../constants/CTokens.sol\\\";\\nimport {\\n    _getMaxAmtToBorrow,\\n    _getGasCostMakerToAave,\\n    _getGasCostMakerToCompound,\\n    _getGasCostMakerToMaker\\n} from \\\"../FGelatoDebtBridge.sol\\\";\\n\\nfunction _canDoMakerToAaveDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    _data.debtAmt = _getMaxAmtToBorrow(\\n        _data.debtAmt,\\n        _getGasCostMakerToAave(_data.flashRoute),\\n        _data.fees,\\n        _data.oracleAggregator\\n    );\\n    return\\n        _isAaveLiquid(DAI, _data.debtAmt) &&\\n        _aavePositionWillBeSafe(\\n            _data.dsa,\\n            _data.colAmt,\\n            _data.colToken,\\n            _data.debtAmt,\\n            _data.oracleAggregator\\n        );\\n}\\n\\nfunction _canDoMakerToMakerDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    _data.debtAmt = _getMaxAmtToBorrow(\\n        _data.debtAmt,\\n        _getGasCostMakerToMaker(_data.makerDestVaultId == 0, _data.flashRoute),\\n        _data.fees,\\n        _data.oracleAggregator\\n    );\\n    return\\n        !_isDebtAmtDust(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            _data.debtAmt\\n        ) &&\\n        !_isDebtCeilingReached(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            _data.debtAmt\\n        ) &&\\n        _destVaultWillBeSafe(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            _data.colAmt,\\n            _data.debtAmt\\n        );\\n}\\n\\nfunction _canDoMakerToCompoundDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    _data.debtAmt = _getMaxAmtToBorrow(\\n        _data.debtAmt,\\n        _getGasCostMakerToCompound(_data.flashRoute),\\n        _data.fees,\\n        _data.oracleAggregator\\n    );\\n    return\\n        _cTokenHasLiquidity(DAI, _data.debtAmt) &&\\n        _compoundPositionWillBeSafe(\\n            _data.dsa,\\n            _data.colAmt,\\n            DAI,\\n            _data.debtAmt\\n        );\\n}\\n\",\"keccak256\":\"0xfeb332996ecdfecd2ac076897025e06b540134abf20e61b109938cb2c70912a6\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/aave/FAaveHasLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {IERC20} from \\\"../../../../interfaces/dapps/IERC20.sol\\\";\\nimport {\\n    ILendingPoolAddressesProvider\\n} from \\\"../../../../interfaces/dapps/Aave/ILendingPoolAddressesProvider.sol\\\";\\nimport {ILendingPool} from \\\"../../../../interfaces/dapps/Aave/ILendingPool.sol\\\";\\nimport {LENDING_POOL_ADDRESSES_PROVIDER} from \\\"../../../../constants/CAave.sol\\\";\\nimport {\\n    _getRealisedDebt\\n} from \\\"../../../../functions/gelato/FGelatoDebtBridge.sol\\\";\\nimport {_getMakerVaultDebt} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isAaveLiquid(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (bool)\\n{\\n    return\\n        IERC20(_debtToken).balanceOf(\\n            ILendingPool(\\n                ILendingPoolAddressesProvider(LENDING_POOL_ADDRESSES_PROVIDER)\\n                    .getLendingPool()\\n            )\\n                .getReserveData(_debtToken)\\n                .aTokenAddress\\n        ) > _debtAmt;\\n}\\n\",\"keccak256\":\"0xdab0be367444b3277d5945d200dbae6a19b53736c364417a545de30c29ce6ed1\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/aave/FAavePositionWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _getUserData,\\n    _getAssetLiquidationThreshold\\n} from \\\"../../../../functions/dapps/FAave.sol\\\";\\nimport {AaveUserData} from \\\"../../../../structs/SAave.sol\\\";\\nimport {GelatoBytes} from \\\"../../../../lib/GelatoBytes.sol\\\";\\nimport {wdiv, wmul, mul} from \\\"../../../../vendor/DSMath.sol\\\";\\nimport {\\n    IOracleAggregator\\n} from \\\"../../../../interfaces/gelato/IOracleAggregator.sol\\\";\\nimport {ETH, DAI} from \\\"../../../../constants/CTokens.sol\\\";\\nimport {_convertTo18} from \\\"../../../../vendor/Convert.sol\\\";\\n\\nfunction _aavePositionWillBeSafe(\\n    address _dsa,\\n    uint256 _colAmt,\\n    address _colToken,\\n    uint256 _debtAmt,\\n    address _oracleAggregator\\n) view returns (bool) {\\n    uint256 _colAmtInETH;\\n    uint256 _decimals;\\n    IOracleAggregator oracleAggregator = IOracleAggregator(_oracleAggregator);\\n\\n    AaveUserData memory userData = _getUserData(_dsa);\\n\\n    if (_colToken == ETH) _colAmtInETH = _colAmt;\\n    else {\\n        (_colAmtInETH, _decimals) = oracleAggregator.getExpectedReturnAmount(\\n            _colAmt,\\n            _colToken,\\n            ETH\\n        );\\n\\n        _colAmtInETH = _convertTo18(_decimals, _colAmtInETH);\\n    }\\n\\n    (_debtAmt, _decimals) = oracleAggregator.getExpectedReturnAmount(\\n        _debtAmt,\\n        DAI,\\n        ETH\\n    );\\n    _debtAmt = _convertTo18(_decimals, _debtAmt);\\n\\n    //\\n    //                  __\\n    //                  \\\\\\n    //                  /__ (Collateral)i in ETH x (Liquidation Threshold)i\\n    //  HealthFactor =  _________________________________________________\\n    //\\n    //                  Total Borrows in ETH + Total Fees in ETH\\n    //\\n\\n    return\\n        wdiv(\\n            (\\n                (mul(\\n                    userData.currentLiquidationThreshold,\\n                    userData.totalCollateralETH\\n                ) + mul(_colAmtInETH, _getAssetLiquidationThreshold(_colToken)))\\n            ) / 1e4,\\n            userData.totalBorrowsETH + _debtAmt\\n        ) > 1e18;\\n}\\n\",\"keccak256\":\"0x96331066dfa643fef3ebd213c5286b84e2e2a65e796507194cea39f49f4665ac\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/compound/FCompoundHasLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ICToken} from \\\"../../../../interfaces/dapps/Compound/ICToken.sol\\\";\\nimport {_getCToken} from \\\"../../../dapps/FCompound.sol\\\";\\n\\nfunction _cTokenHasLiquidity(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (bool)\\n{\\n    return ICToken(_getCToken(_debtToken)).getCash() > _debtAmt;\\n}\\n\",\"keccak256\":\"0x94ff371cde2624508c316b09e5a5f16efd1315091ec1a6dcd79204e683e2f78c\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/compound/FCompoundPositionWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {DAI} from \\\"../../../../constants/CTokens.sol\\\";\\nimport {\\n    _getCToken,\\n    _wouldCompoundAccountBeLiquid\\n} from \\\"../../../dapps/FCompound.sol\\\";\\n\\nfunction _compoundPositionWillBeSafe(\\n    address _dsa,\\n    uint256 _colAmt,\\n    address _debtToken,\\n    uint256 _debtAmt\\n) view returns (bool) {\\n    return\\n        _wouldCompoundAccountBeLiquid(\\n            _dsa,\\n            _colAmt,\\n            _getCToken(_debtToken),\\n            _debtAmt\\n        );\\n}\\n\",\"keccak256\":\"0x88ec9113308440560945b22168b24404709a70f28b8e639be393d68f8ff6b6ab\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FDebtCeilingIsReached.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _debtCeilingIsReachedNewVault,\\n    _debtCeilingIsReached,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isDebtCeilingReached(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return\\n        _debtCeilingIsReachedExplicit(_destVaultId, _destColType, _daiDebtAmt);\\n}\\n\\nfunction _debtCeilingIsReachedExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _debtCeilingIsReachedNewVault(_destColType, _daiDebtAmt)\\n            : _debtCeilingIsReached(_destVaultId, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x63d4ac5ebf15e2b820f5f8bacbd7856942c56e3f4c758ac72e2c23122f0bb6ad\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FDestVaultWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _vaultWillBeSafe,\\n    _newVaultWillBeSafe,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _destVaultWillBeSafe(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return\\n        _destVaultWillBeSafeExplicit(\\n            _destVaultId,\\n            _destColType,\\n            _colAmt,\\n            _daiDebtAmt\\n        );\\n}\\n\\nfunction _destVaultWillBeSafeExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _newVaultWillBeSafe(_destColType, _colAmt, _daiDebtAmt)\\n            : _vaultWillBeSafe(_destVaultId, _colAmt, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x02d7a4a2ce335b250eb1cbd445f9d76f90d5a183a86b715c0cf943022393dfb4\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FIsDebtAmtDust.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _debtIsDustNewVault,\\n    _debtIsDust,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isDebtAmtDust(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return _isDebtAmtDustExplicit(_destVaultId, _destColType, _daiDebtAmt);\\n}\\n\\nfunction _isDebtAmtDustExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _debtIsDustNewVault(_destColType, _daiDebtAmt)\\n            : _debtIsDust(_destVaultId, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x3fe2e42cc5cf8221731e7f4dd926e973024eb3efab57b4c4568e45ce70765a20\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/IInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n/// @notice Interface InstaDapp Index\\ninterface IndexInterface {\\n    function connectors(uint256 version) external view returns (address);\\n\\n    function list() external view returns (address);\\n}\\n\\n/// @notice Interface InstaDapp List\\ninterface ListInterface {\\n    function accountID(address _account) external view returns (uint64);\\n}\\n\\n/// @notice Interface InstaDapp InstaMemory\\ninterface MemoryInterface {\\n    function setUint(uint256 _id, uint256 _val) external;\\n\\n    function getUint(uint256 _id) external returns (uint256);\\n}\\n\\n/// @notice Interface InstaDapp Defi Smart Account wallet\\ninterface AccountInterface {\\n    function cast(\\n        address[] calldata _targets,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external payable returns (bytes32[] memory responses);\\n\\n    function version() external view returns (uint256);\\n\\n    function isAuth(address user) external view returns (bool);\\n\\n    function shield() external view returns (bool);\\n}\\n\\ninterface ConnectorInterface {\\n    function connectorID() external view returns (uint256 _type, uint256 _id);\\n\\n    function name() external view returns (string memory);\\n}\\n\\ninterface InstaMapping {\\n    function gemJoinMapping(bytes32) external view returns (address);\\n\\n    function cTokenMapping(address) external view returns (address);\\n}\\n\",\"keccak256\":\"0xe0675f18c98f99ac30d284feec4a1de5feb5f85c8d16c1a9e5cddd739dfb34c7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/IInstaFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IInstaFeeCollector {\\n    function setFeeCollector(address payable _feeCollector) external;\\n\\n    function setFee(uint256 _fee) external;\\n\\n    function fee() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address payable);\\n}\\n\",\"keccak256\":\"0xdb768ade8f511ae26c9de55b9373ad8b4eb8c99ab07a4bf097bfc8f25daa35b6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/resolvers/IInstaPoolResolver.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity 0.8.0;\\n\\ninterface IInstaPoolResolver {\\n    struct RouteData {\\n        uint256 dydx;\\n        uint256 maker;\\n        uint256 compound;\\n        uint256 aave;\\n    }\\n\\n    function getTokenLimit(address token)\\n        external\\n        view\\n        returns (RouteData memory);\\n}\\n\",\"keccak256\":\"0xd1e148a8c7d84f528397ac90a23160bfa04df6ad1ec990a2447ddb5ae069dac0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ChainLinkInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ChainLinkInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa28e7bfd15b9353039c764d8203adc9fc066a32db1da3351f10eed6af70c57ad\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/IAaveProtocolDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IAaveProtocolDataProvider {\\n    function getUserReserveData(address asset, address user)\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n}\\n\",\"keccak256\":\"0x8444e5bce4ff4a8715f095a931605e9765bffe3cb206bdf33f4e849cfab85735\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ReserveData} from \\\"../../../structs/SAave.sol\\\";\\n\\ninterface ILendingPool {\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (ReserveData memory);\\n\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function getReservesList() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x1215c59b3edc74953de7c551ee7de24aa00bebf0529f523dea6c99cb1faf5c1b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ILendingPoolAddressesProvider {\\n    function getLendingPool() external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4966d8f93cd89d770c8c5255aa0c266cb7df36adba5b195d0fd5d97960df8f02\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ICToken {\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCash() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x47be032b0dfd57cc06f58eb23c9cb8ec5aeaaee4abd3f620bd0260349e2251c5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ICToken} from \\\"./ICToken.sol\\\";\\nimport {Market} from \\\"../../../structs/SCompound.sol\\\";\\n\\ninterface IComptroller {\\n    function getAssetsIn(address account)\\n        external\\n        view\\n        returns (ICToken[] memory);\\n\\n    function oracle() external view returns (address);\\n\\n    function markets(address cToken)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isComped\\n        );\\n}\\n\",\"keccak256\":\"0x83078bc37abc76900f2db14752e9637c812d6e1798335f4ec7b257c4d0aaaa50\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ICToken} from \\\"./ICToken.sol\\\";\\n\\ninterface IPriceOracle {\\n    function getUnderlyingPrice(ICToken cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa6042bacdf286c327a2fcaa322cbbaa85b6f1407b772f2b5785b58917f6695e9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd0fbf10a1342de2706ae8dd1881ffe09c7bc1f7a3ee93b39a3b5c4acebf24487\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/IMcdManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IMcdManager {\\n    function ilks(uint256) external view returns (bytes32);\\n\\n    function urns(uint256) external view returns (address);\\n\\n    function vat() external view returns (address);\\n\\n    function owns(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x600c309dbdb47e7fb5b5b135e174c5af0fd80a583cc92e9db15868626ea13944\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/ITokenJoinInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ITokenJoinInterface {\\n    function dec() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a73dd7b495b10a6405595d2a72749940cbe62610ea1b4d7ec02f815bf4ed4d6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/IVat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IVat {\\n    function ilks(bytes32)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function dai(address) external view returns (uint256);\\n\\n    function urns(bytes32, address) external view returns (uint256, uint256);\\n\\n    function debt() external view returns (uint256);\\n\\n    // solhint-disable-next-line\\n    function Line() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x562456d1f66878e0dacc113383383c2eb3d4edcb76c9e0ecc04251895f5a453d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/gelato/IGelatoGasPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IGelatoGasPriceOracle {\\n    function latestAnswer() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x5d16f3187c98a910aeb6309f4b5a705237806fba133c7174713a9df7f482cbcb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/gelato/IOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IOracleAggregator {\\n    function getExpectedReturnAmount(\\n        uint256 amountIn,\\n        address inToken,\\n        address outToken\\n    ) external view returns (uint256 returnAmount, uint256 outTokenDecimals);\\n}\\n\",\"keccak256\":\"0xde61cf48c28a17f34bba0327a79af354cff3b92fdbcbe76ea5e0d6b804210b47\",\"license\":\"UNLICENSED\"},\"contracts/lib/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2456950f3849af7457015c291b9a45271ca3497d1c870361878d0f35de41080\",\"license\":\"UNLICENSED\"},\"contracts/structs/SAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// ////////// LendingPool /////////////////\\nstruct AaveUserData {\\n    uint256 totalCollateralETH;\\n    uint256 totalBorrowsETH;\\n    uint256 availableBorrowsETH;\\n    uint256 currentLiquidationThreshold;\\n    uint256 ltv;\\n    uint256 healthFactor;\\n    uint256 ethPriceInUsd;\\n}\\n\\nstruct ReserveConfigurationMap {\\n    uint256 data;\\n}\\n\\nstruct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n}\\n\",\"keccak256\":\"0x10956f70b043a4fdcaa69ceb6d286301ce8da849c0ccd5f5bc83690dab63f843\",\"license\":\"UNLICENSED\"},\"contracts/structs/SCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nstruct AccountLiquidityLocalVars {\\n    uint256 sumCollateral;\\n    uint256 sumBorrowPlusEffects;\\n    uint256 cTokenBalance;\\n    uint256 borrowBalance;\\n    uint256 exchangeRateMantissa;\\n    uint256 oraclePriceMantissa;\\n    uint256 collateralFactor;\\n    uint256 exchangeRate;\\n    uint256 oraclePrice;\\n    uint256 tokensToDenom;\\n}\\n\\nstruct Market {\\n    bool isListed;\\n    uint256 collateralFactorMantissa;\\n    mapping(address => bool) accountMembership;\\n    bool isComped;\\n}\\n\\nstruct CompData {\\n    uint256 tokenPriceInEth;\\n    uint256 tokenPriceInUsd;\\n    uint256 exchangeRateStored;\\n    uint256 balanceOfUser;\\n    uint256 borrowBalanceStoredUser;\\n    uint256 supplyRatePerBlock;\\n    uint256 borrowRatePerBlock;\\n    uint256 collateralFactor;\\n    bool isComped;\\n}\\n\",\"keccak256\":\"0xe8a0f77e7d1cfe283a9a9d356c0f32afb1fef06757e36c84948be9b0a4955927\",\"license\":\"UNLICENSED\"},\"contracts/structs/SDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nstruct DebtBridgeInputData {\\n    address dsa;\\n    uint256 colAmt;\\n    address colToken;\\n    uint256 debtAmt;\\n    address oracleAggregator;\\n    uint256 makerDestVaultId;\\n    string makerDestColType;\\n    uint256 fees;\\n    uint256 flashRoute;\\n}\\n\",\"keccak256\":\"0xec7b95278e03209f89a8c95b53b15d1c3faad51fd733b1f1b3d4d1a36ebd3bdd\",\"license\":\"UNLICENSED\"},\"contracts/vendor/Convert.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {mul as _mul} from \\\"./DSMath.sol\\\";\\n\\nfunction _stringToBytes32(string memory str) pure returns (bytes32 result) {\\n    require(bytes(str).length != 0, \\\"string-empty\\\");\\n    assembly {\\n        result := mload(add(str, 32))\\n    }\\n}\\n\\nfunction _convertTo18(uint256 _dec, uint256 _amt) pure returns (uint256 amt) {\\n    amt = _mul(_amt, 10**(18 - _dec));\\n}\\n\",\"keccak256\":\"0xba31db6ad3b69599bc5a6d8dc27f39fa6795f671af2f69fcd747983c01b799ce\",\"license\":\"UNLICENSED\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: AGPL-3.0-or-later\\\"\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.0;\\n\\nfunction add(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n}\\n\\nfunction sub(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n}\\n\\nfunction mul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n}\\n\\nfunction min(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction max(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nfunction imin(int256 x, int256 y) pure returns (int256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction imax(int256 x, int256 y) pure returns (int256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nuint256 constant WAD = 10**18;\\nuint256 constant RAY = 10**27;\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), WAD / 2) / WAD;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction rmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), RAY / 2) / RAY;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, WAD), y / 2) / y;\\n}\\n\\n//rounds to zero if x*y < RAY / 2\\nfunction rdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, RAY), y / 2) / y;\\n}\\n\\n// This famous algorithm is called \\\"exponentiation by squaring\\\"\\n// and calculates x^n with x as fixed-point and n as regular unsigned.\\n//\\n// It's O(log n), instead of O(n) for naive repeated multiplication.\\n//\\n// These facts are why it works:\\n//\\n//  If n is even, then x^n = (x^2)^(n/2).\\n//  If n is odd,  then x^n = x * x^(n-1),\\n//   and applying the equation for even x gives\\n//    x^n = x * (x^2)^((n-1) / 2).\\n//\\n//  Also, EVM division is flooring and\\n//    floor[(n-1) / 2] = floor[n / 2].\\n//\\nfunction rpow(uint256 x, uint256 n) pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n        x = rmul(x, x);\\n\\n        if (n % 2 != 0) {\\n            z = rmul(z, x);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d7cc87f9c74e3c8d9cfe196e0bdd657f2c4c0fbb588db8cb941066e859ed60a\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200527a3803806200527a8339818101604052810190620000379190620000c4565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505062000153565b600081519050620000be8162000139565b92915050565b60008060408385031215620000d857600080fd5b6000620000e885828601620000ad565b9250506020620000fb85828601620000ad565b9150509250929050565b6000620001128262000119565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001448162000105565b81146200015057600080fd5b50565b60805160601c60a05160601c6150ed6200018d6000396000818161012a01526102fb01526000818161022c015261034301526150ed6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80638dffe3f41461005c578063a99891c51461007a578063ae1bd1a1146100aa578063bc95af31146100da578063feb83893146100f8575b600080fd5b610064610128565b6040516100719190614609565b60405180910390f35b610094600480360381019061008f9190613ee9565b61014c565b6040516100a19190614701565b60405180910390f35b6100c460048036038101906100bf9190613c6a565b61019c565b6040516100d191906146c4565b60405180910390f35b6100e261022a565b6040516100ef9190614609565b60405180910390f35b610112600480360381019061010d9190613cfc565b61024e565b60405161011f9190614701565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b606060008060008060008888600490809261016993929190614985565b8101906101769190613bdb565b9450945094509450945061018d858585858561024e565b95505050505050949350505050565b606063feb8389360e01b8787878787876040516024016101c196959493929190614624565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060600061026361025e876104c6565b610790565b905060038081111561029e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61040a6040518061012001604052808a73ffffffffffffffffffffffffffffffffffffffff1681526020016102d28a6107ab565b81526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018481526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018681526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a757600080fd5b505afa1580156103bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103df9190613ec0565b8152602001610402736b175474e89094c44da98b954eedeac495271d0f866108f4565b815250610a2f565b6003811115610442577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610483576040518060400160405280601181526020017f43616e6e6f74446f526566696e616e63650000000000000000000000000000008152506104ba565b6040518060400160405280600281526020017f4f4b0000000000000000000000000000000000000000000000000000000000008152505b91505095945050505050565b600080735ef30b9986345249bc32d8928b7ee64de9435e3990506000806104ed8386610a80565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561053957600080fd5b505afa15801561054d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105719190613bb2565b905060008173ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b81526004016105ae9190614680565b60a06040518083038186803b1580156105c657600080fd5b505afa1580156105da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fe9190613ff4565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff16632424be5c86866040518363ffffffff1660e01b815260040161064192919061469b565b604080518083038186803b15801561065857600080fd5b505afa15801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190613f55565b91505060008373ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b81526004016106ce9190614609565b60206040518083038186803b1580156106e657600080fd5b505afa1580156106fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071e9190613ec0565b9050600061073561072f8486610ba0565b83610c0d565b90506b033b2e3c9fd0803ce80000008161074f9190614a0e565b9850806107688a6b033b2e3c9fd0803ce8000000610ba0565b106107735788610781565b60018961078091906149b8565b5b98505050505050505050919050565b60006107a482670df27a2cdf448000610c66565b9050919050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561080d57600080fd5b505afa158015610821573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108459190613bb2565b90506000806108548487610a80565b9150915060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c84846040518363ffffffff1660e01b815260040161089592919061469b565b604080518083038186803b1580156108ac57600080fd5b505afa1580156108c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e49190613f55565b5090508095505050505050919050565b60008073a004a5afba04b74037e9e52ba1f7eb02b5e6150973ffffffffffffffffffffffffffffffffffffffff16635a860c87856040518263ffffffff1660e01b81526004016109449190614609565b60806040518083038186803b15801561095c57600080fd5b505afa158015610970573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109949190613e97565b905082816000015111156109ac576000915050610a29565b82816020015111156109c2576001915050610a29565b82816040015111156109d8576002915050610a29565b82816060015111156109ee576003915050610a29565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2090614843565b60405180910390fd5b92915050565b6000610a3a82610caa565b15610a485760009050610a7b565b610a5182610d2c565b15610a5f5760019050610a7b565b610a6882610dd6565b15610a765760029050610a7b565b600390505b919050565b6000808373ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd846040518263ffffffff1660e01b8152600401610abc9190614863565b60206040518083038186803b158015610ad457600080fd5b505afa158015610ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0c9190613e1b565b91508373ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b8152600401610b479190614863565b60206040518083038186803b158015610b5f57600080fd5b505afa158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b979190613bb2565b90509250929050565b600080821480610bc8575082828385610bb99190614bb0565b925082610bc69190614a0e565b145b610c07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfe90614743565b60405180910390fd5b92915050565b6000828284610c1c9190614c0a565b9150811115610c60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5790614723565b60405180910390fd5b92915050565b6000670de0b6b3a7640000610c98610c7e8585610ba0565b6002670de0b6b3a7640000610c939190614a0e565b610e63565b610ca29190614a0e565b905092915050565b6000610cd18260600151610cc2846101000151610ebc565b8460e001518560800151610f34565b826060018181525050610cfc736b175474e89094c44da98b954eedeac495271d0f8360600151611031565b8015610d255750610d24826000015183602001518460400151856060015186608001516111e4565b5b9050919050565b6000610d5b8260600151610d4c60008560a0015114856101000151611433565b8460e001518560800151610f34565b826060018181525050610d8082600001518360a001518460c00151856060015161150a565b158015610da65750610da482600001518360a001518460c00151856060015161153a565b155b8015610dcf5750610dce82600001518360a001518460c001518560200151866060015161156a565b5b9050919050565b6000610dfd8260600151610dee84610100015161159c565b8460e001518560800151610f34565b826060018181525050610e28736b175474e89094c44da98b954eedeac495271d0f8360600151611614565b8015610e5c5750610e5b82600001518360200151736b175474e89094c44da98b954eedeac495271d0f85606001516116a6565b5b9050919050565b6000828284610e7291906149b8565b9150811015610eb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ead90614783565b60405180910390fd5b92915050565b6000610ee0826040518060600160405280603d815260200161507b603d91396116c6565b610f2d610eeb611712565b8360048110610f23577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015161174c565b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff16633c772b6c610f5e8861177a565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee736b175474e89094c44da98b954eedeac495271d0f6040518463ffffffff1660e01b8152600401610fa69392919061487e565b604080518083038186803b158015610fbd57600080fd5b505afa158015610fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff59190613f55565b915091506110038183611794565b915061100f8786610c66565b828861101b91906149b8565b61102591906149b8565b92505050949350505050565b6000818373ffffffffffffffffffffffffffffffffffffffff166370a0823173b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110aa57600080fd5b505afa1580156110be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e29190613bb2565b73ffffffffffffffffffffffffffffffffffffffff166335ea6a75876040518263ffffffff1660e01b815260040161111a9190614609565b6101806040518083038186803b15801561113357600080fd5b505afa158015611147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116b9190613e6d565b60e001516040518263ffffffff1660e01b815260040161118b9190614609565b60206040518083038186803b1580156111a357600080fd5b505afa1580156111b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111db9190613ec0565b11905092915050565b60008060008084905060006111f88a6117c0565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561124a578893506112ff565b8173ffffffffffffffffffffffffffffffffffffffff16633c772b6c8a8a73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6040518463ffffffff1660e01b815260040161129b9392919061487e565b604080518083038186803b1580156112b257600080fd5b505afa1580156112c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ea9190613f55565b80945081955050506112fc8385611794565b93505b8173ffffffffffffffffffffffffffffffffffffffff16633c772b6c88736b175474e89094c44da98b954eedeac495271d0f73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6040518463ffffffff1660e01b81526004016113649392919061487e565b604080518083038186803b15801561137b57600080fd5b505afa15801561138f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b39190613f55565b80945081985050506113c58388611794565b9650670de0b6b3a76400006114236127106113e8876113e38d61193e565b610ba0565b6113fa85606001518660000151610ba0565b61140491906149b8565b61140e9190614a0e565b89846020015161141e91906149b8565b611a1e565b1194505050505095945050505050565b6000611457826040518060600160405280603e8152602001614ffc603e91396116c6565b611502836114a957611467611a5a565b836004811061149f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516114fd565b62030d406114b5611a5a565b84600481106114ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516114fc91906149b8565b5b61174c565b905092915050565b60006115168486611a94565b611521576000611523565b835b9350611530848484611c24565b9050949350505050565b60006115468486611a94565b611551576000611553565b835b9350611560848484611c50565b9050949350505050565b60006115768587611a94565b611581576000611583565b845b945061159185858585611c7c565b905095945050505050565b60006115c08260405180608001604052806041815260200161503a604191396116c6565b61160d6115cb611cab565b8360048110611603577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015161174c565b9050919050565b60008161162084611ce5565b73ffffffffffffffffffffffffffffffffffffffff16633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b15801561166557600080fd5b505afa158015611679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169d9190613ec0565b11905092915050565b60006116bc85856116b686611ce5565b85611d8b565b9050949350505050565b6004821115819061170d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117049190614701565b60405180910390fd5b505050565b61171a6136a8565b60405180608001604052806223fd068152602001622d1e89815260200162339ac88152602001623d7bd8815250905090565b60006064601e606461175e91906149b8565b836117699190614bb0565b6117739190614a0e565b9050919050565b600061178d82611788611f8c565b610ba0565b9050919050565b60006117b8828460126117a79190614c0a565b600a6117b39190614a92565b610ba0565b905092915050565b6117c86136ca565b60008060008060008073b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561182b57600080fd5b505afa15801561183f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118639190613bb2565b73ffffffffffffffffffffffffffffffffffffffff1663bf92857c896040518263ffffffff1660e01b815260040161189b9190614609565b60c06040518083038186803b1580156118b357600080fd5b505afa1580156118c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118eb9190614146565b9550955095509550955095506040518060e0016040528087815260200186815260200185815260200184815260200183815260200182815260200161192e61206d565b8152509650505050505050919050565b600073057835ad21a177dbdd3090bb1cae03eacf78fc6d73ffffffffffffffffffffffffffffffffffffffff16633e15014161197984612106565b6040518263ffffffff1660e01b81526004016119959190614609565b6101406040518083038186803b1580156119ae57600080fd5b505afa1580156119c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e6919061406b565b909192939495969798509091929394959697509091929394955090919293945090919293509091925090915090505080915050919050565b600081611a48611a3685670de0b6b3a7640000610ba0565b600285611a439190614a0e565b610e63565b611a529190614a0e565b905092915050565b611a626136a8565b604051806080016040528062266fd88152602001622feb948152602001623c97b8815260200162424ca8815250905090565b600080831415611aa75760009050611c1e565b735ef30b9986345249bc32d8928b7ee64de9435e3973ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b8152600401611af49190614863565b60206040518083038186803b158015611b0c57600080fd5b505afa925050508015611b3d57506040513d601f19601f82011682018060405250810190611b3a9190613bb2565b60015b611beb57611b49614e5f565b80611b545750611bb0565b80604051602001611b6591906145e7565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba79190614701565b60405180910390fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be2906147c3565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16149150505b92915050565b6000808414611c3c57611c378483612172565b611c47565b611c46838361240c565b5b90509392505050565b6000808414611c6857611c638483612578565b611c73565b611c7283836128ab565b5b90509392505050565b6000808514611c9557611c90858484612b4c565b611ca1565b611ca0848484612f72565b5b9050949350505050565b611cb36136a8565b6040518060800160405280621ef3138152602001622814978152602001622cec41815260200162387070815250905090565b600073e81f70cc7c0d46e12d70efc60607f16bbd617e8873ffffffffffffffffffffffffffffffffffffffff1663104b29e9836040518263ffffffff1660e01b8152600401611d349190614609565b60206040518083038186803b158015611d4c57600080fd5b505afa158015611d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d849190613bb2565b9050919050565b6000611d95613707565b6000733d9819210a31b4961b30ef54be2aed79b9c9cd3b905060008173ffffffffffffffffffffffffffffffffffffffff1663abfceffc896040518263ffffffff1660e01b8152600401611de99190614609565b60006040518083038186803b158015611e0157600080fd5b505afa158015611e15573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e3e9190613d8b565b905060005b8151811015611f21576000828281518110611e87577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050611e9c858b83613217565b94508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f0d57611ee68561012001518a876000015161359f565b856000018181525050611f0385610100015188876020015161359f565b8560200181815250505b508080611f1990614d5e565b915050611e43565b50600081511415611f7457611f37838988613217565b9250611f4d83610120015188856000015161359f565b836000018181525050611f6a83610100015186856020015161359f565b8360200181815250505b82602001518360000151119350505050949350505050565b60008073169e633a2d1e6c10dd91238ba11c4a708dfef37c73ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fe957600080fd5b505afa158015611ffd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120219190613e44565b905060008113612066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205d906147a3565b60405180910390fd5b8091505090565b6000735f4ec3df9cbd43714fe2740f5e3616155c5b841973ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120c957600080fd5b505afa1580156120dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121019190613e44565b905090565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612155578161216b565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b9050919050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156121d457600080fd5b505afa1580156121e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220c9190613bb2565b905060008061221b8488610a80565b9150915060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c84846040518363ffffffff1660e01b815260040161225c92919061469b565b604080518083038186803b15801561227357600080fd5b505afa158015612287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ab9190613f55565b9150506000808573ffffffffffffffffffffffffffffffffffffffff1663d9638d36866040518263ffffffff1660e01b81526004016122ea9190614680565b60a06040518083038186803b15801561230257600080fd5b505afa158015612316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233a9190613ff4565b9450505092505060008673ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b815260040161237c9190614609565b60206040518083038186803b15801561239457600080fd5b505afa1580156123a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cc9190613ec0565b905060006123db8b83866135bf565b90506123e78582610e63565b945060006123f58587610ba0565b90508381109a505050505050505050505092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561246e57600080fd5b505afa158015612482573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a69190613bb2565b905060006124b38661362f565b90506000808373ffffffffffffffffffffffffffffffffffffffff1663d9638d36846040518263ffffffff1660e01b81526004016124f19190614680565b60a06040518083038186803b15801561250957600080fd5b505afa15801561251d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125419190613ff4565b945050509250506000612556886000856135bf565b905060006125648483610ba0565b905082811097505050505050505092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156125da57600080fd5b505afa1580156125ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126129190613bb2565b90506000806126218488610a80565b9150915060008060008573ffffffffffffffffffffffffffffffffffffffff1663d9638d36866040518263ffffffff1660e01b81526004016126639190614680565b60a06040518083038186803b15801561267b57600080fd5b505afa15801561268f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b39190613ff4565b509350509250925060008673ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b81526004016126f69190614609565b60206040518083038186803b15801561270e57600080fd5b505afa158015612722573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127469190613ec0565b905060008773ffffffffffffffffffffffffffffffffffffffff1663babe8a3f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561279057600080fd5b505afa1580156127a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c89190613ec0565b905060008873ffffffffffffffffffffffffffffffffffffffff16630dca59c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561281257600080fd5b505afa158015612826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284a9190613ec0565b905060006128598d85886135bf565b905060006128678783610ba0565b90506128738382610e63565b925061287f8883610e63565b97508561288c8989610ba0565b118061289757508383115b9c5050505050505050505050505092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561290d57600080fd5b505afa158015612921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129459190613bb2565b905060006129528661362f565b905060008060008473ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b81526004016129929190614680565b60a06040518083038186803b1580156129aa57600080fd5b505afa1580156129be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e29190613ff4565b509350509250925060008573ffffffffffffffffffffffffffffffffffffffff1663babe8a3f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a3257600080fd5b505afa158015612a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6a9190613ec0565b905060008673ffffffffffffffffffffffffffffffffffffffff16630dca59c16040518163ffffffff1660e01b815260040160206040518083038186803b158015612ab457600080fd5b505afa158015612ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aec9190613ec0565b90506000612afc8b6000876135bf565b90506000612b0a8683610ba0565b9050612b168382610e63565b9250612b228783610e63565b965084612b2f8888610ba0565b1180612b3a57508383115b9a505050505050505050505092915050565b600080841415612b91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b88906147e3565b60405180910390fd5b6000735ef30b9986345249bc32d8928b7ee64de9435e399050600080612bb78388610a80565b91509150600073e81f70cc7c0d46e12d70efc60607f16bbd617e8873ffffffffffffffffffffffffffffffffffffffff16634445d799846040518263ffffffff1660e01b8152600401612c0a9190614680565b60206040518083038186803b158015612c2257600080fd5b505afa158015612c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5a9190613bb2565b905060008473ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015612ca457600080fd5b505afa158015612cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdc9190613bb2565b90506000808273ffffffffffffffffffffffffffffffffffffffff1663d9638d36876040518263ffffffff1660e01b8152600401612d1a9190614680565b60a06040518083038186803b158015612d3257600080fd5b505afa158015612d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6a9190613ff4565b505092509250506000808473ffffffffffffffffffffffffffffffffffffffff16632424be5c89896040518363ffffffff1660e01b8152600401612daf92919061469b565b604080518083038186803b158015612dc657600080fd5b505afa158015612dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfe9190613f55565b9150915060008573ffffffffffffffffffffffffffffffffffffffff16636c25b346896040518263ffffffff1660e01b8152600401612e3d9190614609565b60206040518083038186803b158015612e5557600080fd5b505afa158015612e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8d9190613ec0565b90506000612f188873ffffffffffffffffffffffffffffffffffffffff1663b3bcfa826040518163ffffffff1660e01b815260040160206040518083038186803b158015612eda57600080fd5b505afa158015612eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f129190613ec0565b8f611794565b90506000612f278e84896135bf565b9050612f338583610e63565b9450612f3f8482610e63565b93506000612f4d8886610ba0565b9050612f598688610ba0565b8111159d50505050505050505050505050509392505050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015612fd457600080fd5b505afa158015612fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300c9190613bb2565b905060006130198761362f565b90506000808373ffffffffffffffffffffffffffffffffffffffff1663d9638d36846040518263ffffffff1660e01b81526004016130579190614680565b60a06040518083038186803b15801561306f57600080fd5b505afa158015613083573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a79190613ff4565b50509250925050600073e81f70cc7c0d46e12d70efc60607f16bbd617e8873ffffffffffffffffffffffffffffffffffffffff16634445d799856040518263ffffffff1660e01b81526004016130fd9190614680565b60206040518083038186803b15801561311557600080fd5b505afa158015613129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314d9190613bb2565b905060006131d88273ffffffffffffffffffffffffffffffffffffffff1663b3bcfa826040518163ffffffff1660e01b815260040160206040518083038186803b15801561319a57600080fd5b505afa1580156131ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d29190613ec0565b8b611794565b905060006131e88a6000876135bf565b905060006131f68683610ba0565b90506132028386610ba0565b81111599505050505050505050509392505050565b61321f613707565b600080733d9819210a31b4961b30ef54be2aed79b9c9cd3b90508373ffffffffffffffffffffffffffffffffffffffff1663c37f68e2866040518263ffffffff1660e01b81526004016132729190614609565b60806040518083038186803b15801561328a57600080fd5b505afa15801561329e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c29190613f91565b896040018a6060018b60e0018381525083815250838152508395505050505060008214613324576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161331b90614763565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16638e8f294b856040518263ffffffff1660e01b815260040161335d9190614609565b60606040518083038186803b15801561337557600080fd5b505afa158015613389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ad9190613dcc565b909150508660c0018181525050733d9819210a31b4961b30ef54be2aed79b9c9cd3b73ffffffffffffffffffffffffffffffffffffffff16637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561341457600080fd5b505afa158015613428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344c9190613bb2565b73ffffffffffffffffffffffffffffffffffffffff1663fc57d4df856040518263ffffffff1660e01b815260040161348491906146e6565b60206040518083038186803b15801561349c57600080fd5b505afa1580156134b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d49190613ec0565b8661010001818152505060008661010001511415613527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161351e90614823565b60405180910390fd5b61354761353c8760c001518860e00151613681565b876101000151613681565b866101200181815250506135698661012001518760400151886000015161359f565b86600001818152505061358a8661010001518760600151886020015161359f565b86602001818152505085925050509392505050565b6000816135ac8585613681565b6135b691906149b8565b90509392505050565b6000816135e16135db866b033b2e3c9fd0803ce8000000610ba0565b85610c0d565b6135eb9190614a0e565b9050613603846b033b2e3c9fd0803ce8000000610ba0565b61360d8284610ba0565b106136185780613626565b60018161362591906149b8565b5b90509392505050565b60008082511415613675576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161366c90614803565b60405180910390fd5b60208201519050919050565b6000670de0b6b3a76400006136968484610ba0565b6136a09190614a0e565b905092915050565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600061376d613768846148e6565b6148b5565b9050808382526020820190508285602086028201111561378c57600080fd5b60005b858110156137bc57816137a288826138e1565b84526020840193506020830192505060018101905061378f565b5050509392505050565b60006137d96137d484614912565b6148b5565b9050828152602081018484840111156137f157600080fd5b6137fc848285614d1c565b509392505050565b60008135905061381381614f15565b92915050565b60008151905061382881614f15565b92915050565b60008135905061383d81614f2c565b92915050565b600082601f83011261385457600080fd5b815161386484826020860161375a565b91505092915050565b60008151905061387c81614f43565b92915050565b60008151905061389181614f5a565b92915050565b60008083601f8401126138a957600080fd5b8235905067ffffffffffffffff8111156138c257600080fd5b6020830191508360018202830111156138da57600080fd5b9250929050565b6000815190506138f081614f71565b92915050565b60008151905061390581614f88565b92915050565b60008083601f84011261391d57600080fd5b8235905067ffffffffffffffff81111561393657600080fd5b60208301915083600182028301111561394e57600080fd5b9250929050565b600082601f83011261396657600080fd5b81356139768482602086016137c6565b91505092915050565b60006020828403121561399157600080fd5b61399b60206148b5565b905060006139ab84828501613b73565b60008301525092915050565b600061018082840312156139ca57600080fd5b6139d56101806148b5565b905060006139e58482850161397f565b60008301525060206139f984828501613b49565b6020830152506040613a0d84828501613b49565b6040830152506060613a2184828501613b49565b6060830152506080613a3584828501613b49565b60808301525060a0613a4984828501613b49565b60a08301525060c0613a5d84828501613b88565b60c08301525060e0613a7184828501613819565b60e083015250610100613a8684828501613819565b61010083015250610120613a9c84828501613819565b61012083015250610140613ab284828501613819565b61014083015250610160613ac884828501613b9d565b6101608301525092915050565b600060808284031215613ae757600080fd5b613af160806148b5565b90506000613b0184828501613b73565b6000830152506020613b1584828501613b73565b6020830152506040613b2984828501613b73565b6040830152506060613b3d84828501613b73565b60608301525092915050565b600081519050613b5881614f9f565b92915050565b600081359050613b6d81614fb6565b92915050565b600081519050613b8281614fb6565b92915050565b600081519050613b9781614fcd565b92915050565b600081519050613bac81614fe4565b92915050565b600060208284031215613bc457600080fd5b6000613bd284828501613819565b91505092915050565b600080600080600060a08688031215613bf357600080fd5b6000613c018882890161382e565b9550506020613c1288828901613b5e565b9450506040613c238882890161382e565b9350506060613c3488828901613b5e565b925050608086013567ffffffffffffffff811115613c5157600080fd5b613c5d88828901613955565b9150509295509295909350565b60008060008060008060a08789031215613c8357600080fd5b6000613c9189828a01613804565b9650506020613ca289828a01613b5e565b9550506040613cb389828a01613804565b9450506060613cc489828a01613b5e565b935050608087013567ffffffffffffffff811115613ce157600080fd5b613ced89828a0161390b565b92509250509295509295509295565b600080600080600060a08688031215613d1457600080fd5b6000613d2288828901613804565b9550506020613d3388828901613b5e565b9450506040613d4488828901613804565b9350506060613d5588828901613b5e565b925050608086013567ffffffffffffffff811115613d7257600080fd5b613d7e88828901613955565b9150509295509295909350565b600060208284031215613d9d57600080fd5b600082015167ffffffffffffffff811115613db757600080fd5b613dc384828501613843565b91505092915050565b600080600060608486031215613de157600080fd5b6000613def8682870161386d565b9350506020613e0086828701613b73565b9250506040613e118682870161386d565b9150509250925092565b600060208284031215613e2d57600080fd5b6000613e3b84828501613882565b91505092915050565b600060208284031215613e5657600080fd5b6000613e64848285016138f6565b91505092915050565b60006101808284031215613e8057600080fd5b6000613e8e848285016139b7565b91505092915050565b600060808284031215613ea957600080fd5b6000613eb784828501613ad5565b91505092915050565b600060208284031215613ed257600080fd5b6000613ee084828501613b73565b91505092915050565b60008060008060608587031215613eff57600080fd5b6000613f0d87828801613b5e565b945050602085013567ffffffffffffffff811115613f2a57600080fd5b613f3687828801613897565b93509350506040613f4987828801613b5e565b91505092959194509250565b60008060408385031215613f6857600080fd5b6000613f7685828601613b73565b9250506020613f8785828601613b73565b9150509250929050565b60008060008060808587031215613fa757600080fd5b6000613fb587828801613b73565b9450506020613fc687828801613b73565b9350506040613fd787828801613b73565b9250506060613fe887828801613b73565b91505092959194509250565b600080600080600060a0868803121561400c57600080fd5b600061401a88828901613b73565b955050602061402b88828901613b73565b945050604061403c88828901613b73565b935050606061404d88828901613b73565b925050608061405e88828901613b73565b9150509295509295909350565b6000806000806000806000806000806101408b8d03121561408b57600080fd5b60006140998d828e01613b73565b9a505060206140aa8d828e01613b73565b99505060406140bb8d828e01613b73565b98505060606140cc8d828e01613b73565b97505060806140dd8d828e01613b73565b96505060a06140ee8d828e0161386d565b95505060c06140ff8d828e0161386d565b94505060e06141108d828e0161386d565b9350506101006141228d828e0161386d565b9250506101206141348d828e0161386d565b9150509295989b9194979a5092959850565b60008060008060008060c0878903121561415f57600080fd5b600061416d89828a01613b73565b965050602061417e89828a01613b73565b955050604061418f89828a01613b73565b94505060606141a089828a01613b73565b93505060806141b189828a01613b73565b92505060a06141c289828a01613b73565b9150509295509295509295565b6141d881614c3e565b82525050565b6141e781614c6e565b82525050565b60006141f882614942565b6142028185614958565b9350614212818560208601614d2b565b61421b81614e34565b840191505092915050565b61422f81614cf8565b82525050565b60006142418385614969565b935061424e838584614d1c565b61425783614e34565b840190509392505050565b600061426d8261494d565b6142778185614969565b9350614287818560208601614d2b565b61429081614e34565b840191505092915050565b60006142a68261494d565b6142b0818561497a565b93506142c0818560208601614d2b565b80840191505092915050565b60006142d9601583614969565b91507f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006000830152602082019050919050565b6000614319601483614969565b91507f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000614359602a83614969565b91507f5f67657441737365744c69717569646974793a2073656d692d6f70617175652060008301527f6572726f7220636f6465000000000000000000000000000000000000000000006020830152604082019050919050565b60006143bf601483614969565b91507f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006000830152602082019050919050565b60006143ff601b83614969565b91507f5f67657447656c61746f47617350726963653a306f7242656c6f7700000000006000830152602082019050919050565b600061443f60158361497a565b91507f464d616b65722e5f69735661756c744f776e65723a00000000000000000000006000830152601582019050919050565b600061447f601e83614969565b91507f464d616b65722e5f69735661756c744f776e65723a756e646566696e656400006000830152602082019050919050565b60006144bf602383614969565b91507f5f7661756c7457696c6c4265536166653a20696e76616c6964207661756c742060008301527f69642e00000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614525600c83614969565b91507f737472696e672d656d70747900000000000000000000000000000000000000006000830152602082019050919050565b6000614565600083614969565b9150600082019050919050565b600061457f602e83614969565b91507f4647656c61746f446562744272696467652e5f676574466c6173684c6f616e5260008301527f6f7574653a20696c6c69717569640000000000000000000000000000000000006020830152604082019050919050565b6145e181614cd0565b82525050565b60006145f282614432565b91506145fe828461429b565b915081905092915050565b600060208201905061461e60008301846141cf565b92915050565b600060a08201905061463960008301896141cf565b61464660208301886145d8565b61465360408301876141cf565b61466060608301866145d8565b8181036080830152614673818486614235565b9050979650505050505050565b600060208201905061469560008301846141de565b92915050565b60006040820190506146b060008301856141de565b6146bd60208301846141cf565b9392505050565b600060208201905081810360008301526146de81846141ed565b905092915050565b60006020820190506146fb6000830184614226565b92915050565b6000602082019050818103600083015261471b8184614262565b905092915050565b6000602082019050818103600083015261473c816142cc565b9050919050565b6000602082019050818103600083015261475c8161430c565b9050919050565b6000602082019050818103600083015261477c8161434c565b9050919050565b6000602082019050818103600083015261479c816143b2565b9050919050565b600060208201905081810360008301526147bc816143f2565b9050919050565b600060208201905081810360008301526147dc81614472565b9050919050565b600060208201905081810360008301526147fc816144b2565b9050919050565b6000602082019050818103600083015261481c81614518565b9050919050565b6000602082019050818103600083015261483c81614558565b9050919050565b6000602082019050818103600083015261485c81614572565b9050919050565b600060208201905061487860008301846145d8565b92915050565b600060608201905061489360008301866145d8565b6148a060208301856141cf565b6148ad60408301846141cf565b949350505050565b6000604051905081810181811067ffffffffffffffff821117156148dc576148db614e05565b5b8060405250919050565b600067ffffffffffffffff82111561490157614900614e05565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561492d5761492c614e05565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000808585111561499557600080fd5b838611156149a257600080fd5b6001850283019150848603905094509492505050565b60006149c382614cd0565b91506149ce83614cd0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614a0357614a02614da7565b5b828201905092915050565b6000614a1982614cd0565b9150614a2483614cd0565b925082614a3457614a33614dd6565b5b828204905092915050565b6000808291508390505b6001851115614a8957808604811115614a6557614a64614da7565b5b6001851615614a745780820291505b8081029050614a8285614e45565b9450614a49565b94509492505050565b6000614a9d82614cd0565b9150614aa883614cd0565b9250614ad57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614add565b905092915050565b600082614aed5760019050614ba9565b81614afb5760009050614ba9565b8160018114614b115760028114614b1b57614b4a565b6001915050614ba9565b60ff841115614b2d57614b2c614da7565b5b8360020a915084821115614b4457614b43614da7565b5b50614ba9565b5060208310610133831016604e8410600b8410161715614b7f5782820a905083811115614b7a57614b79614da7565b5b614ba9565b614b8c8484846001614a3f565b92509050818404811115614ba357614ba2614da7565b5b81810290505b9392505050565b6000614bbb82614cd0565b9150614bc683614cd0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614bff57614bfe614da7565b5b828202905092915050565b6000614c1582614cd0565b9150614c2083614cd0565b925082821015614c3357614c32614da7565b5b828203905092915050565b6000614c4982614cb0565b9050919050565b6000614c5b82614cb0565b9050919050565b60008115159050919050565b6000819050919050565b6000614c8382614c3e565b9050919050565b6000819050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600064ffffffffff82169050919050565b600060ff82169050919050565b6000614d0382614d0a565b9050919050565b6000614d1582614cb0565b9050919050565b82818337600083830152505050565b60005b83811015614d49578082015181840152602081019050614d2e565b83811115614d58576000848401525b50505050565b6000614d6982614cd0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614d9c57614d9b614da7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b60008160e01c9050919050565b600060443d1015614e6f57614f12565b60046000803e614e80600051614e52565b6308c379a08114614e915750614f12565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715614ebd57505050614f12565b808201805167ffffffffffffffff811115614edc575050505050614f12565b8060208301013d8501811115614ef757505050505050614f12565b614f0082614e34565b60208401016040528296505050505050505b90565b614f1e81614c3e565b8114614f2957600080fd5b50565b614f3581614c50565b8114614f4057600080fd5b50565b614f4c81614c62565b8114614f5757600080fd5b50565b614f6381614c6e565b8114614f6e57600080fd5b50565b614f7a81614c78565b8114614f8557600080fd5b50565b614f9181614c8a565b8114614f9c57600080fd5b50565b614fa881614c94565b8114614fb357600080fd5b50565b614fbf81614cd0565b8114614fca57600080fd5b50565b614fd681614cda565b8114614fe157600080fd5b50565b614fed81614ceb565b8114614ff857600080fd5b5056fe4647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f4d616b65723a20696e76616c696420726f75746520696e6465784647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f436f6d706f756e643a20696e76616c696420726f75746520696e6465784647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f416176653a20696e76616c696420726f75746520696e646578a26469706673582212203bab786de19d8432210671a01b0362261724f7c2ac7e2ac72763d3b0a8f6debc64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80638dffe3f41461005c578063a99891c51461007a578063ae1bd1a1146100aa578063bc95af31146100da578063feb83893146100f8575b600080fd5b610064610128565b6040516100719190614609565b60405180910390f35b610094600480360381019061008f9190613ee9565b61014c565b6040516100a19190614701565b60405180910390f35b6100c460048036038101906100bf9190613c6a565b61019c565b6040516100d191906146c4565b60405180910390f35b6100e261022a565b6040516100ef9190614609565b60405180910390f35b610112600480360381019061010d9190613cfc565b61024e565b60405161011f9190614701565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b606060008060008060008888600490809261016993929190614985565b8101906101769190613bdb565b9450945094509450945061018d858585858561024e565b95505050505050949350505050565b606063feb8389360e01b8787878787876040516024016101c196959493929190614624565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060600061026361025e876104c6565b610790565b905060038081111561029e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61040a6040518061012001604052808a73ffffffffffffffffffffffffffffffffffffffff1681526020016102d28a6107ab565b81526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018481526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018681526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a757600080fd5b505afa1580156103bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103df9190613ec0565b8152602001610402736b175474e89094c44da98b954eedeac495271d0f866108f4565b815250610a2f565b6003811115610442577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610483576040518060400160405280601181526020017f43616e6e6f74446f526566696e616e63650000000000000000000000000000008152506104ba565b6040518060400160405280600281526020017f4f4b0000000000000000000000000000000000000000000000000000000000008152505b91505095945050505050565b600080735ef30b9986345249bc32d8928b7ee64de9435e3990506000806104ed8386610a80565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561053957600080fd5b505afa15801561054d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105719190613bb2565b905060008173ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b81526004016105ae9190614680565b60a06040518083038186803b1580156105c657600080fd5b505afa1580156105da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fe9190613ff4565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff16632424be5c86866040518363ffffffff1660e01b815260040161064192919061469b565b604080518083038186803b15801561065857600080fd5b505afa15801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190613f55565b91505060008373ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b81526004016106ce9190614609565b60206040518083038186803b1580156106e657600080fd5b505afa1580156106fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071e9190613ec0565b9050600061073561072f8486610ba0565b83610c0d565b90506b033b2e3c9fd0803ce80000008161074f9190614a0e565b9850806107688a6b033b2e3c9fd0803ce8000000610ba0565b106107735788610781565b60018961078091906149b8565b5b98505050505050505050919050565b60006107a482670df27a2cdf448000610c66565b9050919050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561080d57600080fd5b505afa158015610821573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108459190613bb2565b90506000806108548487610a80565b9150915060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c84846040518363ffffffff1660e01b815260040161089592919061469b565b604080518083038186803b1580156108ac57600080fd5b505afa1580156108c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e49190613f55565b5090508095505050505050919050565b60008073a004a5afba04b74037e9e52ba1f7eb02b5e6150973ffffffffffffffffffffffffffffffffffffffff16635a860c87856040518263ffffffff1660e01b81526004016109449190614609565b60806040518083038186803b15801561095c57600080fd5b505afa158015610970573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109949190613e97565b905082816000015111156109ac576000915050610a29565b82816020015111156109c2576001915050610a29565b82816040015111156109d8576002915050610a29565b82816060015111156109ee576003915050610a29565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2090614843565b60405180910390fd5b92915050565b6000610a3a82610caa565b15610a485760009050610a7b565b610a5182610d2c565b15610a5f5760019050610a7b565b610a6882610dd6565b15610a765760029050610a7b565b600390505b919050565b6000808373ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd846040518263ffffffff1660e01b8152600401610abc9190614863565b60206040518083038186803b158015610ad457600080fd5b505afa158015610ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0c9190613e1b565b91508373ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b8152600401610b479190614863565b60206040518083038186803b158015610b5f57600080fd5b505afa158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b979190613bb2565b90509250929050565b600080821480610bc8575082828385610bb99190614bb0565b925082610bc69190614a0e565b145b610c07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfe90614743565b60405180910390fd5b92915050565b6000828284610c1c9190614c0a565b9150811115610c60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5790614723565b60405180910390fd5b92915050565b6000670de0b6b3a7640000610c98610c7e8585610ba0565b6002670de0b6b3a7640000610c939190614a0e565b610e63565b610ca29190614a0e565b905092915050565b6000610cd18260600151610cc2846101000151610ebc565b8460e001518560800151610f34565b826060018181525050610cfc736b175474e89094c44da98b954eedeac495271d0f8360600151611031565b8015610d255750610d24826000015183602001518460400151856060015186608001516111e4565b5b9050919050565b6000610d5b8260600151610d4c60008560a0015114856101000151611433565b8460e001518560800151610f34565b826060018181525050610d8082600001518360a001518460c00151856060015161150a565b158015610da65750610da482600001518360a001518460c00151856060015161153a565b155b8015610dcf5750610dce82600001518360a001518460c001518560200151866060015161156a565b5b9050919050565b6000610dfd8260600151610dee84610100015161159c565b8460e001518560800151610f34565b826060018181525050610e28736b175474e89094c44da98b954eedeac495271d0f8360600151611614565b8015610e5c5750610e5b82600001518360200151736b175474e89094c44da98b954eedeac495271d0f85606001516116a6565b5b9050919050565b6000828284610e7291906149b8565b9150811015610eb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ead90614783565b60405180910390fd5b92915050565b6000610ee0826040518060600160405280603d815260200161507b603d91396116c6565b610f2d610eeb611712565b8360048110610f23577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015161174c565b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff16633c772b6c610f5e8861177a565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee736b175474e89094c44da98b954eedeac495271d0f6040518463ffffffff1660e01b8152600401610fa69392919061487e565b604080518083038186803b158015610fbd57600080fd5b505afa158015610fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff59190613f55565b915091506110038183611794565b915061100f8786610c66565b828861101b91906149b8565b61102591906149b8565b92505050949350505050565b6000818373ffffffffffffffffffffffffffffffffffffffff166370a0823173b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110aa57600080fd5b505afa1580156110be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e29190613bb2565b73ffffffffffffffffffffffffffffffffffffffff166335ea6a75876040518263ffffffff1660e01b815260040161111a9190614609565b6101806040518083038186803b15801561113357600080fd5b505afa158015611147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116b9190613e6d565b60e001516040518263ffffffff1660e01b815260040161118b9190614609565b60206040518083038186803b1580156111a357600080fd5b505afa1580156111b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111db9190613ec0565b11905092915050565b60008060008084905060006111f88a6117c0565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561124a578893506112ff565b8173ffffffffffffffffffffffffffffffffffffffff16633c772b6c8a8a73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6040518463ffffffff1660e01b815260040161129b9392919061487e565b604080518083038186803b1580156112b257600080fd5b505afa1580156112c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ea9190613f55565b80945081955050506112fc8385611794565b93505b8173ffffffffffffffffffffffffffffffffffffffff16633c772b6c88736b175474e89094c44da98b954eedeac495271d0f73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6040518463ffffffff1660e01b81526004016113649392919061487e565b604080518083038186803b15801561137b57600080fd5b505afa15801561138f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b39190613f55565b80945081985050506113c58388611794565b9650670de0b6b3a76400006114236127106113e8876113e38d61193e565b610ba0565b6113fa85606001518660000151610ba0565b61140491906149b8565b61140e9190614a0e565b89846020015161141e91906149b8565b611a1e565b1194505050505095945050505050565b6000611457826040518060600160405280603e8152602001614ffc603e91396116c6565b611502836114a957611467611a5a565b836004811061149f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516114fd565b62030d406114b5611a5a565b84600481106114ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516114fc91906149b8565b5b61174c565b905092915050565b60006115168486611a94565b611521576000611523565b835b9350611530848484611c24565b9050949350505050565b60006115468486611a94565b611551576000611553565b835b9350611560848484611c50565b9050949350505050565b60006115768587611a94565b611581576000611583565b845b945061159185858585611c7c565b905095945050505050565b60006115c08260405180608001604052806041815260200161503a604191396116c6565b61160d6115cb611cab565b8360048110611603577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015161174c565b9050919050565b60008161162084611ce5565b73ffffffffffffffffffffffffffffffffffffffff16633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b15801561166557600080fd5b505afa158015611679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169d9190613ec0565b11905092915050565b60006116bc85856116b686611ce5565b85611d8b565b9050949350505050565b6004821115819061170d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117049190614701565b60405180910390fd5b505050565b61171a6136a8565b60405180608001604052806223fd068152602001622d1e89815260200162339ac88152602001623d7bd8815250905090565b60006064601e606461175e91906149b8565b836117699190614bb0565b6117739190614a0e565b9050919050565b600061178d82611788611f8c565b610ba0565b9050919050565b60006117b8828460126117a79190614c0a565b600a6117b39190614a92565b610ba0565b905092915050565b6117c86136ca565b60008060008060008073b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561182b57600080fd5b505afa15801561183f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118639190613bb2565b73ffffffffffffffffffffffffffffffffffffffff1663bf92857c896040518263ffffffff1660e01b815260040161189b9190614609565b60c06040518083038186803b1580156118b357600080fd5b505afa1580156118c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118eb9190614146565b9550955095509550955095506040518060e0016040528087815260200186815260200185815260200184815260200183815260200182815260200161192e61206d565b8152509650505050505050919050565b600073057835ad21a177dbdd3090bb1cae03eacf78fc6d73ffffffffffffffffffffffffffffffffffffffff16633e15014161197984612106565b6040518263ffffffff1660e01b81526004016119959190614609565b6101406040518083038186803b1580156119ae57600080fd5b505afa1580156119c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e6919061406b565b909192939495969798509091929394959697509091929394955090919293945090919293509091925090915090505080915050919050565b600081611a48611a3685670de0b6b3a7640000610ba0565b600285611a439190614a0e565b610e63565b611a529190614a0e565b905092915050565b611a626136a8565b604051806080016040528062266fd88152602001622feb948152602001623c97b8815260200162424ca8815250905090565b600080831415611aa75760009050611c1e565b735ef30b9986345249bc32d8928b7ee64de9435e3973ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b8152600401611af49190614863565b60206040518083038186803b158015611b0c57600080fd5b505afa925050508015611b3d57506040513d601f19601f82011682018060405250810190611b3a9190613bb2565b60015b611beb57611b49614e5f565b80611b545750611bb0565b80604051602001611b6591906145e7565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba79190614701565b60405180910390fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be2906147c3565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16149150505b92915050565b6000808414611c3c57611c378483612172565b611c47565b611c46838361240c565b5b90509392505050565b6000808414611c6857611c638483612578565b611c73565b611c7283836128ab565b5b90509392505050565b6000808514611c9557611c90858484612b4c565b611ca1565b611ca0848484612f72565b5b9050949350505050565b611cb36136a8565b6040518060800160405280621ef3138152602001622814978152602001622cec41815260200162387070815250905090565b600073e81f70cc7c0d46e12d70efc60607f16bbd617e8873ffffffffffffffffffffffffffffffffffffffff1663104b29e9836040518263ffffffff1660e01b8152600401611d349190614609565b60206040518083038186803b158015611d4c57600080fd5b505afa158015611d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d849190613bb2565b9050919050565b6000611d95613707565b6000733d9819210a31b4961b30ef54be2aed79b9c9cd3b905060008173ffffffffffffffffffffffffffffffffffffffff1663abfceffc896040518263ffffffff1660e01b8152600401611de99190614609565b60006040518083038186803b158015611e0157600080fd5b505afa158015611e15573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e3e9190613d8b565b905060005b8151811015611f21576000828281518110611e87577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050611e9c858b83613217565b94508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f0d57611ee68561012001518a876000015161359f565b856000018181525050611f0385610100015188876020015161359f565b8560200181815250505b508080611f1990614d5e565b915050611e43565b50600081511415611f7457611f37838988613217565b9250611f4d83610120015188856000015161359f565b836000018181525050611f6a83610100015186856020015161359f565b8360200181815250505b82602001518360000151119350505050949350505050565b60008073169e633a2d1e6c10dd91238ba11c4a708dfef37c73ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fe957600080fd5b505afa158015611ffd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120219190613e44565b905060008113612066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205d906147a3565b60405180910390fd5b8091505090565b6000735f4ec3df9cbd43714fe2740f5e3616155c5b841973ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120c957600080fd5b505afa1580156120dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121019190613e44565b905090565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612155578161216b565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b9050919050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156121d457600080fd5b505afa1580156121e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220c9190613bb2565b905060008061221b8488610a80565b9150915060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c84846040518363ffffffff1660e01b815260040161225c92919061469b565b604080518083038186803b15801561227357600080fd5b505afa158015612287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ab9190613f55565b9150506000808573ffffffffffffffffffffffffffffffffffffffff1663d9638d36866040518263ffffffff1660e01b81526004016122ea9190614680565b60a06040518083038186803b15801561230257600080fd5b505afa158015612316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233a9190613ff4565b9450505092505060008673ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b815260040161237c9190614609565b60206040518083038186803b15801561239457600080fd5b505afa1580156123a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cc9190613ec0565b905060006123db8b83866135bf565b90506123e78582610e63565b945060006123f58587610ba0565b90508381109a505050505050505050505092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561246e57600080fd5b505afa158015612482573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a69190613bb2565b905060006124b38661362f565b90506000808373ffffffffffffffffffffffffffffffffffffffff1663d9638d36846040518263ffffffff1660e01b81526004016124f19190614680565b60a06040518083038186803b15801561250957600080fd5b505afa15801561251d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125419190613ff4565b945050509250506000612556886000856135bf565b905060006125648483610ba0565b905082811097505050505050505092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156125da57600080fd5b505afa1580156125ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126129190613bb2565b90506000806126218488610a80565b9150915060008060008573ffffffffffffffffffffffffffffffffffffffff1663d9638d36866040518263ffffffff1660e01b81526004016126639190614680565b60a06040518083038186803b15801561267b57600080fd5b505afa15801561268f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b39190613ff4565b509350509250925060008673ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b81526004016126f69190614609565b60206040518083038186803b15801561270e57600080fd5b505afa158015612722573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127469190613ec0565b905060008773ffffffffffffffffffffffffffffffffffffffff1663babe8a3f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561279057600080fd5b505afa1580156127a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c89190613ec0565b905060008873ffffffffffffffffffffffffffffffffffffffff16630dca59c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561281257600080fd5b505afa158015612826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284a9190613ec0565b905060006128598d85886135bf565b905060006128678783610ba0565b90506128738382610e63565b925061287f8883610e63565b97508561288c8989610ba0565b118061289757508383115b9c5050505050505050505050505092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561290d57600080fd5b505afa158015612921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129459190613bb2565b905060006129528661362f565b905060008060008473ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b81526004016129929190614680565b60a06040518083038186803b1580156129aa57600080fd5b505afa1580156129be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e29190613ff4565b509350509250925060008573ffffffffffffffffffffffffffffffffffffffff1663babe8a3f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a3257600080fd5b505afa158015612a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6a9190613ec0565b905060008673ffffffffffffffffffffffffffffffffffffffff16630dca59c16040518163ffffffff1660e01b815260040160206040518083038186803b158015612ab457600080fd5b505afa158015612ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aec9190613ec0565b90506000612afc8b6000876135bf565b90506000612b0a8683610ba0565b9050612b168382610e63565b9250612b228783610e63565b965084612b2f8888610ba0565b1180612b3a57508383115b9a505050505050505050505092915050565b600080841415612b91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b88906147e3565b60405180910390fd5b6000735ef30b9986345249bc32d8928b7ee64de9435e399050600080612bb78388610a80565b91509150600073e81f70cc7c0d46e12d70efc60607f16bbd617e8873ffffffffffffffffffffffffffffffffffffffff16634445d799846040518263ffffffff1660e01b8152600401612c0a9190614680565b60206040518083038186803b158015612c2257600080fd5b505afa158015612c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5a9190613bb2565b905060008473ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015612ca457600080fd5b505afa158015612cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdc9190613bb2565b90506000808273ffffffffffffffffffffffffffffffffffffffff1663d9638d36876040518263ffffffff1660e01b8152600401612d1a9190614680565b60a06040518083038186803b158015612d3257600080fd5b505afa158015612d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6a9190613ff4565b505092509250506000808473ffffffffffffffffffffffffffffffffffffffff16632424be5c89896040518363ffffffff1660e01b8152600401612daf92919061469b565b604080518083038186803b158015612dc657600080fd5b505afa158015612dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfe9190613f55565b9150915060008573ffffffffffffffffffffffffffffffffffffffff16636c25b346896040518263ffffffff1660e01b8152600401612e3d9190614609565b60206040518083038186803b158015612e5557600080fd5b505afa158015612e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8d9190613ec0565b90506000612f188873ffffffffffffffffffffffffffffffffffffffff1663b3bcfa826040518163ffffffff1660e01b815260040160206040518083038186803b158015612eda57600080fd5b505afa158015612eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f129190613ec0565b8f611794565b90506000612f278e84896135bf565b9050612f338583610e63565b9450612f3f8482610e63565b93506000612f4d8886610ba0565b9050612f598688610ba0565b8111159d50505050505050505050505050509392505050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015612fd457600080fd5b505afa158015612fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300c9190613bb2565b905060006130198761362f565b90506000808373ffffffffffffffffffffffffffffffffffffffff1663d9638d36846040518263ffffffff1660e01b81526004016130579190614680565b60a06040518083038186803b15801561306f57600080fd5b505afa158015613083573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a79190613ff4565b50509250925050600073e81f70cc7c0d46e12d70efc60607f16bbd617e8873ffffffffffffffffffffffffffffffffffffffff16634445d799856040518263ffffffff1660e01b81526004016130fd9190614680565b60206040518083038186803b15801561311557600080fd5b505afa158015613129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314d9190613bb2565b905060006131d88273ffffffffffffffffffffffffffffffffffffffff1663b3bcfa826040518163ffffffff1660e01b815260040160206040518083038186803b15801561319a57600080fd5b505afa1580156131ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d29190613ec0565b8b611794565b905060006131e88a6000876135bf565b905060006131f68683610ba0565b90506132028386610ba0565b81111599505050505050505050509392505050565b61321f613707565b600080733d9819210a31b4961b30ef54be2aed79b9c9cd3b90508373ffffffffffffffffffffffffffffffffffffffff1663c37f68e2866040518263ffffffff1660e01b81526004016132729190614609565b60806040518083038186803b15801561328a57600080fd5b505afa15801561329e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c29190613f91565b896040018a6060018b60e0018381525083815250838152508395505050505060008214613324576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161331b90614763565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16638e8f294b856040518263ffffffff1660e01b815260040161335d9190614609565b60606040518083038186803b15801561337557600080fd5b505afa158015613389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ad9190613dcc565b909150508660c0018181525050733d9819210a31b4961b30ef54be2aed79b9c9cd3b73ffffffffffffffffffffffffffffffffffffffff16637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561341457600080fd5b505afa158015613428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344c9190613bb2565b73ffffffffffffffffffffffffffffffffffffffff1663fc57d4df856040518263ffffffff1660e01b815260040161348491906146e6565b60206040518083038186803b15801561349c57600080fd5b505afa1580156134b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d49190613ec0565b8661010001818152505060008661010001511415613527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161351e90614823565b60405180910390fd5b61354761353c8760c001518860e00151613681565b876101000151613681565b866101200181815250506135698661012001518760400151886000015161359f565b86600001818152505061358a8661010001518760600151886020015161359f565b86602001818152505085925050509392505050565b6000816135ac8585613681565b6135b691906149b8565b90509392505050565b6000816135e16135db866b033b2e3c9fd0803ce8000000610ba0565b85610c0d565b6135eb9190614a0e565b9050613603846b033b2e3c9fd0803ce8000000610ba0565b61360d8284610ba0565b106136185780613626565b60018161362591906149b8565b5b90509392505050565b60008082511415613675576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161366c90614803565b60405180910390fd5b60208201519050919050565b6000670de0b6b3a76400006136968484610ba0565b6136a09190614a0e565b905092915050565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600061376d613768846148e6565b6148b5565b9050808382526020820190508285602086028201111561378c57600080fd5b60005b858110156137bc57816137a288826138e1565b84526020840193506020830192505060018101905061378f565b5050509392505050565b60006137d96137d484614912565b6148b5565b9050828152602081018484840111156137f157600080fd5b6137fc848285614d1c565b509392505050565b60008135905061381381614f15565b92915050565b60008151905061382881614f15565b92915050565b60008135905061383d81614f2c565b92915050565b600082601f83011261385457600080fd5b815161386484826020860161375a565b91505092915050565b60008151905061387c81614f43565b92915050565b60008151905061389181614f5a565b92915050565b60008083601f8401126138a957600080fd5b8235905067ffffffffffffffff8111156138c257600080fd5b6020830191508360018202830111156138da57600080fd5b9250929050565b6000815190506138f081614f71565b92915050565b60008151905061390581614f88565b92915050565b60008083601f84011261391d57600080fd5b8235905067ffffffffffffffff81111561393657600080fd5b60208301915083600182028301111561394e57600080fd5b9250929050565b600082601f83011261396657600080fd5b81356139768482602086016137c6565b91505092915050565b60006020828403121561399157600080fd5b61399b60206148b5565b905060006139ab84828501613b73565b60008301525092915050565b600061018082840312156139ca57600080fd5b6139d56101806148b5565b905060006139e58482850161397f565b60008301525060206139f984828501613b49565b6020830152506040613a0d84828501613b49565b6040830152506060613a2184828501613b49565b6060830152506080613a3584828501613b49565b60808301525060a0613a4984828501613b49565b60a08301525060c0613a5d84828501613b88565b60c08301525060e0613a7184828501613819565b60e083015250610100613a8684828501613819565b61010083015250610120613a9c84828501613819565b61012083015250610140613ab284828501613819565b61014083015250610160613ac884828501613b9d565b6101608301525092915050565b600060808284031215613ae757600080fd5b613af160806148b5565b90506000613b0184828501613b73565b6000830152506020613b1584828501613b73565b6020830152506040613b2984828501613b73565b6040830152506060613b3d84828501613b73565b60608301525092915050565b600081519050613b5881614f9f565b92915050565b600081359050613b6d81614fb6565b92915050565b600081519050613b8281614fb6565b92915050565b600081519050613b9781614fcd565b92915050565b600081519050613bac81614fe4565b92915050565b600060208284031215613bc457600080fd5b6000613bd284828501613819565b91505092915050565b600080600080600060a08688031215613bf357600080fd5b6000613c018882890161382e565b9550506020613c1288828901613b5e565b9450506040613c238882890161382e565b9350506060613c3488828901613b5e565b925050608086013567ffffffffffffffff811115613c5157600080fd5b613c5d88828901613955565b9150509295509295909350565b60008060008060008060a08789031215613c8357600080fd5b6000613c9189828a01613804565b9650506020613ca289828a01613b5e565b9550506040613cb389828a01613804565b9450506060613cc489828a01613b5e565b935050608087013567ffffffffffffffff811115613ce157600080fd5b613ced89828a0161390b565b92509250509295509295509295565b600080600080600060a08688031215613d1457600080fd5b6000613d2288828901613804565b9550506020613d3388828901613b5e565b9450506040613d4488828901613804565b9350506060613d5588828901613b5e565b925050608086013567ffffffffffffffff811115613d7257600080fd5b613d7e88828901613955565b9150509295509295909350565b600060208284031215613d9d57600080fd5b600082015167ffffffffffffffff811115613db757600080fd5b613dc384828501613843565b91505092915050565b600080600060608486031215613de157600080fd5b6000613def8682870161386d565b9350506020613e0086828701613b73565b9250506040613e118682870161386d565b9150509250925092565b600060208284031215613e2d57600080fd5b6000613e3b84828501613882565b91505092915050565b600060208284031215613e5657600080fd5b6000613e64848285016138f6565b91505092915050565b60006101808284031215613e8057600080fd5b6000613e8e848285016139b7565b91505092915050565b600060808284031215613ea957600080fd5b6000613eb784828501613ad5565b91505092915050565b600060208284031215613ed257600080fd5b6000613ee084828501613b73565b91505092915050565b60008060008060608587031215613eff57600080fd5b6000613f0d87828801613b5e565b945050602085013567ffffffffffffffff811115613f2a57600080fd5b613f3687828801613897565b93509350506040613f4987828801613b5e565b91505092959194509250565b60008060408385031215613f6857600080fd5b6000613f7685828601613b73565b9250506020613f8785828601613b73565b9150509250929050565b60008060008060808587031215613fa757600080fd5b6000613fb587828801613b73565b9450506020613fc687828801613b73565b9350506040613fd787828801613b73565b9250506060613fe887828801613b73565b91505092959194509250565b600080600080600060a0868803121561400c57600080fd5b600061401a88828901613b73565b955050602061402b88828901613b73565b945050604061403c88828901613b73565b935050606061404d88828901613b73565b925050608061405e88828901613b73565b9150509295509295909350565b6000806000806000806000806000806101408b8d03121561408b57600080fd5b60006140998d828e01613b73565b9a505060206140aa8d828e01613b73565b99505060406140bb8d828e01613b73565b98505060606140cc8d828e01613b73565b97505060806140dd8d828e01613b73565b96505060a06140ee8d828e0161386d565b95505060c06140ff8d828e0161386d565b94505060e06141108d828e0161386d565b9350506101006141228d828e0161386d565b9250506101206141348d828e0161386d565b9150509295989b9194979a5092959850565b60008060008060008060c0878903121561415f57600080fd5b600061416d89828a01613b73565b965050602061417e89828a01613b73565b955050604061418f89828a01613b73565b94505060606141a089828a01613b73565b93505060806141b189828a01613b73565b92505060a06141c289828a01613b73565b9150509295509295509295565b6141d881614c3e565b82525050565b6141e781614c6e565b82525050565b60006141f882614942565b6142028185614958565b9350614212818560208601614d2b565b61421b81614e34565b840191505092915050565b61422f81614cf8565b82525050565b60006142418385614969565b935061424e838584614d1c565b61425783614e34565b840190509392505050565b600061426d8261494d565b6142778185614969565b9350614287818560208601614d2b565b61429081614e34565b840191505092915050565b60006142a68261494d565b6142b0818561497a565b93506142c0818560208601614d2b565b80840191505092915050565b60006142d9601583614969565b91507f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006000830152602082019050919050565b6000614319601483614969565b91507f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000614359602a83614969565b91507f5f67657441737365744c69717569646974793a2073656d692d6f70617175652060008301527f6572726f7220636f6465000000000000000000000000000000000000000000006020830152604082019050919050565b60006143bf601483614969565b91507f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006000830152602082019050919050565b60006143ff601b83614969565b91507f5f67657447656c61746f47617350726963653a306f7242656c6f7700000000006000830152602082019050919050565b600061443f60158361497a565b91507f464d616b65722e5f69735661756c744f776e65723a00000000000000000000006000830152601582019050919050565b600061447f601e83614969565b91507f464d616b65722e5f69735661756c744f776e65723a756e646566696e656400006000830152602082019050919050565b60006144bf602383614969565b91507f5f7661756c7457696c6c4265536166653a20696e76616c6964207661756c742060008301527f69642e00000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614525600c83614969565b91507f737472696e672d656d70747900000000000000000000000000000000000000006000830152602082019050919050565b6000614565600083614969565b9150600082019050919050565b600061457f602e83614969565b91507f4647656c61746f446562744272696467652e5f676574466c6173684c6f616e5260008301527f6f7574653a20696c6c69717569640000000000000000000000000000000000006020830152604082019050919050565b6145e181614cd0565b82525050565b60006145f282614432565b91506145fe828461429b565b915081905092915050565b600060208201905061461e60008301846141cf565b92915050565b600060a08201905061463960008301896141cf565b61464660208301886145d8565b61465360408301876141cf565b61466060608301866145d8565b8181036080830152614673818486614235565b9050979650505050505050565b600060208201905061469560008301846141de565b92915050565b60006040820190506146b060008301856141de565b6146bd60208301846141cf565b9392505050565b600060208201905081810360008301526146de81846141ed565b905092915050565b60006020820190506146fb6000830184614226565b92915050565b6000602082019050818103600083015261471b8184614262565b905092915050565b6000602082019050818103600083015261473c816142cc565b9050919050565b6000602082019050818103600083015261475c8161430c565b9050919050565b6000602082019050818103600083015261477c8161434c565b9050919050565b6000602082019050818103600083015261479c816143b2565b9050919050565b600060208201905081810360008301526147bc816143f2565b9050919050565b600060208201905081810360008301526147dc81614472565b9050919050565b600060208201905081810360008301526147fc816144b2565b9050919050565b6000602082019050818103600083015261481c81614518565b9050919050565b6000602082019050818103600083015261483c81614558565b9050919050565b6000602082019050818103600083015261485c81614572565b9050919050565b600060208201905061487860008301846145d8565b92915050565b600060608201905061489360008301866145d8565b6148a060208301856141cf565b6148ad60408301846141cf565b949350505050565b6000604051905081810181811067ffffffffffffffff821117156148dc576148db614e05565b5b8060405250919050565b600067ffffffffffffffff82111561490157614900614e05565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561492d5761492c614e05565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000808585111561499557600080fd5b838611156149a257600080fd5b6001850283019150848603905094509492505050565b60006149c382614cd0565b91506149ce83614cd0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614a0357614a02614da7565b5b828201905092915050565b6000614a1982614cd0565b9150614a2483614cd0565b925082614a3457614a33614dd6565b5b828204905092915050565b6000808291508390505b6001851115614a8957808604811115614a6557614a64614da7565b5b6001851615614a745780820291505b8081029050614a8285614e45565b9450614a49565b94509492505050565b6000614a9d82614cd0565b9150614aa883614cd0565b9250614ad57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614add565b905092915050565b600082614aed5760019050614ba9565b81614afb5760009050614ba9565b8160018114614b115760028114614b1b57614b4a565b6001915050614ba9565b60ff841115614b2d57614b2c614da7565b5b8360020a915084821115614b4457614b43614da7565b5b50614ba9565b5060208310610133831016604e8410600b8410161715614b7f5782820a905083811115614b7a57614b79614da7565b5b614ba9565b614b8c8484846001614a3f565b92509050818404811115614ba357614ba2614da7565b5b81810290505b9392505050565b6000614bbb82614cd0565b9150614bc683614cd0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614bff57614bfe614da7565b5b828202905092915050565b6000614c1582614cd0565b9150614c2083614cd0565b925082821015614c3357614c32614da7565b5b828203905092915050565b6000614c4982614cb0565b9050919050565b6000614c5b82614cb0565b9050919050565b60008115159050919050565b6000819050919050565b6000614c8382614c3e565b9050919050565b6000819050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600064ffffffffff82169050919050565b600060ff82169050919050565b6000614d0382614d0a565b9050919050565b6000614d1582614cb0565b9050919050565b82818337600083830152505050565b60005b83811015614d49578082015181840152602081019050614d2e565b83811115614d58576000848401525b50505050565b6000614d6982614cd0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614d9c57614d9b614da7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b60008160e01c9050919050565b600060443d1015614e6f57614f12565b60046000803e614e80600051614e52565b6308c379a08114614e915750614f12565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715614ebd57505050614f12565b808201805167ffffffffffffffff811115614edc575050505050614f12565b8060208301013d8501811115614ef757505050505050614f12565b614f0082614e34565b60208401016040528296505050505050505b90565b614f1e81614c3e565b8114614f2957600080fd5b50565b614f3581614c50565b8114614f4057600080fd5b50565b614f4c81614c62565b8114614f5757600080fd5b50565b614f6381614c6e565b8114614f6e57600080fd5b50565b614f7a81614c78565b8114614f8557600080fd5b50565b614f9181614c8a565b8114614f9c57600080fd5b50565b614fa881614c94565b8114614fb357600080fd5b50565b614fbf81614cd0565b8114614fca57600080fd5b50565b614fd681614cda565b8114614fe157600080fd5b50565b614fed81614ceb565b8114614ff857600080fd5b5056fe4647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f4d616b65723a20696e76616c696420726f75746520696e6465784647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f436f6d706f756e643a20696e76616c696420726f75746520696e6465784647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f416176653a20696e76616c696420726f75746520696e646578a26469706673582212203bab786de19d8432210671a01b0362261724f7c2ac7e2ac72763d3b0a8f6debc64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
