{
  "address": "0xDF3CDd10e646e4155723a3bC5b1191741DD90333",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_oraclePayload",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_minColRatio",
          "type": "uint256"
        }
      ],
      "name": "getConditionData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_oraclePayload",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_minColRatio",
          "type": "uint256"
        }
      ],
      "name": "isVaultUnsafeOSM",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_conditionData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ok",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb5ff3e0b52d71a27c3e2cb221e1d218bfe9c3a691c92af6b2ceeee3efc646055",
  "receipt": {
    "to": null,
    "from": "0x5B753BF02a42bC73B5846dfd16a8F2e082b99a6a",
    "contractAddress": "0xDF3CDd10e646e4155723a3bC5b1191741DD90333",
    "transactionIndex": 119,
    "gasUsed": "691517",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9d8a476df7aa40042a13ec20b4e026da21034977bcb5ff2fcce2075cc6ce527c",
    "transactionHash": "0xb5ff3e0b52d71a27c3e2cb221e1d218bfe9c3a691c92af6b2ceeee3efc646055",
    "logs": [],
    "blockNumber": 11665479,
    "cumulativeGasUsed": "8701936",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4c9a22467780ba3244753adc746970ed",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_oraclePayload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_minColRatio\",\"type\":\"uint256\"}],\"name\":\"getConditionData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_oraclePayload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_minColRatio\",\"type\":\"uint256\"}],\"name\":\"isVaultUnsafeOSM\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_conditionData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ok\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Gelato Team\",\"kind\":\"dev\",\"methods\":{\"getConditionData(uint256,address,bytes,uint256)\":{\"details\":\"Use the return for your Task's Condition.data field off-chain.\",\"returns\":{\"_0\":\"The encoded payload for your Task's Condition.data field.\"}},\"isVaultUnsafeOSM(uint256,address,bytes,uint256)\":{\"details\":\"The price oracle must return (bytes32, bool).\",\"params\":{\"_minColRatio\":\"The minimum collateral ratio measured in the price of the collateral as specified by the _priceOracle.\",\"_oraclePayload\":\"The data for making the staticcall to the oracle's read  method e.g. the selector for MakerOracle's read fn.\",\"_priceOracle\":\"The price oracle contract to supply the collateral price  e.g. Maker's ETH/USD oracle for ETH collateral pricing.\",\"_vaultID\":\"The id of the Maker vault\"},\"returns\":{\"_0\":\"OK if the Maker Vault is unsafe, otherwise some error message.\"}},\"ok(uint256,bytes,uint256)\":{\"details\":\"A standard interface for GelatoCore to read Conditions\",\"params\":{\"_conditionData\":\"The data you get from `getConditionData()`\"},\"returns\":{\"_0\":\"OK if the Condition is there, else some error message.\"}}},\"title\":\"ConditionMakerVaultUnsafe\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getConditionData(uint256,address,bytes,uint256)\":{\"notice\":\"Convenience function for off-chain _conditionData encoding\"},\"isVaultUnsafeOSM(uint256,address,bytes,uint256)\":{\"notice\":\"Specific implementation of this Condition's ok function\"},\"ok(uint256,bytes,uint256)\":{\"notice\":\"Standard GelatoCore system function\"}},\"notice\":\"Condition tracking Maker vault collateralization safety requirements.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/gelato/conditions/maker/ConditionMakerVaultUnsafeOSM.sol\":\"ConditionMakerVaultUnsafeOSM\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/core/contracts/gelato_conditions/GelatoConditionsStandard.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\n\\nimport \\\"./IGelatoCondition.sol\\\";\\n\\nabstract contract GelatoConditionsStandard is IGelatoCondition {\\n    string internal constant OK = \\\"OK\\\";\\n}\\n\",\"keccak256\":\"0xa3d9ee5c4398914bbc0fe75fe54e57b73b8a4367caf9a40d9e5fd1ba9d4adb89\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_conditions/IGelatoCondition.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n\\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\\n    /// @dev Be careful only to encode a Task's condition.data as is and not with the\\n    ///  \\\"ok\\\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\\n    ///  source of Task identification.\\n    /// @param _conditionData This is the Condition.data field developers must encode their\\n    ///  Condition's specific parameters in.\\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\\n    function ok(uint256 _taskReceiptId, bytes calldata _conditionData, uint256 _cycleId)\\n        external\\n        view\\n        returns(string memory);\\n}\",\"keccak256\":\"0xd07607af93227ec5f8c2f5401289937b98c298f0d2398c1ba7410f82a6253964\",\"license\":\"UNLICENSED\"},\"contracts/constants/CInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// InstaDapp\\naddress constant INSTA_MEMORY = 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F;\\n\\n// Connectors\\naddress constant CONNECT_MAKER = 0xac02030d8a8F49eD04b2f52C394D3F901A10F8A9;\\naddress constant CONNECT_COMPOUND = 0x15FdD1e902cAC70786fe7D31013B1a806764B5a2;\\naddress constant INSTA_POOL_V2 = 0xeB4bf86589f808f90EEC8e964dBF16Bd4D284905;\\naddress constant CONNECT_AAVE_V2 = 0xBF6E4331ffd02F7043e62788FD272aeFc712f5ee;\\naddress constant CONNECT_DYDX = 0x6AF6C791c869DfA65f8A2fa042fA47D1535Bef25;\\naddress constant CONNECT_BASIC = 0xe5398f279175962E56fE4c5E0b62dc7208EF36c6;\\naddress constant CONNECT_FEE = 0xB99152F8073033B318C1Bfbfaaa582029e982CE9;\\n\\n// Insta Pool\\naddress constant INSTA_POOL_RESOLVER = 0xa004a5afBa04b74037E9E52bA1f7eb02b5E61509;\\nuint256 constant ROUTE_1_TOLERANCE = 1005e15;\\n\\n// Insta Mapping\\naddress constant INSTA_MAPPING = 0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88;\\n\\naddress constant INSTA_MAKER_RESOLVER = 0x0A7008B38E7015F8C36A49eEbc32513ECA8801E5;\\n\",\"keccak256\":\"0x0a6f769e4d928a6286024c823696c481fbeb75c85bd8648b450a18ff3fc0451d\",\"license\":\"UNLICENSED\"},\"contracts/contracts/gelato/conditions/maker/ConditionMakerVaultUnsafeOSM.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    GelatoConditionsStandard\\n} from \\\"@gelatonetwork/core/contracts/gelato_conditions/GelatoConditionsStandard.sol\\\";\\nimport {\\n    _isVaultUnsafeOSM\\n} from \\\"../../../../functions/gelato/conditions/maker/FMakerVaultUnsafeOSM.sol\\\";\\n\\n/// @title ConditionMakerVaultUnsafe\\n/// @notice Condition tracking Maker vault collateralization safety requirements.\\n/// @author Gelato Team\\ncontract ConditionMakerVaultUnsafeOSM is GelatoConditionsStandard {\\n    /// @notice Standard GelatoCore system function\\n    /// @dev A standard interface for GelatoCore to read Conditions\\n    /// @param _conditionData The data you get from `getConditionData()`\\n    /// @return OK if the Condition is there, else some error message.\\n    function ok(\\n        uint256,\\n        bytes calldata _conditionData,\\n        uint256\\n    ) public view virtual override returns (string memory) {\\n        (\\n            uint256 _vaultID,\\n            address _priceOracle,\\n            bytes memory _oraclePayload,\\n            uint256 _minColRatio\\n        ) = abi.decode(_conditionData[4:], (uint256, address, bytes, uint256));\\n\\n        return\\n            isVaultUnsafeOSM(\\n                _vaultID,\\n                _priceOracle,\\n                _oraclePayload,\\n                _minColRatio\\n            );\\n    }\\n\\n    /// @notice Specific implementation of this Condition's ok function\\n    /// @dev The price oracle must return (bytes32, bool).\\n    /// @param _vaultID The id of the Maker vault\\n    /// @param _priceOracle The price oracle contract to supply the collateral price\\n    ///  e.g. Maker's ETH/USD oracle for ETH collateral pricing.\\n    /// @param _oraclePayload The data for making the staticcall to the oracle's read\\n    ///  method e.g. the selector for MakerOracle's read fn.\\n    /// @param _minColRatio The minimum collateral ratio measured in the price\\n    /// of the collateral as specified by the _priceOracle.\\n    /// @return OK if the Maker Vault is unsafe, otherwise some error message.\\n    function isVaultUnsafeOSM(\\n        uint256 _vaultID,\\n        address _priceOracle,\\n        bytes memory _oraclePayload,\\n        uint256 _minColRatio\\n    ) public view virtual returns (string memory) {\\n        return\\n            _isVaultUnsafeOSM(\\n                _vaultID,\\n                _priceOracle,\\n                _oraclePayload,\\n                _minColRatio\\n            )\\n                ? OK\\n                : \\\"MakerVaultNotUnsafe\\\";\\n    }\\n\\n    /// @notice Convenience function for off-chain _conditionData encoding\\n    /// @dev Use the return for your Task's Condition.data field off-chain.\\n    /// @return The encoded payload for your Task's Condition.data field.\\n    function getConditionData(\\n        uint256 _vaultId,\\n        address _priceOracle,\\n        bytes calldata _oraclePayload,\\n        uint256 _minColRatio\\n    ) public pure virtual returns (bytes memory) {\\n        return\\n            abi.encodeWithSelector(\\n                this.isVaultUnsafeOSM.selector,\\n                _vaultId,\\n                _priceOracle,\\n                _oraclePayload,\\n                _minColRatio\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x7d4d2be0f68d34fd3cb14d38f1d252d52a3b198016bb82971c4ca3eb1f57f9e9\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FMakerVaultUnsafeOSM.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {wmul, wdiv} from \\\"../../../../vendor/DSMath.sol\\\";\\nimport {\\n    IInstaMakerResolver\\n} from \\\"../../../../interfaces/InstaDapp/resolvers/IInstaMakerResolver.sol\\\";\\nimport {GelatoBytes} from \\\"../../../../lib/GelatoBytes.sol\\\";\\nimport {INSTA_MAKER_RESOLVER} from \\\"../../../../constants/CInstaDapp.sol\\\";\\n\\nfunction _isVaultUnsafeOSM(\\n    uint256 _vaultId,\\n    address _priceOracle,\\n    bytes memory _oraclePayload,\\n    uint256 _minColRatio\\n) view returns (bool) {\\n    (bool success, bytes memory returndata) =\\n        _priceOracle.staticcall(_oraclePayload);\\n\\n    if (!success) {\\n        GelatoBytes.revertWithError(\\n            returndata,\\n            \\\"FMakerVaultUnsafeOSM._isVaultUnsafeOSM:oracle:\\\"\\n        );\\n    }\\n\\n    (bytes32 colPrice, bool hasNxt) = abi.decode(returndata, (bytes32, bool));\\n\\n    require(hasNxt, \\\"FMakerVaultUnsafeOSM._isVaultUnsafeOSM: !hasNxt\\\");\\n\\n    IInstaMakerResolver.VaultData memory vault =\\n        IInstaMakerResolver(INSTA_MAKER_RESOLVER).getVaultById(_vaultId);\\n\\n    return\\n        wdiv(wmul(vault.collateral, uint256(colPrice)), vault.debt) <\\n        _minColRatio;\\n}\\n\",\"keccak256\":\"0x656d7fed79f5cd089a695b5593463ed8769da63b81acd10f6a73ad370685fef7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/resolvers/IInstaMakerResolver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IInstaMakerResolver {\\n    struct VaultData {\\n        uint256 id;\\n        address owner;\\n        string colType;\\n        uint256 collateral;\\n        uint256 art;\\n        uint256 debt;\\n        uint256 liquidatedCol;\\n        uint256 borrowRate;\\n        uint256 colPrice;\\n        uint256 liquidationRatio;\\n        address vaultAddress;\\n    }\\n\\n    function getVaultById(uint256 id) external view returns (VaultData memory);\\n}\\n\",\"keccak256\":\"0x2b9e8878662436a242739756f9c468d4ae0a3157299752b231a60087da0d5c2f\",\"license\":\"UNLICENSED\"},\"contracts/lib/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2456950f3849af7457015c291b9a45271ca3497d1c870361878d0f35de41080\",\"license\":\"UNLICENSED\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: AGPL-3.0-or-later\\\"\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.0;\\n\\nfunction add(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n}\\n\\nfunction sub(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n}\\n\\nfunction mul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n}\\n\\nfunction min(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction max(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nfunction imin(int256 x, int256 y) pure returns (int256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction imax(int256 x, int256 y) pure returns (int256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nuint256 constant WAD = 10**18;\\nuint256 constant RAY = 10**27;\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), WAD / 2) / WAD;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction rmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), RAY / 2) / RAY;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, WAD), y / 2) / y;\\n}\\n\\n//rounds to zero if x*y < RAY / 2\\nfunction rdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, RAY), y / 2) / y;\\n}\\n\\n// This famous algorithm is called \\\"exponentiation by squaring\\\"\\n// and calculates x^n with x as fixed-point and n as regular unsigned.\\n//\\n// It's O(log n), instead of O(n) for naive repeated multiplication.\\n//\\n// These facts are why it works:\\n//\\n//  If n is even, then x^n = (x^2)^(n/2).\\n//  If n is odd,  then x^n = x * x^(n-1),\\n//   and applying the equation for even x gives\\n//    x^n = x * (x^2)^((n-1) / 2).\\n//\\n//  Also, EVM division is flooring and\\n//    floor[(n-1) / 2] = floor[n / 2].\\n//\\nfunction rpow(uint256 x, uint256 n) pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n        x = rmul(x, x);\\n\\n        if (n % 2 != 0) {\\n            z = rmul(z, x);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d7cc87f9c74e3c8d9cfe196e0bdd657f2c4c0fbb588db8cb941066e859ed60a\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b8c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636e8391dd1461004657806377301f811461006f578063a99891c514610082575b600080fd5b610059610054366004610766565b610095565b60405161006691906108ae565b60405180910390f35b61005961007d366004610704565b6100fd565b61005961009036600461077b565b61015d565b60606100a38585858561019f565b6100d857604051806040016040528060138152602001724d616b65725661756c744e6f74556e7361666560681b8152506100f4565b604051806040016040528060028152602001614f4b60f01b8152505b95945050505050565b6060636e8391dd60e01b8686868686604051602401610120959493929190610975565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152905095945050505050565b60606000808080610171876004818b610a17565b81019061017e91906106a5565b935093509350935061019284848484610095565b9998505050505050505050565b6000806000856001600160a01b0316856040516101bc91906107f8565b600060405180830381855afa9150503d80600081146101f7576040519150601f19603f3d011682016040523d82523d6000602084013e6101fc565b606091505b50915091508161022857610228816040518060600160405280602e8152602001610b29602e9139610327565b6000808280602001905181019061023f9190610586565b91509150806102695760405162461bcd60e51b81526004016102609061091d565b60405180910390fd5b604051634a3843bb60e11b8152600090730a7008b38e7015f8c36a49eebc32513eca8801e5906394708776906102a3908d9060040161096c565b60006040518083038186803b1580156102bb57600080fd5b505afa1580156102cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102f791908101906105b9565b90508661031861030e83606001518660001c6103bb565b8360a001516103fc565b109a9950505050505050505050565b602082516103359190610aba565b600414156103aa57602082015162461bcd60e51b6001600160e01b031982161415610399576044830192508183604051602001610373929190610814565b60408051601f198184030181529082905262461bcd60e51b8252610260916004016108ae565b816040516020016103739190610843565b806040516020016103739190610876565b6000670de0b6b3a76400006103eb6103d3858561041f565b6103e66002670de0b6b3a7640000610a57565b610465565b6103f59190610a57565b9392505050565b6000816103eb61041485670de0b6b3a764000061041f565b6103e6600286610a57565b6000811580610443575082826104358183610a6b565b92506104419083610a57565b145b61045f5760405162461bcd60e51b8152600401610260906108c1565b92915050565b6000826104728382610a3f565b915081101561045f5760405162461bcd60e51b8152600401610260906108ef565b805161049e81610b10565b919050565b60008083601f8401126104b4578182fd5b50813567ffffffffffffffff8111156104cb578182fd5b6020830191508360208285010111156104e357600080fd5b9250929050565b600082601f8301126104fa578081fd5b813561050d610508826109ef565b6109c5565b818152846020838601011115610521578283fd5b816020850160208301379081016020019190915292915050565b600082601f83011261054b578081fd5b8151610559610508826109ef565b81815284602083860101111561056d578283fd5b61057e826020830160208701610a8a565b949350505050565b60008060408385031215610598578182fd5b82519150602083015180151581146105ae578182fd5b809150509250929050565b6000602082840312156105ca578081fd5b815167ffffffffffffffff808211156105e1578283fd5b81840191506101608083870312156105f7578384fd5b610600816109c5565b90508251815261061260208401610493565b6020820152604083015182811115610628578485fd5b6106348782860161053b565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e082015261010091508183015182820152610120915081830151828201526101409150610696828401610493565b91810191909152949350505050565b600080600080608085870312156106ba578182fd5b8435935060208501356106cc81610b10565b9250604085013567ffffffffffffffff8111156106e7578283fd5b6106f3878288016104ea565b949793965093946060013593505050565b60008060008060006080868803121561071b578081fd5b85359450602086013561072d81610b10565b9350604086013567ffffffffffffffff811115610748578182fd5b610754888289016104a3565b96999598509660600135949350505050565b600080600080608085870312156106ba578384fd5b60008060008060608587031215610790578384fd5b84359350602085013567ffffffffffffffff8111156107ad578384fd5b6107b9878288016104a3565b9598909750949560400135949350505050565b600081518084526107e4816020860160208601610a8a565b601f01601f19169290920160200192915050565b6000825161080a818460208701610a8a565b9190910192915050565b60008351610826818460208801610a8a565b83519083019061083a818360208801610a8a565b01949350505050565b60008251610855818460208701610a8a565b6e2737a2b93937b929b2b632b1ba37b960891b920191825250600f01919050565b60008251610888818460208701610a8a565b73556e657870656374656452657475726e6461746160601b920191825250601401919050565b6000602082526103f560208301846107cc565b60208082526014908201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604082015260600190565b60208082526014908201527364732d6d6174682d6164642d6f766572666c6f7760601b604082015260600190565b6020808252602f908201527f464d616b65725661756c74556e736166654f534d2e5f69735661756c74556e7360408201526e18599953d4d34e88085a185cd39e1d608a1b606082015260800190565b90815260200190565b8581526001600160a01b038516602082015260806040820181905281018390526000838560a08401378060a0858401015260a0601f19601f86011683010190508260608301529695505050505050565b60405181810167ffffffffffffffff811182821017156109e7576109e7610afa565b604052919050565b600067ffffffffffffffff821115610a0957610a09610afa565b50601f01601f191660200190565b60008085851115610a26578182fd5b83861115610a32578182fd5b5050820193919092039150565b60008219821115610a5257610a52610ace565b500190565b600082610a6657610a66610ae4565b500490565b6000816000190483118215151615610a8557610a85610ace565b500290565b60005b83811015610aa5578181015183820152602001610a8d565b83811115610ab4576000848401525b50505050565b600082610ac957610ac9610ae4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b2557600080fd5b5056fe464d616b65725661756c74556e736166654f534d2e5f69735661756c74556e736166654f534d3a6f7261636c653aa2646970667358221220cba62336fec4d3665588b58a23939e255ee2690bc2b420c10464ff153df645a664736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80636e8391dd1461004657806377301f811461006f578063a99891c514610082575b600080fd5b610059610054366004610766565b610095565b60405161006691906108ae565b60405180910390f35b61005961007d366004610704565b6100fd565b61005961009036600461077b565b61015d565b60606100a38585858561019f565b6100d857604051806040016040528060138152602001724d616b65725661756c744e6f74556e7361666560681b8152506100f4565b604051806040016040528060028152602001614f4b60f01b8152505b95945050505050565b6060636e8391dd60e01b8686868686604051602401610120959493929190610975565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152905095945050505050565b60606000808080610171876004818b610a17565b81019061017e91906106a5565b935093509350935061019284848484610095565b9998505050505050505050565b6000806000856001600160a01b0316856040516101bc91906107f8565b600060405180830381855afa9150503d80600081146101f7576040519150601f19603f3d011682016040523d82523d6000602084013e6101fc565b606091505b50915091508161022857610228816040518060600160405280602e8152602001610b29602e9139610327565b6000808280602001905181019061023f9190610586565b91509150806102695760405162461bcd60e51b81526004016102609061091d565b60405180910390fd5b604051634a3843bb60e11b8152600090730a7008b38e7015f8c36a49eebc32513eca8801e5906394708776906102a3908d9060040161096c565b60006040518083038186803b1580156102bb57600080fd5b505afa1580156102cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102f791908101906105b9565b90508661031861030e83606001518660001c6103bb565b8360a001516103fc565b109a9950505050505050505050565b602082516103359190610aba565b600414156103aa57602082015162461bcd60e51b6001600160e01b031982161415610399576044830192508183604051602001610373929190610814565b60408051601f198184030181529082905262461bcd60e51b8252610260916004016108ae565b816040516020016103739190610843565b806040516020016103739190610876565b6000670de0b6b3a76400006103eb6103d3858561041f565b6103e66002670de0b6b3a7640000610a57565b610465565b6103f59190610a57565b9392505050565b6000816103eb61041485670de0b6b3a764000061041f565b6103e6600286610a57565b6000811580610443575082826104358183610a6b565b92506104419083610a57565b145b61045f5760405162461bcd60e51b8152600401610260906108c1565b92915050565b6000826104728382610a3f565b915081101561045f5760405162461bcd60e51b8152600401610260906108ef565b805161049e81610b10565b919050565b60008083601f8401126104b4578182fd5b50813567ffffffffffffffff8111156104cb578182fd5b6020830191508360208285010111156104e357600080fd5b9250929050565b600082601f8301126104fa578081fd5b813561050d610508826109ef565b6109c5565b818152846020838601011115610521578283fd5b816020850160208301379081016020019190915292915050565b600082601f83011261054b578081fd5b8151610559610508826109ef565b81815284602083860101111561056d578283fd5b61057e826020830160208701610a8a565b949350505050565b60008060408385031215610598578182fd5b82519150602083015180151581146105ae578182fd5b809150509250929050565b6000602082840312156105ca578081fd5b815167ffffffffffffffff808211156105e1578283fd5b81840191506101608083870312156105f7578384fd5b610600816109c5565b90508251815261061260208401610493565b6020820152604083015182811115610628578485fd5b6106348782860161053b565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e082015261010091508183015182820152610120915081830151828201526101409150610696828401610493565b91810191909152949350505050565b600080600080608085870312156106ba578182fd5b8435935060208501356106cc81610b10565b9250604085013567ffffffffffffffff8111156106e7578283fd5b6106f3878288016104ea565b949793965093946060013593505050565b60008060008060006080868803121561071b578081fd5b85359450602086013561072d81610b10565b9350604086013567ffffffffffffffff811115610748578182fd5b610754888289016104a3565b96999598509660600135949350505050565b600080600080608085870312156106ba578384fd5b60008060008060608587031215610790578384fd5b84359350602085013567ffffffffffffffff8111156107ad578384fd5b6107b9878288016104a3565b9598909750949560400135949350505050565b600081518084526107e4816020860160208601610a8a565b601f01601f19169290920160200192915050565b6000825161080a818460208701610a8a565b9190910192915050565b60008351610826818460208801610a8a565b83519083019061083a818360208801610a8a565b01949350505050565b60008251610855818460208701610a8a565b6e2737a2b93937b929b2b632b1ba37b960891b920191825250600f01919050565b60008251610888818460208701610a8a565b73556e657870656374656452657475726e6461746160601b920191825250601401919050565b6000602082526103f560208301846107cc565b60208082526014908201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604082015260600190565b60208082526014908201527364732d6d6174682d6164642d6f766572666c6f7760601b604082015260600190565b6020808252602f908201527f464d616b65725661756c74556e736166654f534d2e5f69735661756c74556e7360408201526e18599953d4d34e88085a185cd39e1d608a1b606082015260800190565b90815260200190565b8581526001600160a01b038516602082015260806040820181905281018390526000838560a08401378060a0858401015260a0601f19601f86011683010190508260608301529695505050505050565b60405181810167ffffffffffffffff811182821017156109e7576109e7610afa565b604052919050565b600067ffffffffffffffff821115610a0957610a09610afa565b50601f01601f191660200190565b60008085851115610a26578182fd5b83861115610a32578182fd5b5050820193919092039150565b60008219821115610a5257610a52610ace565b500190565b600082610a6657610a66610ae4565b500490565b6000816000190483118215151615610a8557610a85610ace565b500290565b60005b83811015610aa5578181015183820152602001610a8d565b83811115610ab4576000848401525b50505050565b600082610ac957610ac9610ae4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b2557600080fd5b5056fe464d616b65725661756c74556e736166654f534d2e5f69735661756c74556e736166654f534d3a6f7261636c653aa2646970667358221220cba62336fec4d3665588b58a23939e255ee2690bc2b420c10464ff153df645a664736f6c63430008000033",
  "devdoc": {
    "author": "Gelato Team",
    "kind": "dev",
    "methods": {
      "getConditionData(uint256,address,bytes,uint256)": {
        "details": "Use the return for your Task's Condition.data field off-chain.",
        "returns": {
          "_0": "The encoded payload for your Task's Condition.data field."
        }
      },
      "isVaultUnsafeOSM(uint256,address,bytes,uint256)": {
        "details": "The price oracle must return (bytes32, bool).",
        "params": {
          "_minColRatio": "The minimum collateral ratio measured in the price of the collateral as specified by the _priceOracle.",
          "_oraclePayload": "The data for making the staticcall to the oracle's read  method e.g. the selector for MakerOracle's read fn.",
          "_priceOracle": "The price oracle contract to supply the collateral price  e.g. Maker's ETH/USD oracle for ETH collateral pricing.",
          "_vaultID": "The id of the Maker vault"
        },
        "returns": {
          "_0": "OK if the Maker Vault is unsafe, otherwise some error message."
        }
      },
      "ok(uint256,bytes,uint256)": {
        "details": "A standard interface for GelatoCore to read Conditions",
        "params": {
          "_conditionData": "The data you get from `getConditionData()`"
        },
        "returns": {
          "_0": "OK if the Condition is there, else some error message."
        }
      }
    },
    "title": "ConditionMakerVaultUnsafe",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getConditionData(uint256,address,bytes,uint256)": {
        "notice": "Convenience function for off-chain _conditionData encoding"
      },
      "isVaultUnsafeOSM(uint256,address,bytes,uint256)": {
        "notice": "Specific implementation of this Condition's ok function"
      },
      "ok(uint256,bytes,uint256)": {
        "notice": "Standard GelatoCore system function"
      }
    },
    "notice": "Condition tracking Maker vault collateralization safety requirements.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
