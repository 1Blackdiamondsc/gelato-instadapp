{
  "address": "0x87CE3693b36faf546829eb329fB0e5A1f76cEC43",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dsa",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromVaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_destVaultId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_destColType",
          "type": "string"
        }
      ],
      "name": "getConditionData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dsa",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromVaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_destVaultId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_destColType",
          "type": "string"
        }
      ],
      "name": "isDebtAmtDust",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_conditionData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ok",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf8a269b836c3e50889bf152b2767276aa804c1b60ab75d060d4c0281e44076d9",
  "receipt": {
    "to": null,
    "from": "0xF953c3d475dc0a9877329F71e2CE3d2519a519A2",
    "contractAddress": "0x87CE3693b36faf546829eb329fB0e5A1f76cEC43",
    "transactionIndex": 94,
    "gasUsed": "1556962",
    "logsBloom": "0x
    "blockHash": "0xa790778a38ddb8bbe7a6c7e33f6b583ea96813853802581f589389f7e7efd046",
    "transactionHash": "0xf8a269b836c3e50889bf152b2767276aa804c1b60ab75d060d4c0281e44076d9",
    "logs": [],
    "blockNumber": 11725403,
    "cumulativeGasUsed": "10756687",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9e1e417ad5e60d445fed51b4e54a4fd7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dsa\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_destVaultId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_destColType\",\"type\":\"string\"}],\"name\":\"getConditionData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dsa\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_destVaultId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_destColType\",\"type\":\"string\"}],\"name\":\"isDebtAmtDust\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_conditionData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ok\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/gelato/conditions/maker/ConditionDebtAmtIsDust.sol\":\"ConditionDebtAmtIsDust\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/core/contracts/gelato_conditions/GelatoConditionsStandard.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\n\\nimport \\\"./IGelatoCondition.sol\\\";\\n\\nabstract contract GelatoConditionsStandard is IGelatoCondition {\\n    string internal constant OK = \\\"OK\\\";\\n}\\n\",\"keccak256\":\"0xa3d9ee5c4398914bbc0fe75fe54e57b73b8a4367caf9a40d9e5fd1ba9d4adb89\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_conditions/IGelatoCondition.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n\\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\\n    /// @dev Be careful only to encode a Task's condition.data as is and not with the\\n    ///  \\\"ok\\\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\\n    ///  source of Task identification.\\n    /// @param _conditionData This is the Condition.data field developers must encode their\\n    ///  Condition's specific parameters in.\\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\\n    function ok(uint256 _taskReceiptId, bytes calldata _conditionData, uint256 _cycleId)\\n        external\\n        view\\n        returns(string memory);\\n}\",\"keccak256\":\"0xd07607af93227ec5f8c2f5401289937b98c298f0d2398c1ba7410f82a6253964\",\"license\":\"UNLICENSED\"},\"contracts/constants/CInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// InstaDapp\\naddress constant INSTA_MEMORY = 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F;\\n\\n// Connectors\\naddress constant CONNECT_MAKER = 0xac02030d8a8F49eD04b2f52C394D3F901A10F8A9;\\naddress constant CONNECT_COMPOUND = 0x15FdD1e902cAC70786fe7D31013B1a806764B5a2;\\naddress constant INSTA_POOL_V2 = 0xeB4bf86589f808f90EEC8e964dBF16Bd4D284905;\\naddress constant CONNECT_AAVE_V2 = 0xBF6E4331ffd02F7043e62788FD272aeFc712f5ee;\\naddress constant CONNECT_DYDX = 0x6AF6C791c869DfA65f8A2fa042fA47D1535Bef25;\\naddress constant CONNECT_BASIC = 0xe5398f279175962E56fE4c5E0b62dc7208EF36c6;\\naddress constant CONNECT_FEE = 0xB99152F8073033B318C1Bfbfaaa582029e982CE9;\\n\\n// Insta Pool\\naddress constant INSTA_POOL_RESOLVER = 0xa004a5afBa04b74037E9E52bA1f7eb02b5E61509;\\nuint256 constant ROUTE_1_TOLERANCE = 1005e15;\\n\\n// Insta Mapping\\naddress constant INSTA_MAPPING = 0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88;\\n\\naddress constant INSTA_MAKER_RESOLVER = 0x0A7008B38E7015F8C36A49eEbc32513ECA8801E5;\\n\",\"keccak256\":\"0x0a6f769e4d928a6286024c823696c481fbeb75c85bd8648b450a18ff3fc0451d\",\"license\":\"UNLICENSED\"},\"contracts/constants/CMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\naddress constant MCD_MANAGER = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\\naddress constant JUG = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\\n\",\"keccak256\":\"0xba2dab3a9cd1c7edd900705917de16d2c9c85edc35c03a2e3535570814ecb067\",\"license\":\"UNLICENSED\"},\"contracts/contracts/gelato/conditions/maker/ConditionDebtAmtIsDust.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    GelatoConditionsStandard\\n} from \\\"@gelatonetwork/core/contracts/gelato_conditions/GelatoConditionsStandard.sol\\\";\\nimport {GelatoBytes} from \\\"../../../../lib/GelatoBytes.sol\\\";\\nimport {\\n    _isDebtAmtDust\\n} from \\\"../../../../functions/gelato/conditions/maker/FIsDebtAmtDust.sol\\\";\\nimport {\\n    _getMakerVaultDebt,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\ncontract ConditionDebtAmtIsDust is GelatoConditionsStandard {\\n    using GelatoBytes for bytes;\\n\\n    function getConditionData(\\n        address _dsa,\\n        uint256 _fromVaultId,\\n        uint256 _destVaultId,\\n        string calldata _destColType\\n    ) public pure virtual returns (bytes memory) {\\n        return\\n            abi.encodeWithSelector(\\n                this.isDebtAmtDust.selector,\\n                _dsa,\\n                _fromVaultId,\\n                _destVaultId,\\n                _destColType\\n            );\\n    }\\n\\n    function ok(\\n        uint256,\\n        bytes calldata _conditionData,\\n        uint256\\n    ) public view virtual override returns (string memory) {\\n        (\\n            address _dsa,\\n            uint256 _fromVaultId,\\n            uint256 _destVaultId,\\n            string memory _destColType\\n        ) = abi.decode(_conditionData[4:], (address, uint256, uint256, string));\\n\\n        return isDebtAmtDust(_dsa, _fromVaultId, _destVaultId, _destColType);\\n    }\\n\\n    function isDebtAmtDust(\\n        address _dsa,\\n        uint256 _fromVaultId,\\n        uint256 _destVaultId,\\n        string memory _destColType\\n    ) public view returns (string memory) {\\n        return\\n            _isDebtAmtDust(\\n                _dsa,\\n                _destVaultId,\\n                _destColType,\\n                _getMakerVaultDebt(_fromVaultId)\\n            )\\n                ? \\\"DebtAmtIsDust\\\"\\n                : OK;\\n    }\\n}\\n\",\"keccak256\":\"0x6182a7768d6977e1b63e2bd8c1da7d3e7066a5f06af9a055899ace2d9b873ae7\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {MCD_MANAGER} from \\\"../../constants/CMaker.sol\\\";\\nimport {INSTA_MAPPING} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {\\n    ITokenJoinInterface\\n} from \\\"../../interfaces/dapps/Maker/ITokenJoinInterface.sol\\\";\\nimport {IMcdManager} from \\\"../../interfaces/dapps/Maker/IMcdManager.sol\\\";\\nimport {InstaMapping} from \\\"../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {IVat} from \\\"../../interfaces/dapps/Maker/IVat.sol\\\";\\nimport {RAY, add, sub, mul} from \\\"../../vendor/DSMath.sol\\\";\\nimport {_stringToBytes32, _convertTo18} from \\\"../../vendor/Convert.sol\\\";\\n\\nfunction _getMakerVaultDebt(uint256 _vaultId) view returns (uint256 wad) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, , , ) = vat.ilks(ilk);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n    uint256 dai = vat.dai(urn);\\n\\n    uint256 rad = sub(mul(art, rate), dai);\\n    wad = rad / RAY;\\n\\n    wad = mul(wad, RAY) < rad ? wad + 1 : wad;\\n}\\n\\nfunction _getMakerRawVaultDebt(uint256 _vaultId) view returns (uint256 tab) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, , , ) = vat.ilks(ilk);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n\\n    uint256 rad = mul(art, rate);\\n\\n    tab = rad / RAY;\\n    tab = mul(tab, RAY) < rad ? tab + 1 : tab;\\n}\\n\\nfunction _getMakerVaultCollateralBalance(uint256 _vaultId)\\n    view\\n    returns (uint256)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    IVat vat = IVat(manager.vat());\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    (uint256 ink, ) = vat.urns(ilk, urn);\\n\\n    return ink;\\n}\\n\\nfunction _vaultWillBeSafe(\\n    uint256 _vaultId,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    require(_vaultId != 0, \\\"_vaultWillBeSafe: invalid vault id.\\\");\\n\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n\\n    ITokenJoinInterface tokenJoinContract =\\n        ITokenJoinInterface(InstaMapping(INSTA_MAPPING).gemJoinMapping(ilk));\\n\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, uint256 spot, , ) = vat.ilks(ilk);\\n    (uint256 ink, uint256 art) = vat.urns(ilk, urn);\\n    uint256 dai = vat.dai(urn);\\n\\n    uint256 dink = _convertTo18(tokenJoinContract.dec(), _colAmt);\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n\\n    ink = add(ink, dink);\\n    art = add(art, dart);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab <= mul(ink, spot);\\n}\\n\\nfunction _newVaultWillBeSafe(\\n    string memory _colType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (, uint256 rate, uint256 spot, , ) = vat.ilks(ilk);\\n\\n    ITokenJoinInterface tokenJoinContract =\\n        ITokenJoinInterface(InstaMapping(INSTA_MAPPING).gemJoinMapping(ilk));\\n\\n    uint256 ink = _convertTo18(tokenJoinContract.dec(), _colAmt);\\n    uint256 art = _getDebtAmt(_daiDebtAmt, 0, rate);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab <= mul(ink, spot);\\n}\\n\\nfunction _debtCeilingIsReachedNewVault(\\n    string memory _colType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (uint256 Art, uint256 rate, , uint256 line, ) = vat.ilks(ilk);\\n    uint256 Line = vat.Line();\\n    uint256 debt = vat.debt();\\n\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, 0, rate);\\n    uint256 dtab = mul(rate, dart);\\n\\n    debt = add(debt, dtab);\\n    Art = add(Art, dart);\\n\\n    return mul(Art, rate) > line || debt > Line;\\n}\\n\\nfunction _debtCeilingIsReached(uint256 _vaultId, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n\\n    (uint256 Art, uint256 rate, , uint256 line, ) = vat.ilks(ilk);\\n    uint256 dai = vat.dai(urn);\\n    uint256 Line = vat.Line();\\n    uint256 debt = vat.debt();\\n\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n    uint256 dtab = mul(rate, dart);\\n\\n    debt = add(debt, dtab);\\n    Art = add(Art, dart);\\n\\n    return mul(Art, rate) > line || debt > Line;\\n}\\n\\nfunction _debtIsDustNewVault(string memory _colType, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (, uint256 rate, , , uint256 dust) = vat.ilks(ilk);\\n    uint256 art = _getDebtAmt(_daiDebtAmt, 0, rate);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab < dust;\\n}\\n\\nfunction _debtIsDust(uint256 _vaultId, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n    (, uint256 rate, , , uint256 dust) = vat.ilks(ilk);\\n\\n    uint256 dai = vat.dai(urn);\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n    art = add(art, dart);\\n    uint256 tab = mul(rate, art);\\n\\n    return tab < dust;\\n}\\n\\nfunction _getVaultData(IMcdManager _manager, uint256 _vault)\\n    view\\n    returns (bytes32 ilk, address urn)\\n{\\n    ilk = _manager.ilks(_vault);\\n    urn = _manager.urns(_vault);\\n}\\n\\nfunction _getDebtAmt(\\n    uint256 _amt,\\n    uint256 _dai,\\n    uint256 _rate\\n) pure returns (uint256 dart) {\\n    dart = sub(mul(_amt, RAY), _dai) / _rate;\\n    dart = mul(dart, _rate) < mul(_amt, RAY) ? dart + 1 : dart;\\n}\\n\\nfunction _isVaultOwner(uint256 _vaultId, address _owner) view returns (bool) {\\n    if (_vaultId == 0) return false;\\n\\n    try IMcdManager(MCD_MANAGER).owns(_vaultId) returns (address owner) {\\n        return _owner == owner;\\n    } catch Error(string memory error) {\\n        revert(string(abi.encodePacked(\\\"FMaker._isVaultOwner:\\\", error)));\\n    } catch {\\n        revert(\\\"FMaker._isVaultOwner:undefined\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9a36cfb605947e1c73e96b95be4e34d2c913f23386d86be1923b34f3511a772a\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FIsDebtAmtDust.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _debtIsDustNewVault,\\n    _debtIsDust,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isDebtAmtDust(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return _isDebtAmtDustExplicit(_destVaultId, _destColType, _daiDebtAmt);\\n}\\n\\nfunction _isDebtAmtDustExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _debtIsDustNewVault(_destColType, _daiDebtAmt)\\n            : _debtIsDust(_destVaultId, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x3fe2e42cc5cf8221731e7f4dd926e973024eb3efab57b4c4568e45ce70765a20\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/IInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n/// @notice Interface InstaDapp Index\\ninterface IndexInterface {\\n    function connectors(uint256 version) external view returns (address);\\n\\n    function list() external view returns (address);\\n}\\n\\n/// @notice Interface InstaDapp List\\ninterface ListInterface {\\n    function accountID(address _account) external view returns (uint64);\\n}\\n\\n/// @notice Interface InstaDapp InstaMemory\\ninterface MemoryInterface {\\n    function setUint(uint256 _id, uint256 _val) external;\\n\\n    function getUint(uint256 _id) external returns (uint256);\\n}\\n\\n/// @notice Interface InstaDapp Defi Smart Account wallet\\ninterface AccountInterface {\\n    function cast(\\n        address[] calldata _targets,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external payable returns (bytes32[] memory responses);\\n\\n    function version() external view returns (uint256);\\n\\n    function isAuth(address user) external view returns (bool);\\n\\n    function shield() external view returns (bool);\\n}\\n\\ninterface ConnectorInterface {\\n    function connectorID() external view returns (uint256 _type, uint256 _id);\\n\\n    function name() external view returns (string memory);\\n}\\n\\ninterface InstaMapping {\\n    function gemJoinMapping(bytes32) external view returns (address);\\n\\n    function cTokenMapping(address) external view returns (address);\\n}\\n\",\"keccak256\":\"0xe0675f18c98f99ac30d284feec4a1de5feb5f85c8d16c1a9e5cddd739dfb34c7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/IMcdManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IMcdManager {\\n    function ilks(uint256) external view returns (bytes32);\\n\\n    function urns(uint256) external view returns (address);\\n\\n    function vat() external view returns (address);\\n\\n    function owns(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x600c309dbdb47e7fb5b5b135e174c5af0fd80a583cc92e9db15868626ea13944\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/ITokenJoinInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ITokenJoinInterface {\\n    function dec() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a73dd7b495b10a6405595d2a72749940cbe62610ea1b4d7ec02f815bf4ed4d6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/IVat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IVat {\\n    function ilks(bytes32)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function dai(address) external view returns (uint256);\\n\\n    function urns(bytes32, address) external view returns (uint256, uint256);\\n\\n    function debt() external view returns (uint256);\\n\\n    // solhint-disable-next-line\\n    function Line() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x562456d1f66878e0dacc113383383c2eb3d4edcb76c9e0ecc04251895f5a453d\",\"license\":\"UNLICENSED\"},\"contracts/lib/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2456950f3849af7457015c291b9a45271ca3497d1c870361878d0f35de41080\",\"license\":\"UNLICENSED\"},\"contracts/vendor/Convert.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {mul as _mul} from \\\"./DSMath.sol\\\";\\n\\nfunction _stringToBytes32(string memory str) pure returns (bytes32 result) {\\n    require(bytes(str).length != 0, \\\"string-empty\\\");\\n    assembly {\\n        result := mload(add(str, 32))\\n    }\\n}\\n\\nfunction _convertTo18(uint256 _dec, uint256 _amt) pure returns (uint256 amt) {\\n    amt = _mul(_amt, 10**(18 - _dec));\\n}\\n\",\"keccak256\":\"0xba31db6ad3b69599bc5a6d8dc27f39fa6795f671af2f69fcd747983c01b799ce\",\"license\":\"UNLICENSED\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: AGPL-3.0-or-later\\\"\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.0;\\n\\nfunction add(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n}\\n\\nfunction sub(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n}\\n\\nfunction mul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n}\\n\\nfunction min(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction max(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nfunction imin(int256 x, int256 y) pure returns (int256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction imax(int256 x, int256 y) pure returns (int256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nuint256 constant WAD = 10**18;\\nuint256 constant RAY = 10**27;\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), WAD / 2) / WAD;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction rmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), RAY / 2) / RAY;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, WAD), y / 2) / y;\\n}\\n\\n//rounds to zero if x*y < RAY / 2\\nfunction rdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, RAY), y / 2) / y;\\n}\\n\\n// This famous algorithm is called \\\"exponentiation by squaring\\\"\\n// and calculates x^n with x as fixed-point and n as regular unsigned.\\n//\\n// It's O(log n), instead of O(n) for naive repeated multiplication.\\n//\\n// These facts are why it works:\\n//\\n//  If n is even, then x^n = (x^2)^(n/2).\\n//  If n is odd,  then x^n = x * x^(n-1),\\n//   and applying the equation for even x gives\\n//    x^n = x * (x^2)^((n-1) / 2).\\n//\\n//  Also, EVM division is flooring and\\n//    floor[(n-1) / 2] = floor[n / 2].\\n//\\nfunction rpow(uint256 x, uint256 n) pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n        x = rmul(x, x);\\n\\n        if (n % 2 != 0) {\\n            z = rmul(z, x);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d7cc87f9c74e3c8d9cfe196e0bdd657f2c4c0fbb588db8cb941066e859ed60a\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611b4c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806361d10bf014610046578063a7ca8a1714610076578063a99891c5146100a6575b600080fd5b610060600480360381019061005b919061101c565b6100d6565b60405161006d91906115d4565b60405180910390f35b610090600480360381019061008b919061109c565b610161565b60405161009d91906115f6565b60405180910390f35b6100c060048036038101906100bb9190611169565b6101f7565b6040516100cd91906115f6565b60405180910390f35b606063a7ca8a1760e01b86868686866040516024016100f9959493929190611542565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905095945050505050565b606061017785848461017288610241565b61050b565b6101b6576040518060400160405280600281526020017f4f4b0000000000000000000000000000000000000000000000000000000000008152506101ed565b6040518060400160405280600d81526020017f44656274416d74497344757374000000000000000000000000000000000000008152505b9050949350505050565b60606000806000808787600490809261021293929190611777565b81019061021f9190610fa1565b935093509350935061023384848484610161565b945050505050949350505050565b600080735ef30b9986345249bc32d8928b7ee64de9435e399050600080610268838661053b565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156102b457600080fd5b505afa1580156102c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ec9190610f78565b905060008173ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b81526004016103299190611590565b60a06040518083038186803b15801561034157600080fd5b505afa158015610355573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103799190611211565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff16632424be5c86866040518363ffffffff1660e01b81526004016103bc9291906115ab565b604080518083038186803b1580156103d357600080fd5b505afa1580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b91906111d5565b91505060008373ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b81526004016104499190611527565b60206040518083038186803b15801561046157600080fd5b505afa158015610475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104999190611140565b905060006104b06104aa848661065b565b836106c8565b90506b033b2e3c9fd0803ce8000000816104ca9190611800565b9850806104e38a6b033b2e3c9fd0803ce800000061065b565b106104ee57886104fc565b6001896104fb91906117aa565b5b98505050505050505050919050565b60006105178486610721565b610522576000610524565b835b93506105318484846108b1565b9050949350505050565b6000808373ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd846040518263ffffffff1660e01b815260040161057791906116b8565b60206040518083038186803b15801561058f57600080fd5b505afa1580156105a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c79190611117565b91508373ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b815260040161060291906116b8565b60206040518083038186803b15801561061a57600080fd5b505afa15801561062e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106529190610f78565b90509250929050565b6000808214806106835750828283856106749190611831565b9250826106819190611800565b145b6106c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b990611638565b60405180910390fd5b92915050565b60008282846106d7919061188b565b915081111561071b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071290611618565b60405180910390fd5b92915050565b60008083141561073457600090506108ab565b735ef30b9986345249bc32d8928b7ee64de9435e3973ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b815260040161078191906116b8565b60206040518083038186803b15801561079957600080fd5b505afa9250505080156107ca57506040513d601f19601f820116820180604052508101906107c79190610f78565b60015b610878576107d6611a04565b806107e1575061083d565b806040516020016107f29190611505565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083491906115f6565b60405180910390fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086f90611678565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16149150505b92915050565b60008084146108c9576108c484836108dd565b6108d4565b6108d38383610b77565b5b90509392505050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561093f57600080fd5b505afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109779190610f78565b9050600080610986848861053b565b9150915060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c84846040518363ffffffff1660e01b81526004016109c79291906115ab565b604080518083038186803b1580156109de57600080fd5b505afa1580156109f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1691906111d5565b9150506000808573ffffffffffffffffffffffffffffffffffffffff1663d9638d36866040518263ffffffff1660e01b8152600401610a559190611590565b60a06040518083038186803b158015610a6d57600080fd5b505afa158015610a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa59190611211565b9450505092505060008673ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b8152600401610ae79190611527565b60206040518083038186803b158015610aff57600080fd5b505afa158015610b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b379190611140565b90506000610b468b8386610ce3565b9050610b528582610d53565b94506000610b60858761065b565b90508381109a505050505050505050505092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015610bd957600080fd5b505afa158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c119190610f78565b90506000610c1e86610dac565b90506000808373ffffffffffffffffffffffffffffffffffffffff1663d9638d36846040518263ffffffff1660e01b8152600401610c5c9190611590565b60a06040518083038186803b158015610c7457600080fd5b505afa158015610c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cac9190611211565b945050509250506000610cc188600085610ce3565b90506000610ccf848361065b565b905082811097505050505050505092915050565b600081610d05610cff866b033b2e3c9fd0803ce800000061065b565b856106c8565b610d0f9190611800565b9050610d27846b033b2e3c9fd0803ce800000061065b565b610d31828461065b565b10610d3c5780610d4a565b600181610d4991906117aa565b5b90509392505050565b6000828284610d6291906117aa565b9150811015610da6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9d90611658565b60405180910390fd5b92915050565b60008082511415610df2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de990611698565b60405180910390fd5b60208201519050919050565b6000610e11610e0c84611704565b6116d3565b905082815260208101848484011115610e2957600080fd5b610e34848285611917565b509392505050565b600081359050610e4b81611aba565b92915050565b600081519050610e6081611aba565b92915050565b600081359050610e7581611ad1565b92915050565b600081519050610e8a81611ae8565b92915050565b60008083601f840112610ea257600080fd5b8235905067ffffffffffffffff811115610ebb57600080fd5b602083019150836001820283011115610ed357600080fd5b9250929050565b60008083601f840112610eec57600080fd5b8235905067ffffffffffffffff811115610f0557600080fd5b602083019150836001820283011115610f1d57600080fd5b9250929050565b600082601f830112610f3557600080fd5b8135610f45848260208601610dfe565b91505092915050565b600081359050610f5d81611aff565b92915050565b600081519050610f7281611aff565b92915050565b600060208284031215610f8a57600080fd5b6000610f9884828501610e51565b91505092915050565b60008060008060808587031215610fb757600080fd5b6000610fc587828801610e66565b9450506020610fd687828801610f4e565b9350506040610fe787828801610f4e565b925050606085013567ffffffffffffffff81111561100457600080fd5b61101087828801610f24565b91505092959194509250565b60008060008060006080868803121561103457600080fd5b600061104288828901610e3c565b955050602061105388828901610f4e565b945050604061106488828901610f4e565b935050606086013567ffffffffffffffff81111561108157600080fd5b61108d88828901610eda565b92509250509295509295909350565b600080600080608085870312156110b257600080fd5b60006110c087828801610e3c565b94505060206110d187828801610f4e565b93505060406110e287828801610f4e565b925050606085013567ffffffffffffffff8111156110ff57600080fd5b61110b87828801610f24565b91505092959194509250565b60006020828403121561112957600080fd5b600061113784828501610e7b565b91505092915050565b60006020828403121561115257600080fd5b600061116084828501610f63565b91505092915050565b6000806000806060858703121561117f57600080fd5b600061118d87828801610f4e565b945050602085013567ffffffffffffffff8111156111aa57600080fd5b6111b687828801610e90565b935093505060406111c987828801610f4e565b91505092959194509250565b600080604083850312156111e857600080fd5b60006111f685828601610f63565b925050602061120785828601610f63565b9150509250929050565b600080600080600060a0868803121561122957600080fd5b600061123788828901610f63565b955050602061124888828901610f63565b945050604061125988828901610f63565b935050606061126a88828901610f63565b925050608061127b88828901610f63565b9150509295509295909350565b611291816118bf565b82525050565b6112a0816118e3565b82525050565b60006112b182611734565b6112bb818561174a565b93506112cb818560208601611926565b6112d4816119e6565b840191505092915050565b60006112eb838561175b565b93506112f8838584611917565b611301836119e6565b840190509392505050565b60006113178261173f565b611321818561175b565b9350611331818560208601611926565b61133a816119e6565b840191505092915050565b60006113508261173f565b61135a818561176c565b935061136a818560208601611926565b80840191505092915050565b600061138360158361175b565b91507f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006000830152602082019050919050565b60006113c360148361175b565b91507f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006000830152602082019050919050565b600061140360148361175b565b91507f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006000830152602082019050919050565b600061144360158361176c565b91507f464d616b65722e5f69735661756c744f776e65723a00000000000000000000006000830152601582019050919050565b6000611483601e8361175b565b91507f464d616b65722e5f69735661756c744f776e65723a756e646566696e656400006000830152602082019050919050565b60006114c3600c8361175b565b91507f737472696e672d656d70747900000000000000000000000000000000000000006000830152602082019050919050565b6114ff8161190d565b82525050565b600061151082611436565b915061151c8284611345565b915081905092915050565b600060208201905061153c6000830184611288565b92915050565b60006080820190506115576000830188611288565b61156460208301876114f6565b61157160408301866114f6565b81810360608301526115848184866112df565b90509695505050505050565b60006020820190506115a56000830184611297565b92915050565b60006040820190506115c06000830185611297565b6115cd6020830184611288565b9392505050565b600060208201905081810360008301526115ee81846112a6565b905092915050565b60006020820190508181036000830152611610818461130c565b905092915050565b6000602082019050818103600083015261163181611376565b9050919050565b60006020820190508181036000830152611651816113b6565b9050919050565b60006020820190508181036000830152611671816113f6565b9050919050565b6000602082019050818103600083015261169181611476565b9050919050565b600060208201905081810360008301526116b1816114b6565b9050919050565b60006020820190506116cd60008301846114f6565b92915050565b6000604051905081810181811067ffffffffffffffff821117156116fa576116f96119b7565b5b8060405250919050565b600067ffffffffffffffff82111561171f5761171e6119b7565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000808585111561178757600080fd5b8386111561179457600080fd5b6001850283019150848603905094509492505050565b60006117b58261190d565b91506117c08361190d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156117f5576117f4611959565b5b828201905092915050565b600061180b8261190d565b91506118168361190d565b92508261182657611825611988565b5b828204905092915050565b600061183c8261190d565b91506118478361190d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156118805761187f611959565b5b828202905092915050565b60006118968261190d565b91506118a18361190d565b9250828210156118b4576118b3611959565b5b828203905092915050565b60006118ca826118ed565b9050919050565b60006118dc826118ed565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611944578082015181840152602081019050611929565b83811115611953576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d1015611a1457611ab7565b60046000803e611a256000516119f7565b6308c379a08114611a365750611ab7565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715611a6257505050611ab7565b808201805167ffffffffffffffff811115611a81575050505050611ab7565b8060208301013d8501811115611a9c57505050505050611ab7565b611aa5826119e6565b60208401016040528296505050505050505b90565b611ac3816118bf565b8114611ace57600080fd5b50565b611ada816118d1565b8114611ae557600080fd5b50565b611af1816118e3565b8114611afc57600080fd5b50565b611b088161190d565b8114611b1357600080fd5b5056fea2646970667358221220b317a7078300a9b7374f3935dfbd39658a2d0708a167a896bfc15c453ff7431d64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806361d10bf014610046578063a7ca8a1714610076578063a99891c5146100a6575b600080fd5b610060600480360381019061005b919061101c565b6100d6565b60405161006d91906115d4565b60405180910390f35b610090600480360381019061008b919061109c565b610161565b60405161009d91906115f6565b60405180910390f35b6100c060048036038101906100bb9190611169565b6101f7565b6040516100cd91906115f6565b60405180910390f35b606063a7ca8a1760e01b86868686866040516024016100f9959493929190611542565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905095945050505050565b606061017785848461017288610241565b61050b565b6101b6576040518060400160405280600281526020017f4f4b0000000000000000000000000000000000000000000000000000000000008152506101ed565b6040518060400160405280600d81526020017f44656274416d74497344757374000000000000000000000000000000000000008152505b9050949350505050565b60606000806000808787600490809261021293929190611777565b81019061021f9190610fa1565b935093509350935061023384848484610161565b945050505050949350505050565b600080735ef30b9986345249bc32d8928b7ee64de9435e399050600080610268838661053b565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156102b457600080fd5b505afa1580156102c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ec9190610f78565b905060008173ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b81526004016103299190611590565b60a06040518083038186803b15801561034157600080fd5b505afa158015610355573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103799190611211565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff16632424be5c86866040518363ffffffff1660e01b81526004016103bc9291906115ab565b604080518083038186803b1580156103d357600080fd5b505afa1580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b91906111d5565b91505060008373ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b81526004016104499190611527565b60206040518083038186803b15801561046157600080fd5b505afa158015610475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104999190611140565b905060006104b06104aa848661065b565b836106c8565b90506b033b2e3c9fd0803ce8000000816104ca9190611800565b9850806104e38a6b033b2e3c9fd0803ce800000061065b565b106104ee57886104fc565b6001896104fb91906117aa565b5b98505050505050505050919050565b60006105178486610721565b610522576000610524565b835b93506105318484846108b1565b9050949350505050565b6000808373ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd846040518263ffffffff1660e01b815260040161057791906116b8565b60206040518083038186803b15801561058f57600080fd5b505afa1580156105a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c79190611117565b91508373ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b815260040161060291906116b8565b60206040518083038186803b15801561061a57600080fd5b505afa15801561062e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106529190610f78565b90509250929050565b6000808214806106835750828283856106749190611831565b9250826106819190611800565b145b6106c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b990611638565b60405180910390fd5b92915050565b60008282846106d7919061188b565b915081111561071b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071290611618565b60405180910390fd5b92915050565b60008083141561073457600090506108ab565b735ef30b9986345249bc32d8928b7ee64de9435e3973ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b815260040161078191906116b8565b60206040518083038186803b15801561079957600080fd5b505afa9250505080156107ca57506040513d601f19601f820116820180604052508101906107c79190610f78565b60015b610878576107d6611a04565b806107e1575061083d565b806040516020016107f29190611505565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083491906115f6565b60405180910390fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086f90611678565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16149150505b92915050565b60008084146108c9576108c484836108dd565b6108d4565b6108d38383610b77565b5b90509392505050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561093f57600080fd5b505afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109779190610f78565b9050600080610986848861053b565b9150915060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c84846040518363ffffffff1660e01b81526004016109c79291906115ab565b604080518083038186803b1580156109de57600080fd5b505afa1580156109f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1691906111d5565b9150506000808573ffffffffffffffffffffffffffffffffffffffff1663d9638d36866040518263ffffffff1660e01b8152600401610a559190611590565b60a06040518083038186803b158015610a6d57600080fd5b505afa158015610a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa59190611211565b9450505092505060008673ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b8152600401610ae79190611527565b60206040518083038186803b158015610aff57600080fd5b505afa158015610b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b379190611140565b90506000610b468b8386610ce3565b9050610b528582610d53565b94506000610b60858761065b565b90508381109a505050505050505050505092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015610bd957600080fd5b505afa158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c119190610f78565b90506000610c1e86610dac565b90506000808373ffffffffffffffffffffffffffffffffffffffff1663d9638d36846040518263ffffffff1660e01b8152600401610c5c9190611590565b60a06040518083038186803b158015610c7457600080fd5b505afa158015610c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cac9190611211565b945050509250506000610cc188600085610ce3565b90506000610ccf848361065b565b905082811097505050505050505092915050565b600081610d05610cff866b033b2e3c9fd0803ce800000061065b565b856106c8565b610d0f9190611800565b9050610d27846b033b2e3c9fd0803ce800000061065b565b610d31828461065b565b10610d3c5780610d4a565b600181610d4991906117aa565b5b90509392505050565b6000828284610d6291906117aa565b9150811015610da6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9d90611658565b60405180910390fd5b92915050565b60008082511415610df2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de990611698565b60405180910390fd5b60208201519050919050565b6000610e11610e0c84611704565b6116d3565b905082815260208101848484011115610e2957600080fd5b610e34848285611917565b509392505050565b600081359050610e4b81611aba565b92915050565b600081519050610e6081611aba565b92915050565b600081359050610e7581611ad1565b92915050565b600081519050610e8a81611ae8565b92915050565b60008083601f840112610ea257600080fd5b8235905067ffffffffffffffff811115610ebb57600080fd5b602083019150836001820283011115610ed357600080fd5b9250929050565b60008083601f840112610eec57600080fd5b8235905067ffffffffffffffff811115610f0557600080fd5b602083019150836001820283011115610f1d57600080fd5b9250929050565b600082601f830112610f3557600080fd5b8135610f45848260208601610dfe565b91505092915050565b600081359050610f5d81611aff565b92915050565b600081519050610f7281611aff565b92915050565b600060208284031215610f8a57600080fd5b6000610f9884828501610e51565b91505092915050565b60008060008060808587031215610fb757600080fd5b6000610fc587828801610e66565b9450506020610fd687828801610f4e565b9350506040610fe787828801610f4e565b925050606085013567ffffffffffffffff81111561100457600080fd5b61101087828801610f24565b91505092959194509250565b60008060008060006080868803121561103457600080fd5b600061104288828901610e3c565b955050602061105388828901610f4e565b945050604061106488828901610f4e565b935050606086013567ffffffffffffffff81111561108157600080fd5b61108d88828901610eda565b92509250509295509295909350565b600080600080608085870312156110b257600080fd5b60006110c087828801610e3c565b94505060206110d187828801610f4e565b93505060406110e287828801610f4e565b925050606085013567ffffffffffffffff8111156110ff57600080fd5b61110b87828801610f24565b91505092959194509250565b60006020828403121561112957600080fd5b600061113784828501610e7b565b91505092915050565b60006020828403121561115257600080fd5b600061116084828501610f63565b91505092915050565b6000806000806060858703121561117f57600080fd5b600061118d87828801610f4e565b945050602085013567ffffffffffffffff8111156111aa57600080fd5b6111b687828801610e90565b935093505060406111c987828801610f4e565b91505092959194509250565b600080604083850312156111e857600080fd5b60006111f685828601610f63565b925050602061120785828601610f63565b9150509250929050565b600080600080600060a0868803121561122957600080fd5b600061123788828901610f63565b955050602061124888828901610f63565b945050604061125988828901610f63565b935050606061126a88828901610f63565b925050608061127b88828901610f63565b9150509295509295909350565b611291816118bf565b82525050565b6112a0816118e3565b82525050565b60006112b182611734565b6112bb818561174a565b93506112cb818560208601611926565b6112d4816119e6565b840191505092915050565b60006112eb838561175b565b93506112f8838584611917565b611301836119e6565b840190509392505050565b60006113178261173f565b611321818561175b565b9350611331818560208601611926565b61133a816119e6565b840191505092915050565b60006113508261173f565b61135a818561176c565b935061136a818560208601611926565b80840191505092915050565b600061138360158361175b565b91507f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006000830152602082019050919050565b60006113c360148361175b565b91507f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006000830152602082019050919050565b600061140360148361175b565b91507f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006000830152602082019050919050565b600061144360158361176c565b91507f464d616b65722e5f69735661756c744f776e65723a00000000000000000000006000830152601582019050919050565b6000611483601e8361175b565b91507f464d616b65722e5f69735661756c744f776e65723a756e646566696e656400006000830152602082019050919050565b60006114c3600c8361175b565b91507f737472696e672d656d70747900000000000000000000000000000000000000006000830152602082019050919050565b6114ff8161190d565b82525050565b600061151082611436565b915061151c8284611345565b915081905092915050565b600060208201905061153c6000830184611288565b92915050565b60006080820190506115576000830188611288565b61156460208301876114f6565b61157160408301866114f6565b81810360608301526115848184866112df565b90509695505050505050565b60006020820190506115a56000830184611297565b92915050565b60006040820190506115c06000830185611297565b6115cd6020830184611288565b9392505050565b600060208201905081810360008301526115ee81846112a6565b905092915050565b60006020820190508181036000830152611610818461130c565b905092915050565b6000602082019050818103600083015261163181611376565b9050919050565b60006020820190508181036000830152611651816113b6565b9050919050565b60006020820190508181036000830152611671816113f6565b9050919050565b6000602082019050818103600083015261169181611476565b9050919050565b600060208201905081810360008301526116b1816114b6565b9050919050565b60006020820190506116cd60008301846114f6565b92915050565b6000604051905081810181811067ffffffffffffffff821117156116fa576116f96119b7565b5b8060405250919050565b600067ffffffffffffffff82111561171f5761171e6119b7565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000808585111561178757600080fd5b8386111561179457600080fd5b6001850283019150848603905094509492505050565b60006117b58261190d565b91506117c08361190d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156117f5576117f4611959565b5b828201905092915050565b600061180b8261190d565b91506118168361190d565b92508261182657611825611988565b5b828204905092915050565b600061183c8261190d565b91506118478361190d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156118805761187f611959565b5b828202905092915050565b60006118968261190d565b91506118a18361190d565b9250828210156118b4576118b3611959565b5b828203905092915050565b60006118ca826118ed565b9050919050565b60006118dc826118ed565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611944578082015181840152602081019050611929565b83811115611953576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d1015611a1457611ab7565b60046000803e611a256000516119f7565b6308c379a08114611a365750611ab7565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715611a6257505050611ab7565b808201805167ffffffffffffffff811115611a81575050505050611ab7565b8060208301013d8501811115611a9c57505050505050611ab7565b611aa5826119e6565b60208401016040528296505050505050505b90565b611ac3816118bf565b8114611ace57600080fd5b50565b611ada816118d1565b8114611ae557600080fd5b50565b611af1816118e3565b8114611afc57600080fd5b50565b611b088161190d565b8114611b1357600080fd5b5056fea2646970667358221220b317a7078300a9b7374f3935dfbd39658a2d0708a167a896bfc15c453ff7431d64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
