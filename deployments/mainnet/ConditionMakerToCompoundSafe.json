{
  "address": "0x348C20c5EB6A40346356eadE0ddc0552d3c39Be1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_instaFeeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleAggregator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dsa",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromVaultId",
          "type": "uint256"
        }
      ],
      "name": "compoundPositionWillBeSafe",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dsa",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromVaultId",
          "type": "uint256"
        }
      ],
      "name": "getConditionData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instaFeeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_conditionData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ok",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4fa20c41ce3ac0fd739f056daa263d5110721911bbca1dc3b291ada9cf55ea92",
  "receipt": {
    "to": null,
    "from": "0xF953c3d475dc0a9877329F71e2CE3d2519a519A2",
    "contractAddress": "0x348C20c5EB6A40346356eadE0ddc0552d3c39Be1",
    "transactionIndex": 72,
    "gasUsed": "2179729",
    "logsBloom": "0x
    "blockHash": "0x17d6ac949c1e079d961a40ee489907e4bb38bdf810db30ac01fbcaac0ca17eff",
    "transactionHash": "0x4fa20c41ce3ac0fd739f056daa263d5110721911bbca1dc3b291ada9cf55ea92",
    "logs": [],
    "blockNumber": 11731048,
    "cumulativeGasUsed": "7700802",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0c159985E905ea1A3dA7305D70583Dd618862cf4",
    "0x64f31D46C52bBDe223D863B11dAb9327aB1414E9"
  ],
  "solcInputHash": "06ff1a108d21b21e4ca3839d365cb0b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_instaFeeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleAggregator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dsa\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromVaultId\",\"type\":\"uint256\"}],\"name\":\"compoundPositionWillBeSafe\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dsa\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromVaultId\",\"type\":\"uint256\"}],\"name\":\"getConditionData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_conditionData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ok\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/gelato/conditions/compound/ConditionMakerToCompoundSafe.sol\":\"ConditionMakerToCompoundSafe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/core/contracts/gelato_conditions/GelatoConditionsStandard.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\n\\nimport \\\"./IGelatoCondition.sol\\\";\\n\\nabstract contract GelatoConditionsStandard is IGelatoCondition {\\n    string internal constant OK = \\\"OK\\\";\\n}\\n\",\"keccak256\":\"0xa3d9ee5c4398914bbc0fe75fe54e57b73b8a4367caf9a40d9e5fd1ba9d4adb89\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_conditions/IGelatoCondition.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n\\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\\n    /// @dev Be careful only to encode a Task's condition.data as is and not with the\\n    ///  \\\"ok\\\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\\n    ///  source of Task identification.\\n    /// @param _conditionData This is the Condition.data field developers must encode their\\n    ///  Condition's specific parameters in.\\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\\n    function ok(uint256 _taskReceiptId, bytes calldata _conditionData, uint256 _cycleId)\\n        external\\n        view\\n        returns(string memory);\\n}\",\"keccak256\":\"0xd07607af93227ec5f8c2f5401289937b98c298f0d2398c1ba7410f82a6253964\",\"license\":\"UNLICENSED\"},\"contracts/constants/CAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// Aave Lending Pool Addresses Provider\\naddress constant LENDING_POOL_ADDRESSES_PROVIDER = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;\\naddress constant CHAINLINK_ETH_FEED = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\\naddress constant AAVE_PROTOCOL_DATA_PROVIDER = 0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d;\\n\",\"keccak256\":\"0x3e724d5ba5806a1feebd6ffed223db3b5e24abcb1c7e15aa4d74dd3752c20495\",\"license\":\"UNLICENSED\"},\"contracts/constants/CCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\naddress constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\\n\",\"keccak256\":\"0x7894ca47cf772ae6f312893382269e76775ea92787fba1eddd53e73a1104155e\",\"license\":\"UNLICENSED\"},\"contracts/constants/CDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nenum PROTOCOL {AAVE, MAKER, COMPOUND, NONE}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2519000), 3140500, 3971000, 4345000];\\n}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2028307), 2626711, 2944065, 3698800];\\n}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2358534), 2956937, 3381960, 4029400];\\n}\\n\\nuint256 constant FAST_TX_FEE = 30;\\nuint256 constant VAULT_CREATION_COST = 200000;\\nuint256 constant MAX_INSTA_FEE = 3e15;\\n\",\"keccak256\":\"0x5cb259ff9d661ebd3beb9d56e49ffb7dd5ff6a4c358c8acd913da52f5b99124b\",\"license\":\"UNLICENSED\"},\"contracts/constants/CGelato.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IGelatoGasPriceOracle\\n} from \\\"../interfaces/gelato/IGelatoGasPriceOracle.sol\\\";\\n\\nIGelatoGasPriceOracle constant GELATO_GAS_PRICE_ORACLE = IGelatoGasPriceOracle(\\n    0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C\\n);\\n\\naddress constant GELATO_EXECUTOR_MODULE = 0x98edc8067Cc671BCAE82D36dCC609C3E4e078AC8;\\n\",\"keccak256\":\"0xd701225d80680199dbc5b86bcf953151895629f8e05bd49954c8fd7eb6613873\",\"license\":\"UNLICENSED\"},\"contracts/constants/CInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// InstaDapp\\naddress constant INSTA_MEMORY = 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F;\\n\\n// Connectors\\naddress constant CONNECT_MAKER = 0xac02030d8a8F49eD04b2f52C394D3F901A10F8A9;\\naddress constant CONNECT_COMPOUND = 0x15FdD1e902cAC70786fe7D31013B1a806764B5a2;\\naddress constant INSTA_POOL_V2 = 0xeB4bf86589f808f90EEC8e964dBF16Bd4D284905;\\naddress constant CONNECT_AAVE_V2 = 0xBF6E4331ffd02F7043e62788FD272aeFc712f5ee;\\naddress constant CONNECT_DYDX = 0x6AF6C791c869DfA65f8A2fa042fA47D1535Bef25;\\naddress constant CONNECT_BASIC = 0xe5398f279175962E56fE4c5E0b62dc7208EF36c6;\\naddress constant CONNECT_FEE = 0xB99152F8073033B318C1Bfbfaaa582029e982CE9;\\n\\n// Insta Pool\\naddress constant INSTA_POOL_RESOLVER = 0xa004a5afBa04b74037E9E52bA1f7eb02b5E61509;\\nuint256 constant ROUTE_1_TOLERANCE = 1005e15;\\n\\n// Insta Mapping\\naddress constant INSTA_MAPPING = 0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88;\\n\\naddress constant INSTA_MAKER_RESOLVER = 0x0A7008B38E7015F8C36A49eEbc32513ECA8801E5;\\n\",\"keccak256\":\"0x0a6f769e4d928a6286024c823696c481fbeb75c85bd8648b450a18ff3fc0451d\",\"license\":\"UNLICENSED\"},\"contracts/constants/CMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\naddress constant MCD_MANAGER = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\\naddress constant JUG = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\\n\",\"keccak256\":\"0xba2dab3a9cd1c7edd900705917de16d2c9c85edc35c03a2e3535570814ecb067\",\"license\":\"UNLICENSED\"},\"contracts/constants/CTokens.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// ETH\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\naddress constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n// USD\\naddress constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\",\"keccak256\":\"0x737e5e061f0a86bb43c375e78caada7211726ed0786151e719d503e6b9b60d59\",\"license\":\"UNLICENSED\"},\"contracts/contracts/gelato/conditions/compound/ConditionMakerToCompoundSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    GelatoConditionsStandard\\n} from \\\"@gelatonetwork/core/contracts/gelato_conditions/GelatoConditionsStandard.sol\\\";\\nimport {\\n    _compoundPositionWillBeSafe\\n} from \\\"../../../../functions/gelato/conditions/compound/FCompoundPositionWillBeSafe.sol\\\";\\nimport {DAI} from \\\"../../../../constants/CTokens.sol\\\";\\nimport {\\n    _getMakerVaultCollateralBalance\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\nimport {\\n    _getMaxAmtToBorrowMakerToCompound\\n} from \\\"../../../../functions/gelato/FGelatoDebtBridge.sol\\\";\\nimport {\\n    IInstaFeeCollector\\n} from \\\"../../../../interfaces/InstaDapp/IInstaFeeCollector.sol\\\";\\n\\ncontract ConditionMakerToCompoundSafe is GelatoConditionsStandard {\\n    address public immutable instaFeeCollector;\\n    address public immutable oracleAggregator;\\n\\n    constructor(address _instaFeeCollector, address _oracleAggregator) {\\n        instaFeeCollector = _instaFeeCollector;\\n        oracleAggregator = _oracleAggregator;\\n    }\\n\\n    function getConditionData(address _dsa, uint256 _fromVaultId)\\n        public\\n        pure\\n        virtual\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodeWithSelector(\\n                this.compoundPositionWillBeSafe.selector,\\n                _dsa,\\n                _fromVaultId\\n            );\\n    }\\n\\n    function ok(\\n        uint256,\\n        bytes calldata _conditionData,\\n        uint256\\n    ) public view virtual override returns (string memory) {\\n        (address _dsa, uint256 _fromVaultId) =\\n            abi.decode(_conditionData[4:], (address, uint256));\\n\\n        return compoundPositionWillBeSafe(_dsa, _fromVaultId);\\n    }\\n\\n    function compoundPositionWillBeSafe(address _dsa, uint256 _fromVaultId)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            _compoundPositionWillBeSafe(\\n                _dsa,\\n                _getMakerVaultCollateralBalance(_fromVaultId),\\n                DAI,\\n                _getMaxAmtToBorrowMakerToCompound(\\n                    _fromVaultId,\\n                    IInstaFeeCollector(instaFeeCollector).fee(),\\n                    oracleAggregator\\n                )\\n            )\\n                ? OK\\n                : \\\"CompoundPositionsWillNotBeSafe\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x3a0a8f4aeb6d44c4149e0dc17469254b231f681f13591b2400a52677548f8bcc\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IAaveProtocolDataProvider\\n} from \\\"../../interfaces/dapps/Aave/IAaveProtocolDataProvider.sol\\\";\\nimport {\\n    ILendingPoolAddressesProvider\\n} from \\\"../../interfaces/dapps/Aave/ILendingPoolAddressesProvider.sol\\\";\\nimport {\\n    ChainLinkInterface\\n} from \\\"../../interfaces/dapps/Aave/ChainLinkInterface.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/dapps/Aave/ILendingPool.sol\\\";\\nimport {WETH, ETH} from \\\"../../constants/CTokens.sol\\\";\\nimport {AaveUserData} from \\\"../../structs/SAave.sol\\\";\\nimport {\\n    LENDING_POOL_ADDRESSES_PROVIDER,\\n    CHAINLINK_ETH_FEED,\\n    AAVE_PROTOCOL_DATA_PROVIDER\\n} from \\\"../../constants/CAave.sol\\\";\\nimport {ETH, WETH} from \\\"../../constants/CTokens.sol\\\";\\n\\nfunction _getEtherPrice() view returns (uint256 ethPrice) {\\n    ethPrice = uint256(ChainLinkInterface(CHAINLINK_ETH_FEED).latestAnswer());\\n}\\n\\nfunction _getUserData(address user)\\n    view\\n    returns (AaveUserData memory userData)\\n{\\n    (\\n        uint256 totalCollateralETH,\\n        uint256 totalDebtETH,\\n        uint256 availableBorrowsETH,\\n        uint256 currentLiquidationThreshold,\\n        uint256 ltv,\\n        uint256 healthFactor\\n    ) =\\n        ILendingPool(\\n            ILendingPoolAddressesProvider(LENDING_POOL_ADDRESSES_PROVIDER)\\n                .getLendingPool()\\n        )\\n            .getUserAccountData(user);\\n\\n    userData = AaveUserData(\\n        totalCollateralETH,\\n        totalDebtETH,\\n        availableBorrowsETH,\\n        currentLiquidationThreshold,\\n        ltv,\\n        healthFactor,\\n        _getEtherPrice()\\n    );\\n}\\n\\nfunction _getAssetLiquidationThreshold(address _token)\\n    view\\n    returns (uint256 liquidationThreshold)\\n{\\n    (, , liquidationThreshold, , , , , , , ) = IAaveProtocolDataProvider(\\n        AAVE_PROTOCOL_DATA_PROVIDER\\n    )\\n        .getReserveConfigurationData(_getTokenAddr(_token));\\n}\\n\\nfunction _getTokenAddr(address _token) pure returns (address) {\\n    return _token == ETH ? WETH : _token;\\n}\\n\",\"keccak256\":\"0xa20bfadadb13a66cc88e6b60f706bb66a44ceda97127a96f487978360cb47d24\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {CompData, AccountLiquidityLocalVars} from \\\"../../structs/SCompound.sol\\\";\\nimport {INSTA_MAPPING} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {COMPTROLLER} from \\\"../../constants/CCompound.sol\\\";\\nimport {InstaMapping} from \\\"../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {ICToken} from \\\"../../interfaces/dapps/Compound/ICToken.sol\\\";\\nimport {IComptroller} from \\\"../../interfaces/dapps/Compound/IComptroller.sol\\\";\\nimport {IPriceOracle} from \\\"../../interfaces/dapps/Compound/IPriceOracle.sol\\\";\\nimport {mul} from \\\"../../vendor/DSMath.sol\\\";\\n\\nfunction _getCToken(address _token) view returns (address) {\\n    return InstaMapping(INSTA_MAPPING).cTokenMapping(_token);\\n}\\n\\nfunction _wouldCompoundAccountBeLiquid(\\n    address _dsa,\\n    uint256 _colAmt,\\n    address _cTokenModify,\\n    uint256 _debtAmt\\n) view returns (bool) {\\n    AccountLiquidityLocalVars memory vars;\\n\\n    IComptroller comptroller = IComptroller(COMPTROLLER);\\n\\n    ICToken[] memory assets = comptroller.getAssetsIn(_dsa);\\n    for (uint256 i = 0; i < assets.length; i++) {\\n        ICToken asset = assets[i];\\n        // Read the balances and exchange rate from the cToken\\n        vars = _getAssetLiquidity(vars, _dsa, asset);\\n\\n        // Calculate effects of interacting with cTokenModify\\n        if (address(asset) == _cTokenModify) {\\n            vars.sumCollateral = mulScalarTruncateAddUInt(\\n                vars.tokensToDenom,\\n                _colAmt,\\n                vars.sumCollateral\\n            );\\n\\n            // borrow effect\\n            // sumBorrowPlusEffects += oraclePrice * debtAmt\\n            vars.sumBorrowPlusEffects = mulScalarTruncateAddUInt(\\n                vars.oraclePrice,\\n                _debtAmt,\\n                vars.sumBorrowPlusEffects\\n            );\\n        }\\n    }\\n\\n    if (assets.length == 0) {\\n        vars = _getAssetLiquidity(vars, _dsa, ICToken(_cTokenModify));\\n\\n        vars.sumCollateral = mulScalarTruncateAddUInt(\\n            vars.tokensToDenom,\\n            _colAmt,\\n            vars.sumCollateral\\n        );\\n\\n        vars.sumBorrowPlusEffects = mulScalarTruncateAddUInt(\\n            vars.oraclePrice,\\n            _debtAmt,\\n            vars.sumBorrowPlusEffects\\n        );\\n    }\\n\\n    return vars.sumCollateral > vars.sumBorrowPlusEffects;\\n}\\n\\nfunction _getAssetLiquidity(\\n    AccountLiquidityLocalVars memory vars,\\n    address _dsa,\\n    ICToken _asset\\n) view returns (AccountLiquidityLocalVars memory) {\\n    uint256 oErr;\\n    IComptroller comptroller = IComptroller(COMPTROLLER);\\n\\n    // Read the balances and exchange rate from the cToken\\n    (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRate) = ICToken(\\n        _asset\\n    )\\n        .getAccountSnapshot(_dsa);\\n    require(oErr == 0, \\\"_getAssetLiquidity: semi-opaque error code\\\");\\n    (, vars.collateralFactor, ) = (comptroller.markets(address(_asset)));\\n    vars.oraclePrice = IPriceOracle(IComptroller(COMPTROLLER).oracle())\\n        .getUnderlyingPrice(_asset);\\n    require(vars.oraclePrice != 0, \\\"\\\");\\n\\n    vars.tokensToDenom = mul_expScale(\\n        mul_expScale(vars.collateralFactor, vars.exchangeRate),\\n        vars.oraclePrice\\n    );\\n\\n    vars.sumCollateral = mulScalarTruncateAddUInt(\\n        vars.tokensToDenom,\\n        vars.cTokenBalance,\\n        vars.sumCollateral\\n    );\\n\\n    vars.sumBorrowPlusEffects = mulScalarTruncateAddUInt(\\n        vars.oraclePrice,\\n        vars.borrowBalance,\\n        vars.sumBorrowPlusEffects\\n    );\\n    return vars;\\n}\\n\\n// Compound Math Function\\n\\nfunction mulScalarTruncateAddUInt(\\n    uint256 _a,\\n    uint256 _b,\\n    uint256 _addend\\n) pure returns (uint256) {\\n    return mul_expScale(_a, _b) + _addend;\\n}\\n\\nfunction mul_expScale(uint256 _a, uint256 _b) pure returns (uint256) {\\n    return mul(_a, _b) / 1e18;\\n}\\n\\n// Compound Math Function\\n\",\"keccak256\":\"0xbc4c14090f162d4b6f7ce596cfb34825989b517c68b3e42fff8f52db083dea66\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {MCD_MANAGER} from \\\"../../constants/CMaker.sol\\\";\\nimport {INSTA_MAPPING} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {\\n    ITokenJoinInterface\\n} from \\\"../../interfaces/dapps/Maker/ITokenJoinInterface.sol\\\";\\nimport {IMcdManager} from \\\"../../interfaces/dapps/Maker/IMcdManager.sol\\\";\\nimport {InstaMapping} from \\\"../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {IVat} from \\\"../../interfaces/dapps/Maker/IVat.sol\\\";\\nimport {RAY, add, sub, mul} from \\\"../../vendor/DSMath.sol\\\";\\nimport {_stringToBytes32, _convertTo18} from \\\"../../vendor/Convert.sol\\\";\\n\\nfunction _getMakerVaultDebt(uint256 _vaultId) view returns (uint256 wad) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, , , ) = vat.ilks(ilk);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n    uint256 dai = vat.dai(urn);\\n\\n    uint256 rad = sub(mul(art, rate), dai);\\n    wad = rad / RAY;\\n\\n    wad = mul(wad, RAY) < rad ? wad + 1 : wad;\\n}\\n\\nfunction _getMakerRawVaultDebt(uint256 _vaultId) view returns (uint256 tab) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, , , ) = vat.ilks(ilk);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n\\n    uint256 rad = mul(art, rate);\\n\\n    tab = rad / RAY;\\n    tab = mul(tab, RAY) < rad ? tab + 1 : tab;\\n}\\n\\nfunction _getMakerVaultCollateralBalance(uint256 _vaultId)\\n    view\\n    returns (uint256)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    IVat vat = IVat(manager.vat());\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    (uint256 ink, ) = vat.urns(ilk, urn);\\n\\n    return ink;\\n}\\n\\nfunction _vaultWillBeSafe(\\n    uint256 _vaultId,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    require(_vaultId != 0, \\\"_vaultWillBeSafe: invalid vault id.\\\");\\n\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n\\n    ITokenJoinInterface tokenJoinContract =\\n        ITokenJoinInterface(InstaMapping(INSTA_MAPPING).gemJoinMapping(ilk));\\n\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, uint256 spot, , ) = vat.ilks(ilk);\\n    (uint256 ink, uint256 art) = vat.urns(ilk, urn);\\n    uint256 dai = vat.dai(urn);\\n\\n    uint256 dink = _convertTo18(tokenJoinContract.dec(), _colAmt);\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n\\n    ink = add(ink, dink);\\n    art = add(art, dart);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab <= mul(ink, spot);\\n}\\n\\nfunction _newVaultWillBeSafe(\\n    string memory _colType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (, uint256 rate, uint256 spot, , ) = vat.ilks(ilk);\\n\\n    ITokenJoinInterface tokenJoinContract =\\n        ITokenJoinInterface(InstaMapping(INSTA_MAPPING).gemJoinMapping(ilk));\\n\\n    uint256 ink = _convertTo18(tokenJoinContract.dec(), _colAmt);\\n    uint256 art = _getDebtAmt(_daiDebtAmt, 0, rate);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab <= mul(ink, spot);\\n}\\n\\nfunction _debtCeilingIsReachedNewVault(\\n    string memory _colType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (uint256 Art, uint256 rate, , uint256 line, ) = vat.ilks(ilk);\\n    uint256 Line = vat.Line();\\n    uint256 debt = vat.debt();\\n\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, 0, rate);\\n    uint256 dtab = mul(rate, dart);\\n\\n    debt = add(debt, dtab);\\n    Art = add(Art, dart);\\n\\n    return mul(Art, rate) > line || debt > Line;\\n}\\n\\nfunction _debtCeilingIsReached(uint256 _vaultId, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n\\n    (uint256 Art, uint256 rate, , uint256 line, ) = vat.ilks(ilk);\\n    uint256 dai = vat.dai(urn);\\n    uint256 Line = vat.Line();\\n    uint256 debt = vat.debt();\\n\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n    uint256 dtab = mul(rate, dart);\\n\\n    debt = add(debt, dtab);\\n    Art = add(Art, dart);\\n\\n    return mul(Art, rate) > line || debt > Line;\\n}\\n\\nfunction _debtIsDustNewVault(string memory _colType, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (, uint256 rate, , , uint256 dust) = vat.ilks(ilk);\\n    uint256 art = _getDebtAmt(_daiDebtAmt, 0, rate);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab < dust;\\n}\\n\\nfunction _debtIsDust(uint256 _vaultId, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n    (, uint256 rate, , , uint256 dust) = vat.ilks(ilk);\\n\\n    uint256 dai = vat.dai(urn);\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n    art = add(art, dart);\\n    uint256 tab = mul(rate, art);\\n\\n    return tab < dust;\\n}\\n\\nfunction _getVaultData(IMcdManager _manager, uint256 _vault)\\n    view\\n    returns (bytes32 ilk, address urn)\\n{\\n    ilk = _manager.ilks(_vault);\\n    urn = _manager.urns(_vault);\\n}\\n\\nfunction _getDebtAmt(\\n    uint256 _amt,\\n    uint256 _dai,\\n    uint256 _rate\\n) pure returns (uint256 dart) {\\n    dart = sub(mul(_amt, RAY), _dai) / _rate;\\n    dart = mul(dart, _rate) < mul(_amt, RAY) ? dart + 1 : dart;\\n}\\n\\nfunction _isVaultOwner(uint256 _vaultId, address _owner) view returns (bool) {\\n    if (_vaultId == 0) return false;\\n\\n    try IMcdManager(MCD_MANAGER).owns(_vaultId) returns (address owner) {\\n        return _owner == owner;\\n    } catch Error(string memory error) {\\n        revert(string(abi.encodePacked(\\\"FMaker._isVaultOwner:\\\", error)));\\n    } catch {\\n        revert(\\\"FMaker._isVaultOwner:undefined\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9a36cfb605947e1c73e96b95be4e34d2c913f23386d86be1923b34f3511a772a\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/FGelato.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {GELATO_GAS_PRICE_ORACLE} from \\\"../../constants/CGelato.sol\\\";\\nimport {mul} from \\\"../../vendor/DSMath.sol\\\";\\n\\nfunction _getGelatoGasPrice() view returns (uint256) {\\n    int256 oracleGasPrice = GELATO_GAS_PRICE_ORACLE.latestAnswer();\\n    if (oracleGasPrice <= 0) revert(\\\"_getGelatoGasPrice:0orBelow\\\");\\n    return uint256(oracleGasPrice);\\n}\\n\\nfunction _getGelatoExecutorFees(uint256 _gas) view returns (uint256) {\\n    return mul(_gas, _getGelatoGasPrice());\\n}\\n\",\"keccak256\":\"0x465e09df3c9d5dba7468a625f98bf3a543eaab1eeb0caf35436bf42722dd17e8\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/FGelatoDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {wmul, wdiv} from \\\"../../vendor/DSMath.sol\\\";\\nimport {\\n    INSTA_POOL_RESOLVER,\\n    ROUTE_1_TOLERANCE\\n} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {DebtBridgeInputData} from \\\"../../structs/SDebtBridge.sol\\\";\\nimport {\\n    _canDoMakerToAaveDebtBridge,\\n    _canDoMakerToMakerDebtBridge,\\n    _canDoMakerToCompoundDebtBridge\\n} from \\\"./conditions/FCanDoRefinance.sol\\\";\\nimport {\\n    PROTOCOL,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE,\\n    FAST_TX_FEE,\\n    VAULT_CREATION_COST\\n} from \\\"../../constants/CDebtBridge.sol\\\";\\nimport {\\n    IInstaPoolResolver\\n} from \\\"../../interfaces/InstaDapp/resolvers/IInstaPoolResolver.sol\\\";\\nimport {_getMakerVaultDebt} from \\\"../dapps/FMaker.sol\\\";\\nimport {_getGelatoExecutorFees} from \\\"./FGelato.sol\\\";\\nimport {DAI, ETH} from \\\"../../constants/CTokens.sol\\\";\\nimport {IOracleAggregator} from \\\"../../interfaces/gelato/IOracleAggregator.sol\\\";\\nimport {_convertTo18} from \\\"../../vendor/Convert.sol\\\";\\n\\nfunction _getFlashLoanRoute(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (uint256)\\n{\\n    IInstaPoolResolver.RouteData memory rData =\\n        IInstaPoolResolver(INSTA_POOL_RESOLVER).getTokenLimit(_debtToken);\\n\\n    if (rData.dydx > _debtAmt) return 0;\\n    if (rData.maker > _debtAmt) return 1;\\n    if (rData.compound > _debtAmt) return 2;\\n    if (rData.aave > _debtAmt) return 3;\\n    revert(\\\"FGelatoDebtBridge._getFlashLoanRoute: illiquid\\\");\\n}\\n\\nfunction _getDebtBridgeRoute(DebtBridgeInputData memory _data)\\n    view\\n    returns (PROTOCOL)\\n{\\n    if (_canDoMakerToAaveDebtBridge(_data)) return PROTOCOL.AAVE;\\n    else if (_canDoMakerToMakerDebtBridge(_data)) return PROTOCOL.MAKER;\\n    else if (_canDoMakerToCompoundDebtBridge(_data)) return PROTOCOL.COMPOUND;\\n    return PROTOCOL.NONE;\\n}\\n\\nfunction _getGasCostMakerToMaker(bool _newVault, uint256 _route)\\n    pure\\n    returns (uint256)\\n{\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToMaker: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            _newVault\\n                ? GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()[_route] +\\n                    VAULT_CREATION_COST\\n                : GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()[_route]\\n        );\\n}\\n\\nfunction _getGasCostMakerToCompound(uint256 _route) pure returns (uint256) {\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToCompound: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND()[_route]\\n        );\\n}\\n\\nfunction _getGasCostMakerToAave(uint256 _route) pure returns (uint256) {\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToAave: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE()[_route]\\n        );\\n}\\n\\nfunction _getGasCostPremium(uint256 _rawGasCost) pure returns (uint256) {\\n    return (_rawGasCost * (100 + FAST_TX_FEE)) / 100;\\n}\\n\\nfunction _getRealisedDebt(uint256 _debtToMove) pure returns (uint256) {\\n    return wmul(_debtToMove, ROUTE_1_TOLERANCE);\\n}\\n\\nfunction _checkRouteIndex(uint256 _route, string memory _revertMsg) pure {\\n    require(_route <= 4, _revertMsg);\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToAave(\\n    uint256 _fromVaultId,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToAave(_getFlashLoanRoute(DAI, wDaiToBorrow)),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToCompound(\\n    uint256 _fromVaultId,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToCompound(_getFlashLoanRoute(DAI, wDaiToBorrow)),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToMaker(\\n    uint256 _fromVaultId,\\n    bool _newVault,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToMaker(\\n                _newVault,\\n                _getFlashLoanRoute(DAI, wDaiToBorrow)\\n            ),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrow(\\n    uint256 _wDaiToBorrow,\\n    uint256 _gasCost,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    (uint256 gasCostInDAI, uint256 decimals) =\\n        IOracleAggregator(_oracleAggregator).getExpectedReturnAmount(\\n            _getGelatoExecutorFees(_gasCost),\\n            ETH,\\n            DAI\\n        );\\n\\n    gasCostInDAI = _convertTo18(decimals, gasCostInDAI);\\n\\n    return _wDaiToBorrow + gasCostInDAI + wmul(_wDaiToBorrow, _fees);\\n}\\n\",\"keccak256\":\"0x175aee7c0071ded9d065f293c225c65d8d29253e62e6199119d506c611a1e8d2\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/FCanDoRefinance.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {_isAaveLiquid} from \\\"./aave/FAaveHasLiquidity.sol\\\";\\nimport {_aavePositionWillBeSafe} from \\\"./aave/FAavePositionWillBeSafe.sol\\\";\\nimport {_isDebtAmtDust} from \\\"./maker/FIsDebtAmtDust.sol\\\";\\nimport {_isDebtCeilingReached} from \\\"./maker/FDebtCeilingIsReached.sol\\\";\\nimport {_destVaultWillBeSafe} from \\\"./maker/FDestVaultWillBeSafe.sol\\\";\\nimport {_cTokenHasLiquidity} from \\\"./compound/FCompoundHasLiquidity.sol\\\";\\nimport {\\n    _compoundPositionWillBeSafe\\n} from \\\"./compound/FCompoundPositionWillBeSafe.sol\\\";\\nimport {DebtBridgeInputData} from \\\"../../../structs/SDebtBridge.sol\\\";\\nimport {DAI} from \\\"../../../constants/CTokens.sol\\\";\\nimport {\\n    _getMaxAmtToBorrow,\\n    _getGasCostMakerToAave,\\n    _getGasCostMakerToCompound,\\n    _getGasCostMakerToMaker\\n} from \\\"../FGelatoDebtBridge.sol\\\";\\n\\nfunction _canDoMakerToAaveDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    _data.debtAmt = _getMaxAmtToBorrow(\\n        _data.debtAmt,\\n        _getGasCostMakerToAave(_data.flashRoute),\\n        _data.fees,\\n        _data.oracleAggregator\\n    );\\n    return\\n        _isAaveLiquid(DAI, _data.debtAmt) &&\\n        _aavePositionWillBeSafe(\\n            _data.dsa,\\n            _data.colAmt,\\n            _data.colToken,\\n            _data.debtAmt,\\n            _data.oracleAggregator\\n        );\\n}\\n\\nfunction _canDoMakerToMakerDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    _data.debtAmt = _getMaxAmtToBorrow(\\n        _data.debtAmt,\\n        _getGasCostMakerToMaker(_data.makerDestVaultId == 0, _data.flashRoute),\\n        _data.fees,\\n        _data.oracleAggregator\\n    );\\n    return\\n        !_isDebtAmtDust(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            _data.debtAmt\\n        ) &&\\n        !_isDebtCeilingReached(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            _data.debtAmt\\n        ) &&\\n        _destVaultWillBeSafe(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            _data.colAmt,\\n            _data.debtAmt\\n        );\\n}\\n\\nfunction _canDoMakerToCompoundDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    _data.debtAmt = _getMaxAmtToBorrow(\\n        _data.debtAmt,\\n        _getGasCostMakerToCompound(_data.flashRoute),\\n        _data.fees,\\n        _data.oracleAggregator\\n    );\\n    return\\n        _cTokenHasLiquidity(DAI, _data.debtAmt) &&\\n        _compoundPositionWillBeSafe(\\n            _data.dsa,\\n            _data.colAmt,\\n            DAI,\\n            _data.debtAmt\\n        );\\n}\\n\",\"keccak256\":\"0xfeb332996ecdfecd2ac076897025e06b540134abf20e61b109938cb2c70912a6\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/aave/FAaveHasLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {IERC20} from \\\"../../../../interfaces/dapps/IERC20.sol\\\";\\nimport {\\n    ILendingPoolAddressesProvider\\n} from \\\"../../../../interfaces/dapps/Aave/ILendingPoolAddressesProvider.sol\\\";\\nimport {ILendingPool} from \\\"../../../../interfaces/dapps/Aave/ILendingPool.sol\\\";\\nimport {LENDING_POOL_ADDRESSES_PROVIDER} from \\\"../../../../constants/CAave.sol\\\";\\nimport {\\n    _getRealisedDebt\\n} from \\\"../../../../functions/gelato/FGelatoDebtBridge.sol\\\";\\nimport {_getMakerVaultDebt} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isAaveLiquid(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (bool)\\n{\\n    return\\n        IERC20(_debtToken).balanceOf(\\n            ILendingPool(\\n                ILendingPoolAddressesProvider(LENDING_POOL_ADDRESSES_PROVIDER)\\n                    .getLendingPool()\\n            )\\n                .getReserveData(_debtToken)\\n                .aTokenAddress\\n        ) > _debtAmt;\\n}\\n\",\"keccak256\":\"0xdab0be367444b3277d5945d200dbae6a19b53736c364417a545de30c29ce6ed1\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/aave/FAavePositionWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _getUserData,\\n    _getAssetLiquidationThreshold\\n} from \\\"../../../../functions/dapps/FAave.sol\\\";\\nimport {AaveUserData} from \\\"../../../../structs/SAave.sol\\\";\\nimport {GelatoBytes} from \\\"../../../../lib/GelatoBytes.sol\\\";\\nimport {wdiv, wmul, mul} from \\\"../../../../vendor/DSMath.sol\\\";\\nimport {\\n    IOracleAggregator\\n} from \\\"../../../../interfaces/gelato/IOracleAggregator.sol\\\";\\nimport {ETH, DAI} from \\\"../../../../constants/CTokens.sol\\\";\\nimport {_convertTo18} from \\\"../../../../vendor/Convert.sol\\\";\\n\\nfunction _aavePositionWillBeSafe(\\n    address _dsa,\\n    uint256 _colAmt,\\n    address _colToken,\\n    uint256 _debtAmt,\\n    address _oracleAggregator\\n) view returns (bool) {\\n    uint256 _colAmtInETH;\\n    uint256 _decimals;\\n    IOracleAggregator oracleAggregator = IOracleAggregator(_oracleAggregator);\\n\\n    AaveUserData memory userData = _getUserData(_dsa);\\n\\n    if (_colToken == ETH) _colAmtInETH = _colAmt;\\n    else {\\n        (_colAmtInETH, _decimals) = oracleAggregator.getExpectedReturnAmount(\\n            _colAmt,\\n            _colToken,\\n            ETH\\n        );\\n\\n        _colAmtInETH = _convertTo18(_decimals, _colAmtInETH);\\n    }\\n\\n    (_debtAmt, _decimals) = oracleAggregator.getExpectedReturnAmount(\\n        _debtAmt,\\n        DAI,\\n        ETH\\n    );\\n    _debtAmt = _convertTo18(_decimals, _debtAmt);\\n\\n    //\\n    //                  __\\n    //                  \\\\\\n    //                  /__ (Collateral)i in ETH x (Liquidation Threshold)i\\n    //  HealthFactor =  _________________________________________________\\n    //\\n    //                  Total Borrows in ETH + Total Fees in ETH\\n    //\\n\\n    return\\n        wdiv(\\n            (\\n                (mul(\\n                    userData.currentLiquidationThreshold,\\n                    userData.totalCollateralETH\\n                ) + mul(_colAmtInETH, _getAssetLiquidationThreshold(_colToken)))\\n            ) / 1e4,\\n            userData.totalBorrowsETH + _debtAmt\\n        ) > 1e18;\\n}\\n\",\"keccak256\":\"0x96331066dfa643fef3ebd213c5286b84e2e2a65e796507194cea39f49f4665ac\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/compound/FCompoundHasLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ICToken} from \\\"../../../../interfaces/dapps/Compound/ICToken.sol\\\";\\nimport {_getCToken} from \\\"../../../dapps/FCompound.sol\\\";\\n\\nfunction _cTokenHasLiquidity(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (bool)\\n{\\n    return ICToken(_getCToken(_debtToken)).getCash() > _debtAmt;\\n}\\n\",\"keccak256\":\"0x94ff371cde2624508c316b09e5a5f16efd1315091ec1a6dcd79204e683e2f78c\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/compound/FCompoundPositionWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {DAI} from \\\"../../../../constants/CTokens.sol\\\";\\nimport {\\n    _getCToken,\\n    _wouldCompoundAccountBeLiquid\\n} from \\\"../../../dapps/FCompound.sol\\\";\\n\\nfunction _compoundPositionWillBeSafe(\\n    address _dsa,\\n    uint256 _colAmt,\\n    address _debtToken,\\n    uint256 _debtAmt\\n) view returns (bool) {\\n    return\\n        _wouldCompoundAccountBeLiquid(\\n            _dsa,\\n            _colAmt,\\n            _getCToken(_debtToken),\\n            _debtAmt\\n        );\\n}\\n\",\"keccak256\":\"0x88ec9113308440560945b22168b24404709a70f28b8e639be393d68f8ff6b6ab\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FDebtCeilingIsReached.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _debtCeilingIsReachedNewVault,\\n    _debtCeilingIsReached,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isDebtCeilingReached(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return\\n        _debtCeilingIsReachedExplicit(_destVaultId, _destColType, _daiDebtAmt);\\n}\\n\\nfunction _debtCeilingIsReachedExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _debtCeilingIsReachedNewVault(_destColType, _daiDebtAmt)\\n            : _debtCeilingIsReached(_destVaultId, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x63d4ac5ebf15e2b820f5f8bacbd7856942c56e3f4c758ac72e2c23122f0bb6ad\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FDestVaultWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _vaultWillBeSafe,\\n    _newVaultWillBeSafe,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _destVaultWillBeSafe(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return\\n        _destVaultWillBeSafeExplicit(\\n            _destVaultId,\\n            _destColType,\\n            _colAmt,\\n            _daiDebtAmt\\n        );\\n}\\n\\nfunction _destVaultWillBeSafeExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _newVaultWillBeSafe(_destColType, _colAmt, _daiDebtAmt)\\n            : _vaultWillBeSafe(_destVaultId, _colAmt, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x02d7a4a2ce335b250eb1cbd445f9d76f90d5a183a86b715c0cf943022393dfb4\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FIsDebtAmtDust.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _debtIsDustNewVault,\\n    _debtIsDust,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isDebtAmtDust(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return _isDebtAmtDustExplicit(_destVaultId, _destColType, _daiDebtAmt);\\n}\\n\\nfunction _isDebtAmtDustExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _debtIsDustNewVault(_destColType, _daiDebtAmt)\\n            : _debtIsDust(_destVaultId, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x3fe2e42cc5cf8221731e7f4dd926e973024eb3efab57b4c4568e45ce70765a20\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/IInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n/// @notice Interface InstaDapp Index\\ninterface IndexInterface {\\n    function connectors(uint256 version) external view returns (address);\\n\\n    function list() external view returns (address);\\n}\\n\\n/// @notice Interface InstaDapp List\\ninterface ListInterface {\\n    function accountID(address _account) external view returns (uint64);\\n}\\n\\n/// @notice Interface InstaDapp InstaMemory\\ninterface MemoryInterface {\\n    function setUint(uint256 _id, uint256 _val) external;\\n\\n    function getUint(uint256 _id) external returns (uint256);\\n}\\n\\n/// @notice Interface InstaDapp Defi Smart Account wallet\\ninterface AccountInterface {\\n    function cast(\\n        address[] calldata _targets,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external payable returns (bytes32[] memory responses);\\n\\n    function version() external view returns (uint256);\\n\\n    function isAuth(address user) external view returns (bool);\\n\\n    function shield() external view returns (bool);\\n}\\n\\ninterface ConnectorInterface {\\n    function connectorID() external view returns (uint256 _type, uint256 _id);\\n\\n    function name() external view returns (string memory);\\n}\\n\\ninterface InstaMapping {\\n    function gemJoinMapping(bytes32) external view returns (address);\\n\\n    function cTokenMapping(address) external view returns (address);\\n}\\n\",\"keccak256\":\"0xe0675f18c98f99ac30d284feec4a1de5feb5f85c8d16c1a9e5cddd739dfb34c7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/IInstaFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IInstaFeeCollector {\\n    function setFeeCollector(address payable _feeCollector) external;\\n\\n    function setFee(uint256 _fee) external;\\n\\n    function fee() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address payable);\\n}\\n\",\"keccak256\":\"0xdb768ade8f511ae26c9de55b9373ad8b4eb8c99ab07a4bf097bfc8f25daa35b6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/resolvers/IInstaPoolResolver.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity 0.8.0;\\n\\ninterface IInstaPoolResolver {\\n    struct RouteData {\\n        uint256 dydx;\\n        uint256 maker;\\n        uint256 compound;\\n        uint256 aave;\\n    }\\n\\n    function getTokenLimit(address token)\\n        external\\n        view\\n        returns (RouteData memory);\\n}\\n\",\"keccak256\":\"0xd1e148a8c7d84f528397ac90a23160bfa04df6ad1ec990a2447ddb5ae069dac0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ChainLinkInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ChainLinkInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa28e7bfd15b9353039c764d8203adc9fc066a32db1da3351f10eed6af70c57ad\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/IAaveProtocolDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IAaveProtocolDataProvider {\\n    function getUserReserveData(address asset, address user)\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n}\\n\",\"keccak256\":\"0x8444e5bce4ff4a8715f095a931605e9765bffe3cb206bdf33f4e849cfab85735\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ReserveData} from \\\"../../../structs/SAave.sol\\\";\\n\\ninterface ILendingPool {\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (ReserveData memory);\\n\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function getReservesList() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x1215c59b3edc74953de7c551ee7de24aa00bebf0529f523dea6c99cb1faf5c1b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ILendingPoolAddressesProvider {\\n    function getLendingPool() external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4966d8f93cd89d770c8c5255aa0c266cb7df36adba5b195d0fd5d97960df8f02\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ICToken {\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCash() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x47be032b0dfd57cc06f58eb23c9cb8ec5aeaaee4abd3f620bd0260349e2251c5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ICToken} from \\\"./ICToken.sol\\\";\\nimport {Market} from \\\"../../../structs/SCompound.sol\\\";\\n\\ninterface IComptroller {\\n    function getAssetsIn(address account)\\n        external\\n        view\\n        returns (ICToken[] memory);\\n\\n    function oracle() external view returns (address);\\n\\n    function markets(address cToken)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isComped\\n        );\\n}\\n\",\"keccak256\":\"0x83078bc37abc76900f2db14752e9637c812d6e1798335f4ec7b257c4d0aaaa50\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ICToken} from \\\"./ICToken.sol\\\";\\n\\ninterface IPriceOracle {\\n    function getUnderlyingPrice(ICToken cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa6042bacdf286c327a2fcaa322cbbaa85b6f1407b772f2b5785b58917f6695e9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd0fbf10a1342de2706ae8dd1881ffe09c7bc1f7a3ee93b39a3b5c4acebf24487\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/IMcdManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IMcdManager {\\n    function ilks(uint256) external view returns (bytes32);\\n\\n    function urns(uint256) external view returns (address);\\n\\n    function vat() external view returns (address);\\n\\n    function owns(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x600c309dbdb47e7fb5b5b135e174c5af0fd80a583cc92e9db15868626ea13944\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/ITokenJoinInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ITokenJoinInterface {\\n    function dec() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a73dd7b495b10a6405595d2a72749940cbe62610ea1b4d7ec02f815bf4ed4d6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/IVat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IVat {\\n    function ilks(bytes32)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function dai(address) external view returns (uint256);\\n\\n    function urns(bytes32, address) external view returns (uint256, uint256);\\n\\n    function debt() external view returns (uint256);\\n\\n    // solhint-disable-next-line\\n    function Line() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x562456d1f66878e0dacc113383383c2eb3d4edcb76c9e0ecc04251895f5a453d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/gelato/IGelatoGasPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IGelatoGasPriceOracle {\\n    function latestAnswer() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x5d16f3187c98a910aeb6309f4b5a705237806fba133c7174713a9df7f482cbcb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/gelato/IOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IOracleAggregator {\\n    function getExpectedReturnAmount(\\n        uint256 amountIn,\\n        address inToken,\\n        address outToken\\n    ) external view returns (uint256 returnAmount, uint256 outTokenDecimals);\\n}\\n\",\"keccak256\":\"0xde61cf48c28a17f34bba0327a79af354cff3b92fdbcbe76ea5e0d6b804210b47\",\"license\":\"UNLICENSED\"},\"contracts/lib/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2456950f3849af7457015c291b9a45271ca3497d1c870361878d0f35de41080\",\"license\":\"UNLICENSED\"},\"contracts/structs/SAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// ////////// LendingPool /////////////////\\nstruct AaveUserData {\\n    uint256 totalCollateralETH;\\n    uint256 totalBorrowsETH;\\n    uint256 availableBorrowsETH;\\n    uint256 currentLiquidationThreshold;\\n    uint256 ltv;\\n    uint256 healthFactor;\\n    uint256 ethPriceInUsd;\\n}\\n\\nstruct ReserveConfigurationMap {\\n    uint256 data;\\n}\\n\\nstruct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n}\\n\",\"keccak256\":\"0x10956f70b043a4fdcaa69ceb6d286301ce8da849c0ccd5f5bc83690dab63f843\",\"license\":\"UNLICENSED\"},\"contracts/structs/SCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nstruct AccountLiquidityLocalVars {\\n    uint256 sumCollateral;\\n    uint256 sumBorrowPlusEffects;\\n    uint256 cTokenBalance;\\n    uint256 borrowBalance;\\n    uint256 exchangeRateMantissa;\\n    uint256 oraclePriceMantissa;\\n    uint256 collateralFactor;\\n    uint256 exchangeRate;\\n    uint256 oraclePrice;\\n    uint256 tokensToDenom;\\n}\\n\\nstruct Market {\\n    bool isListed;\\n    uint256 collateralFactorMantissa;\\n    mapping(address => bool) accountMembership;\\n    bool isComped;\\n}\\n\\nstruct CompData {\\n    uint256 tokenPriceInEth;\\n    uint256 tokenPriceInUsd;\\n    uint256 exchangeRateStored;\\n    uint256 balanceOfUser;\\n    uint256 borrowBalanceStoredUser;\\n    uint256 supplyRatePerBlock;\\n    uint256 borrowRatePerBlock;\\n    uint256 collateralFactor;\\n    bool isComped;\\n}\\n\",\"keccak256\":\"0xe8a0f77e7d1cfe283a9a9d356c0f32afb1fef06757e36c84948be9b0a4955927\",\"license\":\"UNLICENSED\"},\"contracts/structs/SDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nstruct DebtBridgeInputData {\\n    address dsa;\\n    uint256 colAmt;\\n    address colToken;\\n    uint256 debtAmt;\\n    address oracleAggregator;\\n    uint256 makerDestVaultId;\\n    string makerDestColType;\\n    uint256 fees;\\n    uint256 flashRoute;\\n}\\n\",\"keccak256\":\"0xec7b95278e03209f89a8c95b53b15d1c3faad51fd733b1f1b3d4d1a36ebd3bdd\",\"license\":\"UNLICENSED\"},\"contracts/vendor/Convert.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {mul as _mul} from \\\"./DSMath.sol\\\";\\n\\nfunction _stringToBytes32(string memory str) pure returns (bytes32 result) {\\n    require(bytes(str).length != 0, \\\"string-empty\\\");\\n    assembly {\\n        result := mload(add(str, 32))\\n    }\\n}\\n\\nfunction _convertTo18(uint256 _dec, uint256 _amt) pure returns (uint256 amt) {\\n    amt = _mul(_amt, 10**(18 - _dec));\\n}\\n\",\"keccak256\":\"0xba31db6ad3b69599bc5a6d8dc27f39fa6795f671af2f69fcd747983c01b799ce\",\"license\":\"UNLICENSED\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: AGPL-3.0-or-later\\\"\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.0;\\n\\nfunction add(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n}\\n\\nfunction sub(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n}\\n\\nfunction mul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n}\\n\\nfunction min(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction max(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nfunction imin(int256 x, int256 y) pure returns (int256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction imax(int256 x, int256 y) pure returns (int256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nuint256 constant WAD = 10**18;\\nuint256 constant RAY = 10**27;\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), WAD / 2) / WAD;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction rmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), RAY / 2) / RAY;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, WAD), y / 2) / y;\\n}\\n\\n//rounds to zero if x*y < RAY / 2\\nfunction rdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, RAY), y / 2) / y;\\n}\\n\\n// This famous algorithm is called \\\"exponentiation by squaring\\\"\\n// and calculates x^n with x as fixed-point and n as regular unsigned.\\n//\\n// It's O(log n), instead of O(n) for naive repeated multiplication.\\n//\\n// These facts are why it works:\\n//\\n//  If n is even, then x^n = (x^2)^(n/2).\\n//  If n is odd,  then x^n = x * x^(n-1),\\n//   and applying the equation for even x gives\\n//    x^n = x * (x^2)^((n-1) / 2).\\n//\\n//  Also, EVM division is flooring and\\n//    floor[(n-1) / 2] = floor[n / 2].\\n//\\nfunction rpow(uint256 x, uint256 n) pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n        x = rmul(x, x);\\n\\n        if (n % 2 != 0) {\\n            z = rmul(z, x);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d7cc87f9c74e3c8d9cfe196e0bdd657f2c4c0fbb588db8cb941066e859ed60a\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200280b3803806200280b8339818101604052810190620000379190620000c4565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505062000153565b600081519050620000be8162000139565b92915050565b60008060408385031215620000d857600080fd5b6000620000e885828601620000ad565b9250506020620000fb85828601620000ad565b9150509250929050565b6000620001128262000119565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001448162000105565b81146200015057600080fd5b50565b60805160601c60a05160601c61267e6200018d600039600081816101f0015261031b015260008181610152015261037e015261267e6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806327674c131461005c5780632ba0f8171461008c5780638dffe3f4146100bc578063a99891c5146100da578063bc95af311461010a575b600080fd5b610076600480360381019061007191906118ae565b610128565b6040516100839190611ef9565b60405180910390f35b6100a660048036038101906100a191906118ae565b610297565b6040516100b39190611ebc565b60405180910390f35b6100c4610319565b6040516100d19190611e34565b60405180910390f35b6100f460048036038101906100ef9190611a1e565b61033d565b6040516101019190611ef9565b60405180910390f35b61011261037c565b60405161011f9190611e34565b60405180910390f35b606061021983610137846103a0565b736b175474e89094c44da98b954eedeac495271d0f610214867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156101b657600080fd5b505afa1580156101ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ee91906119f5565b7f00000000000000000000000000000000000000000000000000000000000000006104e9565b61053a565b610258576040518060400160405280601e81526020017f436f6d706f756e64506f736974696f6e7357696c6c4e6f74426553616665000081525061028f565b6040518060400160405280600281526020017f4f4b0000000000000000000000000000000000000000000000000000000000008152505b905092915050565b60606327674c1360e01b83836040516024016102b4929190611e4f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060008085856004908092610355939291906120e2565b8101906103629190611872565b915091506103708282610128565b92505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561040257600080fd5b505afa158015610416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043a9190611849565b9050600080610449848761055a565b9150915060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c84846040518363ffffffff1660e01b815260040161048a929190611e93565b604080518083038186803b1580156104a157600080fd5b505afa1580156104b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d99190611a8a565b5090508095505050505050919050565b6000806104fd6104f88661067a565b610944565b905061053081610529610524736b175474e89094c44da98b954eedeac495271d0f8561095f565b610a9a565b8686610b12565b9150509392505050565b6000610550858561054a86610c0f565b85610cb5565b9050949350505050565b6000808373ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd846040518263ffffffff1660e01b81526004016105969190611ffb565b60206040518083038186803b1580156105ae57600080fd5b505afa1580156105c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e6919061197a565b91508373ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b81526004016106219190611ffb565b60206040518083038186803b15801561063957600080fd5b505afa15801561064d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106719190611849565b90509250929050565b600080735ef30b9986345249bc32d8928b7ee64de9435e3990506000806106a1838661055a565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156106ed57600080fd5b505afa158015610701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107259190611849565b905060008173ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b81526004016107629190611e78565b60a06040518083038186803b15801561077a57600080fd5b505afa15801561078e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b29190611b29565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff16632424be5c86866040518363ffffffff1660e01b81526004016107f5929190611e93565b604080518083038186803b15801561080c57600080fd5b505afa158015610820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108449190611a8a565b91505060008373ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b81526004016108829190611e34565b60206040518083038186803b15801561089a57600080fd5b505afa1580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d291906119f5565b905060006108e96108e38486610eb6565b83610f23565b90506b033b2e3c9fd0803ce800000081610903919061216b565b98508061091c8a6b033b2e3c9fd0803ce8000000610eb6565b106109275788610935565b6001896109349190612115565b5b98505050505050505050919050565b600061095882670df27a2cdf448000610f7c565b9050919050565b60008073a004a5afba04b74037e9e52ba1f7eb02b5e6150973ffffffffffffffffffffffffffffffffffffffff16635a860c87856040518263ffffffff1660e01b81526004016109af9190611e34565b60806040518083038186803b1580156109c757600080fd5b505afa1580156109db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ff91906119cc565b90508281600001511115610a17576000915050610a94565b8281602001511115610a2d576001915050610a94565b8281604001511115610a43576002915050610a94565b8281606001511115610a59576003915050610a94565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8b90611fdb565b60405180910390fd5b92915050565b6000610abe8260405180608001604052806041815260200161260860419139610fc0565b610b0b610ac961100c565b8360048110610b01577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151611046565b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff16633c772b6c610b3c88611074565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee736b175474e89094c44da98b954eedeac495271d0f6040518463ffffffff1660e01b8152600401610b8493929190612016565b604080518083038186803b158015610b9b57600080fd5b505afa158015610baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd39190611a8a565b91509150610be1818361108e565b9150610bed8786610f7c565b8288610bf99190612115565b610c039190612115565b92505050949350505050565b600073e81f70cc7c0d46e12d70efc60607f16bbd617e8873ffffffffffffffffffffffffffffffffffffffff1663104b29e9836040518263ffffffff1660e01b8152600401610c5e9190611e34565b60206040518083038186803b158015610c7657600080fd5b505afa158015610c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cae9190611849565b9050919050565b6000610cbf6115c3565b6000733d9819210a31b4961b30ef54be2aed79b9c9cd3b905060008173ffffffffffffffffffffffffffffffffffffffff1663abfceffc896040518263ffffffff1660e01b8152600401610d139190611e34565b60006040518083038186803b158015610d2b57600080fd5b505afa158015610d3f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d6891906118ea565b905060005b8151811015610e4b576000828281518110610db1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050610dc6858b836110ba565b94508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e3757610e108561012001518a8760000151611442565b856000018181525050610e2d856101000151888760200151611442565b8560200181815250505b508080610e4390612472565b915050610d6d565b50600081511415610e9e57610e618389886110ba565b9250610e77836101200151888560000151611442565b836000018181525050610e94836101000151868560200151611442565b8360200181815250505b82602001518360000151119350505050949350505050565b600080821480610ede575082828385610ecf919061230d565b925082610edc919061216b565b145b610f1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1490611f3b565b60405180910390fd5b92915050565b6000828284610f329190612367565b9150811115610f76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6d90611f1b565b60405180910390fd5b92915050565b6000670de0b6b3a7640000610fae610f948585610eb6565b6002670de0b6b3a7640000610fa9919061216b565b611462565b610fb8919061216b565b905092915050565b60048211158190611007576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffe9190611ef9565b60405180910390fd5b505050565b611014611616565b6040518060800160405280621ef3138152602001622814978152602001622cec41815260200162387070815250905090565b60006064601e60646110589190612115565b83611063919061230d565b61106d919061216b565b9050919050565b6000611087826110826114bb565b610eb6565b9050919050565b60006110b2828460126110a19190612367565b600a6110ad91906121ef565b610eb6565b905092915050565b6110c26115c3565b600080733d9819210a31b4961b30ef54be2aed79b9c9cd3b90508373ffffffffffffffffffffffffffffffffffffffff1663c37f68e2866040518263ffffffff1660e01b81526004016111159190611e34565b60806040518083038186803b15801561112d57600080fd5b505afa158015611141573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111659190611ac6565b896040018a6060018b60e00183815250838152508381525083955050505050600082146111c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111be90611f5b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16638e8f294b856040518263ffffffff1660e01b81526004016112009190611e34565b60606040518083038186803b15801561121857600080fd5b505afa15801561122c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611250919061192b565b909150508660c0018181525050733d9819210a31b4961b30ef54be2aed79b9c9cd3b73ffffffffffffffffffffffffffffffffffffffff16637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156112b757600080fd5b505afa1580156112cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ef9190611849565b73ffffffffffffffffffffffffffffffffffffffff1663fc57d4df856040518263ffffffff1660e01b81526004016113279190611ede565b60206040518083038186803b15801561133f57600080fd5b505afa158015611353573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137791906119f5565b86610100018181525050600086610100015114156113ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c190611fbb565b60405180910390fd5b6113ea6113df8760c001518860e0015161159c565b87610100015161159c565b8661012001818152505061140c86610120015187604001518860000151611442565b86600001818152505061142d86610100015187606001518860200151611442565b86602001818152505085925050509392505050565b60008161144f858561159c565b6114599190612115565b90509392505050565b60008282846114719190612115565b91508110156114b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ac90611f7b565b60405180910390fd5b92915050565b60008073169e633a2d1e6c10dd91238ba11c4a708dfef37c73ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561151857600080fd5b505afa15801561152c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155091906119a3565b905060008113611595576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158c90611f9b565b60405180910390fd5b8091505090565b6000670de0b6b3a76400006115b18484610eb6565b6115bb919061216b565b905092915050565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280600490602082028036833780820191505090505090565b600061164b6116468461207e565b61204d565b9050808382526020820190508285602086028201111561166a57600080fd5b60005b8581101561169a57816116808882611781565b84526020840193506020830192505060018101905061166d565b5050509392505050565b6000813590506116b381612566565b92915050565b6000815190506116c881612566565b92915050565b6000813590506116dd8161257d565b92915050565b600082601f8301126116f457600080fd5b8151611704848260208601611638565b91505092915050565b60008151905061171c81612594565b92915050565b600081519050611731816125ab565b92915050565b60008083601f84011261174957600080fd5b8235905067ffffffffffffffff81111561176257600080fd5b60208301915083600182028301111561177a57600080fd5b9250929050565b600081519050611790816125c2565b92915050565b6000815190506117a5816125d9565b92915050565b6000608082840312156117bd57600080fd5b6117c7608061204d565b905060006117d784828501611834565b60008301525060206117eb84828501611834565b60208301525060406117ff84828501611834565b604083015250606061181384828501611834565b60608301525092915050565b60008135905061182e816125f0565b92915050565b600081519050611843816125f0565b92915050565b60006020828403121561185b57600080fd5b6000611869848285016116b9565b91505092915050565b6000806040838503121561188557600080fd5b6000611893858286016116ce565b92505060206118a48582860161181f565b9150509250929050565b600080604083850312156118c157600080fd5b60006118cf858286016116a4565b92505060206118e08582860161181f565b9150509250929050565b6000602082840312156118fc57600080fd5b600082015167ffffffffffffffff81111561191657600080fd5b611922848285016116e3565b91505092915050565b60008060006060848603121561194057600080fd5b600061194e8682870161170d565b935050602061195f86828701611834565b92505060406119708682870161170d565b9150509250925092565b60006020828403121561198c57600080fd5b600061199a84828501611722565b91505092915050565b6000602082840312156119b557600080fd5b60006119c384828501611796565b91505092915050565b6000608082840312156119de57600080fd5b60006119ec848285016117ab565b91505092915050565b600060208284031215611a0757600080fd5b6000611a1584828501611834565b91505092915050565b60008060008060608587031215611a3457600080fd5b6000611a428782880161181f565b945050602085013567ffffffffffffffff811115611a5f57600080fd5b611a6b87828801611737565b93509350506040611a7e8782880161181f565b91505092959194509250565b60008060408385031215611a9d57600080fd5b6000611aab85828601611834565b9250506020611abc85828601611834565b9150509250929050565b60008060008060808587031215611adc57600080fd5b6000611aea87828801611834565b9450506020611afb87828801611834565b9350506040611b0c87828801611834565b9250506060611b1d87828801611834565b91505092959194509250565b600080600080600060a08688031215611b4157600080fd5b6000611b4f88828901611834565b9550506020611b6088828901611834565b9450506040611b7188828901611834565b9350506060611b8288828901611834565b9250506080611b9388828901611834565b9150509295509295909350565b611ba98161239b565b82525050565b611bb8816123cb565b82525050565b6000611bc9826120aa565b611bd381856120c0565b9350611be381856020860161243f565b611bec81612548565b840191505092915050565b611c008161241b565b82525050565b6000611c11826120b5565b611c1b81856120d1565b9350611c2b81856020860161243f565b611c3481612548565b840191505092915050565b6000611c4c6015836120d1565b91507f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006000830152602082019050919050565b6000611c8c6014836120d1565b91507f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000611ccc602a836120d1565b91507f5f67657441737365744c69717569646974793a2073656d692d6f70617175652060008301527f6572726f7220636f6465000000000000000000000000000000000000000000006020830152604082019050919050565b6000611d326014836120d1565b91507f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000611d72601b836120d1565b91507f5f67657447656c61746f47617350726963653a306f7242656c6f7700000000006000830152602082019050919050565b6000611db26000836120d1565b9150600082019050919050565b6000611dcc602e836120d1565b91507f4647656c61746f446562744272696467652e5f676574466c6173684c6f616e5260008301527f6f7574653a20696c6c69717569640000000000000000000000000000000000006020830152604082019050919050565b611e2e81612411565b82525050565b6000602082019050611e496000830184611ba0565b92915050565b6000604082019050611e646000830185611ba0565b611e716020830184611e25565b9392505050565b6000602082019050611e8d6000830184611baf565b92915050565b6000604082019050611ea86000830185611baf565b611eb56020830184611ba0565b9392505050565b60006020820190508181036000830152611ed68184611bbe565b905092915050565b6000602082019050611ef36000830184611bf7565b92915050565b60006020820190508181036000830152611f138184611c06565b905092915050565b60006020820190508181036000830152611f3481611c3f565b9050919050565b60006020820190508181036000830152611f5481611c7f565b9050919050565b60006020820190508181036000830152611f7481611cbf565b9050919050565b60006020820190508181036000830152611f9481611d25565b9050919050565b60006020820190508181036000830152611fb481611d65565b9050919050565b60006020820190508181036000830152611fd481611da5565b9050919050565b60006020820190508181036000830152611ff481611dbf565b9050919050565b60006020820190506120106000830184611e25565b92915050565b600060608201905061202b6000830186611e25565b6120386020830185611ba0565b6120456040830184611ba0565b949350505050565b6000604051905081810181811067ffffffffffffffff8211171561207457612073612519565b5b8060405250919050565b600067ffffffffffffffff82111561209957612098612519565b5b602082029050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600080858511156120f257600080fd5b838611156120ff57600080fd5b6001850283019150848603905094509492505050565b600061212082612411565b915061212b83612411565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156121605761215f6124bb565b5b828201905092915050565b600061217682612411565b915061218183612411565b925082612191576121906124ea565b5b828204905092915050565b6000808291508390505b60018511156121e6578086048111156121c2576121c16124bb565b5b60018516156121d15780820291505b80810290506121df85612559565b94506121a6565b94509492505050565b60006121fa82612411565b915061220583612411565b92506122327fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461223a565b905092915050565b60008261224a5760019050612306565b816122585760009050612306565b816001811461226e5760028114612278576122a7565b6001915050612306565b60ff84111561228a576122896124bb565b5b8360020a9150848211156122a1576122a06124bb565b5b50612306565b5060208310610133831016604e8410600b84101617156122dc5782820a9050838111156122d7576122d66124bb565b5b612306565b6122e9848484600161219c565b92509050818404811115612300576122ff6124bb565b5b81810290505b9392505050565b600061231882612411565b915061232383612411565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561235c5761235b6124bb565b5b828202905092915050565b600061237282612411565b915061237d83612411565b9250828210156123905761238f6124bb565b5b828203905092915050565b60006123a6826123f1565b9050919050565b60006123b8826123f1565b9050919050565b60008115159050919050565b6000819050919050565b60006123e08261239b565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006124268261242d565b9050919050565b6000612438826123f1565b9050919050565b60005b8381101561245d578082015181840152602081019050612442565b8381111561246c576000848401525b50505050565b600061247d82612411565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156124b0576124af6124bb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b61256f8161239b565b811461257a57600080fd5b50565b612586816123ad565b811461259157600080fd5b50565b61259d816123bf565b81146125a857600080fd5b50565b6125b4816123cb565b81146125bf57600080fd5b50565b6125cb816123d5565b81146125d657600080fd5b50565b6125e2816123e7565b81146125ed57600080fd5b50565b6125f981612411565b811461260457600080fd5b5056fe4647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f436f6d706f756e643a20696e76616c696420726f75746520696e646578a2646970667358221220a1612ed0917197adc8548d6b50d26373a7d2babe2c554dee62a8932b6d26461864736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806327674c131461005c5780632ba0f8171461008c5780638dffe3f4146100bc578063a99891c5146100da578063bc95af311461010a575b600080fd5b610076600480360381019061007191906118ae565b610128565b6040516100839190611ef9565b60405180910390f35b6100a660048036038101906100a191906118ae565b610297565b6040516100b39190611ebc565b60405180910390f35b6100c4610319565b6040516100d19190611e34565b60405180910390f35b6100f460048036038101906100ef9190611a1e565b61033d565b6040516101019190611ef9565b60405180910390f35b61011261037c565b60405161011f9190611e34565b60405180910390f35b606061021983610137846103a0565b736b175474e89094c44da98b954eedeac495271d0f610214867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156101b657600080fd5b505afa1580156101ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ee91906119f5565b7f00000000000000000000000000000000000000000000000000000000000000006104e9565b61053a565b610258576040518060400160405280601e81526020017f436f6d706f756e64506f736974696f6e7357696c6c4e6f74426553616665000081525061028f565b6040518060400160405280600281526020017f4f4b0000000000000000000000000000000000000000000000000000000000008152505b905092915050565b60606327674c1360e01b83836040516024016102b4929190611e4f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060008085856004908092610355939291906120e2565b8101906103629190611872565b915091506103708282610128565b92505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561040257600080fd5b505afa158015610416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043a9190611849565b9050600080610449848761055a565b9150915060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c84846040518363ffffffff1660e01b815260040161048a929190611e93565b604080518083038186803b1580156104a157600080fd5b505afa1580156104b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d99190611a8a565b5090508095505050505050919050565b6000806104fd6104f88661067a565b610944565b905061053081610529610524736b175474e89094c44da98b954eedeac495271d0f8561095f565b610a9a565b8686610b12565b9150509392505050565b6000610550858561054a86610c0f565b85610cb5565b9050949350505050565b6000808373ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd846040518263ffffffff1660e01b81526004016105969190611ffb565b60206040518083038186803b1580156105ae57600080fd5b505afa1580156105c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e6919061197a565b91508373ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b81526004016106219190611ffb565b60206040518083038186803b15801561063957600080fd5b505afa15801561064d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106719190611849565b90509250929050565b600080735ef30b9986345249bc32d8928b7ee64de9435e3990506000806106a1838661055a565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156106ed57600080fd5b505afa158015610701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107259190611849565b905060008173ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b81526004016107629190611e78565b60a06040518083038186803b15801561077a57600080fd5b505afa15801561078e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b29190611b29565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff16632424be5c86866040518363ffffffff1660e01b81526004016107f5929190611e93565b604080518083038186803b15801561080c57600080fd5b505afa158015610820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108449190611a8a565b91505060008373ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b81526004016108829190611e34565b60206040518083038186803b15801561089a57600080fd5b505afa1580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d291906119f5565b905060006108e96108e38486610eb6565b83610f23565b90506b033b2e3c9fd0803ce800000081610903919061216b565b98508061091c8a6b033b2e3c9fd0803ce8000000610eb6565b106109275788610935565b6001896109349190612115565b5b98505050505050505050919050565b600061095882670df27a2cdf448000610f7c565b9050919050565b60008073a004a5afba04b74037e9e52ba1f7eb02b5e6150973ffffffffffffffffffffffffffffffffffffffff16635a860c87856040518263ffffffff1660e01b81526004016109af9190611e34565b60806040518083038186803b1580156109c757600080fd5b505afa1580156109db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ff91906119cc565b90508281600001511115610a17576000915050610a94565b8281602001511115610a2d576001915050610a94565b8281604001511115610a43576002915050610a94565b8281606001511115610a59576003915050610a94565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8b90611fdb565b60405180910390fd5b92915050565b6000610abe8260405180608001604052806041815260200161260860419139610fc0565b610b0b610ac961100c565b8360048110610b01577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151611046565b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff16633c772b6c610b3c88611074565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee736b175474e89094c44da98b954eedeac495271d0f6040518463ffffffff1660e01b8152600401610b8493929190612016565b604080518083038186803b158015610b9b57600080fd5b505afa158015610baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd39190611a8a565b91509150610be1818361108e565b9150610bed8786610f7c565b8288610bf99190612115565b610c039190612115565b92505050949350505050565b600073e81f70cc7c0d46e12d70efc60607f16bbd617e8873ffffffffffffffffffffffffffffffffffffffff1663104b29e9836040518263ffffffff1660e01b8152600401610c5e9190611e34565b60206040518083038186803b158015610c7657600080fd5b505afa158015610c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cae9190611849565b9050919050565b6000610cbf6115c3565b6000733d9819210a31b4961b30ef54be2aed79b9c9cd3b905060008173ffffffffffffffffffffffffffffffffffffffff1663abfceffc896040518263ffffffff1660e01b8152600401610d139190611e34565b60006040518083038186803b158015610d2b57600080fd5b505afa158015610d3f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d6891906118ea565b905060005b8151811015610e4b576000828281518110610db1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050610dc6858b836110ba565b94508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e3757610e108561012001518a8760000151611442565b856000018181525050610e2d856101000151888760200151611442565b8560200181815250505b508080610e4390612472565b915050610d6d565b50600081511415610e9e57610e618389886110ba565b9250610e77836101200151888560000151611442565b836000018181525050610e94836101000151868560200151611442565b8360200181815250505b82602001518360000151119350505050949350505050565b600080821480610ede575082828385610ecf919061230d565b925082610edc919061216b565b145b610f1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1490611f3b565b60405180910390fd5b92915050565b6000828284610f329190612367565b9150811115610f76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6d90611f1b565b60405180910390fd5b92915050565b6000670de0b6b3a7640000610fae610f948585610eb6565b6002670de0b6b3a7640000610fa9919061216b565b611462565b610fb8919061216b565b905092915050565b60048211158190611007576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffe9190611ef9565b60405180910390fd5b505050565b611014611616565b6040518060800160405280621ef3138152602001622814978152602001622cec41815260200162387070815250905090565b60006064601e60646110589190612115565b83611063919061230d565b61106d919061216b565b9050919050565b6000611087826110826114bb565b610eb6565b9050919050565b60006110b2828460126110a19190612367565b600a6110ad91906121ef565b610eb6565b905092915050565b6110c26115c3565b600080733d9819210a31b4961b30ef54be2aed79b9c9cd3b90508373ffffffffffffffffffffffffffffffffffffffff1663c37f68e2866040518263ffffffff1660e01b81526004016111159190611e34565b60806040518083038186803b15801561112d57600080fd5b505afa158015611141573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111659190611ac6565b896040018a6060018b60e00183815250838152508381525083955050505050600082146111c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111be90611f5b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16638e8f294b856040518263ffffffff1660e01b81526004016112009190611e34565b60606040518083038186803b15801561121857600080fd5b505afa15801561122c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611250919061192b565b909150508660c0018181525050733d9819210a31b4961b30ef54be2aed79b9c9cd3b73ffffffffffffffffffffffffffffffffffffffff16637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156112b757600080fd5b505afa1580156112cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ef9190611849565b73ffffffffffffffffffffffffffffffffffffffff1663fc57d4df856040518263ffffffff1660e01b81526004016113279190611ede565b60206040518083038186803b15801561133f57600080fd5b505afa158015611353573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137791906119f5565b86610100018181525050600086610100015114156113ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c190611fbb565b60405180910390fd5b6113ea6113df8760c001518860e0015161159c565b87610100015161159c565b8661012001818152505061140c86610120015187604001518860000151611442565b86600001818152505061142d86610100015187606001518860200151611442565b86602001818152505085925050509392505050565b60008161144f858561159c565b6114599190612115565b90509392505050565b60008282846114719190612115565b91508110156114b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ac90611f7b565b60405180910390fd5b92915050565b60008073169e633a2d1e6c10dd91238ba11c4a708dfef37c73ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561151857600080fd5b505afa15801561152c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155091906119a3565b905060008113611595576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158c90611f9b565b60405180910390fd5b8091505090565b6000670de0b6b3a76400006115b18484610eb6565b6115bb919061216b565b905092915050565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280600490602082028036833780820191505090505090565b600061164b6116468461207e565b61204d565b9050808382526020820190508285602086028201111561166a57600080fd5b60005b8581101561169a57816116808882611781565b84526020840193506020830192505060018101905061166d565b5050509392505050565b6000813590506116b381612566565b92915050565b6000815190506116c881612566565b92915050565b6000813590506116dd8161257d565b92915050565b600082601f8301126116f457600080fd5b8151611704848260208601611638565b91505092915050565b60008151905061171c81612594565b92915050565b600081519050611731816125ab565b92915050565b60008083601f84011261174957600080fd5b8235905067ffffffffffffffff81111561176257600080fd5b60208301915083600182028301111561177a57600080fd5b9250929050565b600081519050611790816125c2565b92915050565b6000815190506117a5816125d9565b92915050565b6000608082840312156117bd57600080fd5b6117c7608061204d565b905060006117d784828501611834565b60008301525060206117eb84828501611834565b60208301525060406117ff84828501611834565b604083015250606061181384828501611834565b60608301525092915050565b60008135905061182e816125f0565b92915050565b600081519050611843816125f0565b92915050565b60006020828403121561185b57600080fd5b6000611869848285016116b9565b91505092915050565b6000806040838503121561188557600080fd5b6000611893858286016116ce565b92505060206118a48582860161181f565b9150509250929050565b600080604083850312156118c157600080fd5b60006118cf858286016116a4565b92505060206118e08582860161181f565b9150509250929050565b6000602082840312156118fc57600080fd5b600082015167ffffffffffffffff81111561191657600080fd5b611922848285016116e3565b91505092915050565b60008060006060848603121561194057600080fd5b600061194e8682870161170d565b935050602061195f86828701611834565b92505060406119708682870161170d565b9150509250925092565b60006020828403121561198c57600080fd5b600061199a84828501611722565b91505092915050565b6000602082840312156119b557600080fd5b60006119c384828501611796565b91505092915050565b6000608082840312156119de57600080fd5b60006119ec848285016117ab565b91505092915050565b600060208284031215611a0757600080fd5b6000611a1584828501611834565b91505092915050565b60008060008060608587031215611a3457600080fd5b6000611a428782880161181f565b945050602085013567ffffffffffffffff811115611a5f57600080fd5b611a6b87828801611737565b93509350506040611a7e8782880161181f565b91505092959194509250565b60008060408385031215611a9d57600080fd5b6000611aab85828601611834565b9250506020611abc85828601611834565b9150509250929050565b60008060008060808587031215611adc57600080fd5b6000611aea87828801611834565b9450506020611afb87828801611834565b9350506040611b0c87828801611834565b9250506060611b1d87828801611834565b91505092959194509250565b600080600080600060a08688031215611b4157600080fd5b6000611b4f88828901611834565b9550506020611b6088828901611834565b9450506040611b7188828901611834565b9350506060611b8288828901611834565b9250506080611b9388828901611834565b9150509295509295909350565b611ba98161239b565b82525050565b611bb8816123cb565b82525050565b6000611bc9826120aa565b611bd381856120c0565b9350611be381856020860161243f565b611bec81612548565b840191505092915050565b611c008161241b565b82525050565b6000611c11826120b5565b611c1b81856120d1565b9350611c2b81856020860161243f565b611c3481612548565b840191505092915050565b6000611c4c6015836120d1565b91507f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006000830152602082019050919050565b6000611c8c6014836120d1565b91507f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000611ccc602a836120d1565b91507f5f67657441737365744c69717569646974793a2073656d692d6f70617175652060008301527f6572726f7220636f6465000000000000000000000000000000000000000000006020830152604082019050919050565b6000611d326014836120d1565b91507f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000611d72601b836120d1565b91507f5f67657447656c61746f47617350726963653a306f7242656c6f7700000000006000830152602082019050919050565b6000611db26000836120d1565b9150600082019050919050565b6000611dcc602e836120d1565b91507f4647656c61746f446562744272696467652e5f676574466c6173684c6f616e5260008301527f6f7574653a20696c6c69717569640000000000000000000000000000000000006020830152604082019050919050565b611e2e81612411565b82525050565b6000602082019050611e496000830184611ba0565b92915050565b6000604082019050611e646000830185611ba0565b611e716020830184611e25565b9392505050565b6000602082019050611e8d6000830184611baf565b92915050565b6000604082019050611ea86000830185611baf565b611eb56020830184611ba0565b9392505050565b60006020820190508181036000830152611ed68184611bbe565b905092915050565b6000602082019050611ef36000830184611bf7565b92915050565b60006020820190508181036000830152611f138184611c06565b905092915050565b60006020820190508181036000830152611f3481611c3f565b9050919050565b60006020820190508181036000830152611f5481611c7f565b9050919050565b60006020820190508181036000830152611f7481611cbf565b9050919050565b60006020820190508181036000830152611f9481611d25565b9050919050565b60006020820190508181036000830152611fb481611d65565b9050919050565b60006020820190508181036000830152611fd481611da5565b9050919050565b60006020820190508181036000830152611ff481611dbf565b9050919050565b60006020820190506120106000830184611e25565b92915050565b600060608201905061202b6000830186611e25565b6120386020830185611ba0565b6120456040830184611ba0565b949350505050565b6000604051905081810181811067ffffffffffffffff8211171561207457612073612519565b5b8060405250919050565b600067ffffffffffffffff82111561209957612098612519565b5b602082029050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600080858511156120f257600080fd5b838611156120ff57600080fd5b6001850283019150848603905094509492505050565b600061212082612411565b915061212b83612411565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156121605761215f6124bb565b5b828201905092915050565b600061217682612411565b915061218183612411565b925082612191576121906124ea565b5b828204905092915050565b6000808291508390505b60018511156121e6578086048111156121c2576121c16124bb565b5b60018516156121d15780820291505b80810290506121df85612559565b94506121a6565b94509492505050565b60006121fa82612411565b915061220583612411565b92506122327fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461223a565b905092915050565b60008261224a5760019050612306565b816122585760009050612306565b816001811461226e5760028114612278576122a7565b6001915050612306565b60ff84111561228a576122896124bb565b5b8360020a9150848211156122a1576122a06124bb565b5b50612306565b5060208310610133831016604e8410600b84101617156122dc5782820a9050838111156122d7576122d66124bb565b5b612306565b6122e9848484600161219c565b92509050818404811115612300576122ff6124bb565b5b81810290505b9392505050565b600061231882612411565b915061232383612411565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561235c5761235b6124bb565b5b828202905092915050565b600061237282612411565b915061237d83612411565b9250828210156123905761238f6124bb565b5b828203905092915050565b60006123a6826123f1565b9050919050565b60006123b8826123f1565b9050919050565b60008115159050919050565b6000819050919050565b60006123e08261239b565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006124268261242d565b9050919050565b6000612438826123f1565b9050919050565b60005b8381101561245d578082015181840152602081019050612442565b8381111561246c576000848401525b50505050565b600061247d82612411565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156124b0576124af6124bb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b61256f8161239b565b811461257a57600080fd5b50565b612586816123ad565b811461259157600080fd5b50565b61259d816123bf565b81146125a857600080fd5b50565b6125b4816123cb565b81146125bf57600080fd5b50565b6125cb816123d5565b81146125d657600080fd5b50565b6125e2816123e7565b81146125ed57600080fd5b50565b6125f981612411565b811461260457600080fd5b5056fe4647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f436f6d706f756e643a20696e76616c696420726f75746520696e646578a2646970667358221220a1612ed0917197adc8548d6b50d26373a7d2babe2c554dee62a8932b6d26461864736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
