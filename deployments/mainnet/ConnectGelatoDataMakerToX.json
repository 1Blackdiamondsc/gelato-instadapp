{
  "address": "0x5870A78462E322ED7f5fD406537Edb632422Fc20",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "__id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "__oracleAggregator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__instaFeeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__connectGelatoDataMakerToAave",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__connectGelatoDataMakerToMaker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__connectGelatoDataMakerToCompound",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OK",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connectorID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultAId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_colToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_makerDestVaultId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_makerDestColType",
          "type": "string"
        }
      ],
      "name": "getDataAndCastFromMaker",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_dsa",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        },
        {
          "internalType": "enum DataFlow",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "termsOk",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfec536d32f4b4ed4534f7052eca049d595375b2cf01862ec7a818bed9618519d",
  "receipt": {
    "to": null,
    "from": "0xF953c3d475dc0a9877329F71e2CE3d2519a519A2",
    "contractAddress": "0x5870A78462E322ED7f5fD406537Edb632422Fc20",
    "transactionIndex": 13,
    "gasUsed": "5200503",
    "logsBloom": "0x
    "blockHash": "0x8ea60f91ba4774fc2aaff20c06f1fbdfe1227fbcf84bc90581fa65b93e845427",
    "transactionHash": "0xfec536d32f4b4ed4534f7052eca049d595375b2cf01862ec7a818bed9618519d",
    "logs": [],
    "blockNumber": 11729719,
    "cumulativeGasUsed": "7288404",
    "status": 1,
    "byzantium": true
  },
  "args": [
    82,
    "0x64f31D46C52bBDe223D863B11dAb9327aB1414E9",
    "0x0c159985E905ea1A3dA7305D70583Dd618862cf4",
    "0x9e52Ee93660BD7850BF0eB7a8498a951cC9F5Cfe",
    "0xCA1d48683809980a8d9afF4815155dd71b01d584",
    "0xe4F7B402a3a4A6cceEfbA208C0814770a0731e70"
  ],
  "solcInputHash": "06ff1a108d21b21e4ca3839d365cb0b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"__oracleAggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__instaFeeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__connectGelatoDataMakerToAave\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__connectGelatoDataMakerToMaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__connectGelatoDataMakerToCompound\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OK\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultAId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_colToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_makerDestVaultId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_makerDestColType\",\"type\":\"string\"}],\"name\":\"getDataAndCastFromMaker\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dsa\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"enum DataFlow\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"termsOk\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"connectorID()\":{\"details\":\"Connector Details\"},\"getDataAndCastFromMaker(uint256,address,uint256,string)\":{\"details\":\"payable to be compatible in conjunction with DSA.cast payable target\",\"params\":{\"_colToken\":\"The ETH-A collateral token.\",\"_makerDestColType\":\"Only for Maker: colType of the new vault: e.g.ETH-B\",\"_makerDestVaultId\":\"Only for Maker: e.g. ETH-B vault of the client.\",\"_vaultAId\":\"Id of the unsafe vault of the client of Vault A Collateral.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getDataAndCastFromMaker(uint256,address,uint256,string)\":{\"notice\":\"Entry Point for DSA.cast DebtBridge from e.g ETH-A to ETH-B\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/Instadapp/connectors/debt_bridge/from_maker/ConnectGelatoDataMakerToX.sol\":\"ConnectGelatoDataMakerToX\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/core/contracts/gelato_conditions/IGelatoCondition.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n\\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\\n    /// @dev Be careful only to encode a Task's condition.data as is and not with the\\n    ///  \\\"ok\\\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\\n    ///  source of Task identification.\\n    /// @param _conditionData This is the Condition.data field developers must encode their\\n    ///  Condition's specific parameters in.\\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\\n    function ok(uint256 _taskReceiptId, bytes calldata _conditionData, uint256 _cycleId)\\n        external\\n        view\\n        returns(string memory);\\n}\",\"keccak256\":\"0xd07607af93227ec5f8c2f5401289937b98c298f0d2398c1ba7410f82a6253964\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {IGelatoProviderModule} from \\\"../../gelato_provider_modules/IGelatoProviderModule.sol\\\";\\nimport {IGelatoCondition} from \\\"../../gelato_conditions/IGelatoCondition.sol\\\";\\n\\nstruct Provider {\\n    address addr;  //  if msg.sender == provider => self-Provider\\n    IGelatoProviderModule module;  //  can be IGelatoProviderModule(0) for self-Providers\\n}\\n\\nstruct Condition {\\n    IGelatoCondition inst;  // can be AddressZero for self-conditional Actions\\n    bytes data;  // can be bytes32(0) for self-conditional Actions\\n}\\n\\nenum Operation { Call, Delegatecall }\\n\\nenum DataFlow { None, In, Out, InAndOut }\\n\\nstruct Action {\\n    address addr;\\n    bytes data;\\n    Operation operation;\\n    DataFlow dataFlow;\\n    uint256 value;\\n    bool termsOkCheck;\\n}\\n\\nstruct Task {\\n    Condition[] conditions;  // optional\\n    Action[] actions;\\n    uint256 selfProviderGasLimit;  // optional: 0 defaults to gelatoMaxGas\\n    uint256 selfProviderGasPriceCeil;  // optional: 0 defaults to NO_CEIL\\n}\\n\\nstruct TaskReceipt {\\n    uint256 id;\\n    address userProxy;\\n    Provider provider;\\n    uint256 index;\\n    Task[] tasks;\\n    uint256 expiryDate;\\n    uint256 cycleId;  // auto-filled by GelatoCore. 0 for non-cyclic/chained tasks\\n    uint256 submissionsLeft;\\n}\\n\\ninterface IGelatoCore {\\n    event LogTaskSubmitted(\\n        uint256 indexed taskReceiptId,\\n        bytes32 indexed taskReceiptHash,\\n        TaskReceipt taskReceipt\\n    );\\n\\n    event LogExecSuccess(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorSuccessFee,\\n        uint256 sysAdminSuccessFee\\n    );\\n    event LogCanExecFailed(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        string reason\\n    );\\n    event LogExecReverted(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorRefund,\\n        string reason\\n    );\\n\\n    event LogTaskCancelled(uint256 indexed taskReceiptId, address indexed cancellor);\\n\\n    /// @notice API to query whether Task can be submitted successfully.\\n    /// @dev In submitTask the msg.sender must be the same as _userProxy here.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _userProxy The userProxy from which the task will be submitted.\\n    /// @param _task Selected provider, conditions, actions, expiry date of the task\\n    function canSubmitTask(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice API to submit a single Task.\\n    /// @dev You can let users submit multiple tasks at once by batching calls to this.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task A Gelato Task object: provider, conditions, actions.\\n    /// @param _expiryDate From then on the task cannot be executed. 0 for infinity.\\n    function submitTask(\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _cycles How many full cycles will be submitted\\n    function submitTaskCycle(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _cycles\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @dev CAUTION: _sumOfRequestedTaskSubmits does not mean the number of cycles.\\n    /// @dev If _sumOfRequestedTaskSubmits = 1 && _tasks.length = 2, only the first task\\n    ///  would be submitted, but not the second\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _sumOfRequestedTaskSubmits The TOTAL number of Task auto-submits\\n    ///  that should have occured once the cycle is complete:\\n    ///  _sumOfRequestedTaskSubmits = 0 => One Task will resubmit the next Task infinitly\\n    ///  _sumOfRequestedTaskSubmits = 1 => One Task will resubmit no other task\\n    ///  _sumOfRequestedTaskSubmits = 2 => One Task will resubmit 1 other task\\n    ///  ...\\n    function submitTaskChain(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _sumOfRequestedTaskSubmits\\n    )\\n        external;\\n\\n    // ================  Exec Suite =========================\\n    /// @notice Off-chain API for executors to check, if a TaskReceipt is executable\\n    /// @dev GelatoCore checks this during execution, in order to safeguard the Conditions\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @param _gasLimit Task.selfProviderGasLimit is used for SelfProviders. All other\\n    ///  Providers must use gelatoMaxGas. If the _gasLimit is used by an Executor and the\\n    ///  tx reverts, a refund is paid by the Provider and the TaskReceipt is annulated.\\n    /// @param _execTxGasPrice Must be used by Executors. Gas Price fed by gelatoCore's\\n    ///  Gas Price Oracle. Executors can query the current gelatoGasPrice from events.\\n    function canExec(TaskReceipt calldata _TR, uint256 _gasLimit, uint256 _execTxGasPrice)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Executors call this when Conditions allow it to execute submitted Tasks.\\n    /// @dev Executors get rewarded for successful Execution. The Task remains open until\\n    ///   successfully executed, or when the execution failed, despite of gelatoMaxGas usage.\\n    ///   In the latter case Executors are refunded by the Task Provider.\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function exec(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel task\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function cancelTask(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel multiple tasks at once\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _taskReceipts TaskReceipts: id, userProxy, Task.\\n    function multiCancelTasks(TaskReceipt[] calldata _taskReceipts) external;\\n\\n    /// @notice Compute hash of task receipt\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @return hash of taskReceipt\\n    function hashTaskReceipt(TaskReceipt calldata _TR) external pure returns(bytes32);\\n\\n    // ================  Getters =========================\\n    /// @notice Returns the taskReceiptId of the last TaskReceipt submitted\\n    /// @return currentId currentId, last TaskReceiptId submitted\\n    function currentTaskReceiptId() external view returns(uint256);\\n\\n    /// @notice Returns computed taskReceipt hash, used to check for taskReceipt validity\\n    /// @param _taskReceiptId Id of taskReceipt emitted in submission event\\n    /// @return hash of taskReceipt\\n    function taskReceiptHash(uint256 _taskReceiptId) external view returns(bytes32);\\n}\\n\",\"keccak256\":\"0x890ea139bf550691f2b9e65bca4f7c0bcf2eb9b8a4564db8c5b42d2912f8adec\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_provider_modules/IGelatoProviderModule.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {Action, Task} from \\\"../gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\ninterface IGelatoProviderModule {\\n\\n    /// @notice Check if provider agrees to pay for inputted task receipt\\n    /// @dev Enables arbitrary checks by provider\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @return \\\"OK\\\" if provider agrees\\n    function isProvided(address _userProxy, address _provider, Task calldata _task)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Convert action specific payload into proxy specific payload\\n    /// @dev Encoded multiple actions into a multisend\\n    /// @param _taskReceiptId Unique ID of Gelato Task to be executed.\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @param _cycleId For Tasks that form part of a cycle/chain.\\n    /// @return Encoded payload that will be used for low-level .call on user proxy\\n    /// @return checkReturndata if true, fwd returndata from userProxy.call to ProviderModule\\n    function execPayload(\\n        uint256 _taskReceiptId,\\n        address _userProxy,\\n        address _provider,\\n        Task calldata _task,\\n        uint256 _cycleId\\n    )\\n        external\\n        view\\n        returns(bytes memory, bool checkReturndata);\\n\\n    /// @notice Called by GelatoCore.exec to verifiy that no revert happend on userProxy\\n    /// @dev If a caught revert is detected, this fn should revert with the detected error\\n    /// @param _proxyReturndata Data from GelatoCore._exec.userProxy.call(execPayload)\\n    function execRevertCheck(bytes calldata _proxyReturndata) external pure;\\n}\\n\",\"keccak256\":\"0x8d08ceddbc4e686d070e916d2bcffc69c5a640b56866bc2cef0256b564eb14dc\",\"license\":\"UNLICENSED\"},\"contracts/constants/CAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// Aave Lending Pool Addresses Provider\\naddress constant LENDING_POOL_ADDRESSES_PROVIDER = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;\\naddress constant CHAINLINK_ETH_FEED = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\\naddress constant AAVE_PROTOCOL_DATA_PROVIDER = 0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d;\\n\",\"keccak256\":\"0x3e724d5ba5806a1feebd6ffed223db3b5e24abcb1c7e15aa4d74dd3752c20495\",\"license\":\"UNLICENSED\"},\"contracts/constants/CCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\naddress constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\\n\",\"keccak256\":\"0x7894ca47cf772ae6f312893382269e76775ea92787fba1eddd53e73a1104155e\",\"license\":\"UNLICENSED\"},\"contracts/constants/CDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nenum PROTOCOL {AAVE, MAKER, COMPOUND, NONE}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2519000), 3140500, 3971000, 4345000];\\n}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2028307), 2626711, 2944065, 3698800];\\n}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2358534), 2956937, 3381960, 4029400];\\n}\\n\\nuint256 constant FAST_TX_FEE = 30;\\nuint256 constant VAULT_CREATION_COST = 200000;\\nuint256 constant MAX_INSTA_FEE = 3e15;\\n\",\"keccak256\":\"0x5cb259ff9d661ebd3beb9d56e49ffb7dd5ff6a4c358c8acd913da52f5b99124b\",\"license\":\"UNLICENSED\"},\"contracts/constants/CGelato.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IGelatoGasPriceOracle\\n} from \\\"../interfaces/gelato/IGelatoGasPriceOracle.sol\\\";\\n\\nIGelatoGasPriceOracle constant GELATO_GAS_PRICE_ORACLE = IGelatoGasPriceOracle(\\n    0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C\\n);\\n\\naddress constant GELATO_EXECUTOR_MODULE = 0x98edc8067Cc671BCAE82D36dCC609C3E4e078AC8;\\n\",\"keccak256\":\"0xd701225d80680199dbc5b86bcf953151895629f8e05bd49954c8fd7eb6613873\",\"license\":\"UNLICENSED\"},\"contracts/constants/CInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// InstaDapp\\naddress constant INSTA_MEMORY = 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F;\\n\\n// Connectors\\naddress constant CONNECT_MAKER = 0xac02030d8a8F49eD04b2f52C394D3F901A10F8A9;\\naddress constant CONNECT_COMPOUND = 0x15FdD1e902cAC70786fe7D31013B1a806764B5a2;\\naddress constant INSTA_POOL_V2 = 0xeB4bf86589f808f90EEC8e964dBF16Bd4D284905;\\naddress constant CONNECT_AAVE_V2 = 0xBF6E4331ffd02F7043e62788FD272aeFc712f5ee;\\naddress constant CONNECT_DYDX = 0x6AF6C791c869DfA65f8A2fa042fA47D1535Bef25;\\naddress constant CONNECT_BASIC = 0xe5398f279175962E56fE4c5E0b62dc7208EF36c6;\\naddress constant CONNECT_FEE = 0xB99152F8073033B318C1Bfbfaaa582029e982CE9;\\n\\n// Insta Pool\\naddress constant INSTA_POOL_RESOLVER = 0xa004a5afBa04b74037E9E52bA1f7eb02b5E61509;\\nuint256 constant ROUTE_1_TOLERANCE = 1005e15;\\n\\n// Insta Mapping\\naddress constant INSTA_MAPPING = 0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88;\\n\\naddress constant INSTA_MAKER_RESOLVER = 0x0A7008B38E7015F8C36A49eEbc32513ECA8801E5;\\n\",\"keccak256\":\"0x0a6f769e4d928a6286024c823696c481fbeb75c85bd8648b450a18ff3fc0451d\",\"license\":\"UNLICENSED\"},\"contracts/constants/CMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\naddress constant MCD_MANAGER = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\\naddress constant JUG = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\\n\",\"keccak256\":\"0xba2dab3a9cd1c7edd900705917de16d2c9c85edc35c03a2e3535570814ecb067\",\"license\":\"UNLICENSED\"},\"contracts/constants/CTokens.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// ETH\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\naddress constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n// USD\\naddress constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\",\"keccak256\":\"0x737e5e061f0a86bb43c375e78caada7211726ed0786151e719d503e6b9b60d59\",\"license\":\"UNLICENSED\"},\"contracts/contracts/Instadapp/connectors/debt_bridge/from_maker/ConnectGelatoDataMakerToX.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {GelatoBytes} from \\\"../../../../../lib/GelatoBytes.sol\\\";\\nimport {\\n    AccountInterface,\\n    ConnectorInterface\\n} from \\\"../../../../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {\\n    DataFlow\\n} from \\\"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\\\";\\nimport {\\n    _getMakerVaultDebt,\\n    _getMakerVaultCollateralBalance,\\n    _isVaultOwner\\n} from \\\"../../../../../functions/dapps/FMaker.sol\\\";\\nimport {DebtBridgeInputData} from \\\"../../../../../structs/SDebtBridge.sol\\\";\\nimport {DAI} from \\\"../../../../../constants/CTokens.sol\\\";\\nimport {\\n    _getRealisedDebt,\\n    _getFlashLoanRoute\\n} from \\\"../../../../../functions/gelato/FGelatoDebtBridge.sol\\\";\\nimport {PROTOCOL} from \\\"../../../../../constants/CDebtBridge.sol\\\";\\nimport {\\n    _getDebtBridgeRoute\\n} from \\\"../../../../../functions/gelato/FGelatoDebtBridge.sol\\\";\\nimport {\\n    _encodeGetDataAndCastMakerToAave\\n} from \\\"../../../../../functions/InstaDapp/connectors/FConnectGelatoDataMakerToAave.sol\\\";\\nimport {\\n    _encodeGetDataAndCastMakerToMaker\\n} from \\\"../../../../../functions/InstaDapp/connectors/FConnectGelatoDataMakerToMaker.sol\\\";\\nimport {\\n    _encodeGetDataAndCastMakerToCompound\\n} from \\\"../../../../../functions/InstaDapp/connectors/FConnectGelatoDataMakerToCompound.sol\\\";\\nimport {\\n    IInstaFeeCollector\\n} from \\\"../../../../../interfaces/InstaDapp/IInstaFeeCollector.sol\\\";\\n\\ncontract ConnectGelatoDataMakerToX is ConnectorInterface {\\n    using GelatoBytes for bytes;\\n\\n    string public constant OK = \\\"OK\\\";\\n\\n    // solhint-disable const-name-snakecase\\n    string public constant override name = \\\"ConnectGelatoDataMakerToX-v1.0\\\";\\n    uint256 internal immutable _id;\\n    address public immutable oracleAggregator;\\n    address internal immutable _instaFeeCollector;\\n    address internal immutable _connectGelatoDataMakerToAave;\\n    address internal immutable _connectGelatoDataMakerToMaker;\\n    address internal immutable _connectGelatoDataMakerToCompound;\\n\\n    constructor(\\n        uint256 __id,\\n        address __oracleAggregator,\\n        address __instaFeeCollector,\\n        address __connectGelatoDataMakerToAave,\\n        address __connectGelatoDataMakerToMaker,\\n        address __connectGelatoDataMakerToCompound\\n    ) {\\n        _id = __id;\\n        oracleAggregator = __oracleAggregator;\\n        _instaFeeCollector = __instaFeeCollector;\\n        _connectGelatoDataMakerToAave = __connectGelatoDataMakerToAave;\\n        _connectGelatoDataMakerToMaker = __connectGelatoDataMakerToMaker;\\n        _connectGelatoDataMakerToCompound = __connectGelatoDataMakerToCompound;\\n    }\\n\\n    /// @dev Connector Details\\n    function connectorID()\\n        external\\n        view\\n        override\\n        returns (uint256 _type, uint256 id)\\n    {\\n        (_type, id) = (1, _id); // Should put specific value.\\n    }\\n\\n    // ====== ACTION TERMS CHECK ==========\\n    // Overriding IGelatoAction's function (optional)\\n    function termsOk(\\n        uint256, // taskReceipId\\n        address _dsa,\\n        bytes calldata _actionData,\\n        DataFlow,\\n        uint256, // value\\n        uint256 // cycleId\\n    ) public view returns (string memory) {\\n        uint256 vaultAId = abi.decode(_actionData[4:36], (uint256));\\n\\n        if (vaultAId == 0)\\n            return \\\"ConnectGelatoDataMakerToMaker: Vault A Id is not valid\\\";\\n        if (!_isVaultOwner(vaultAId, _dsa))\\n            return \\\"ConnectGelatoDataMakerToMaker: Vault A not owned by dsa\\\";\\n        return OK;\\n    }\\n\\n    /// @notice Entry Point for DSA.cast DebtBridge from e.g ETH-A to ETH-B\\n    /// @dev payable to be compatible in conjunction with DSA.cast payable target\\n    /// @param _vaultAId Id of the unsafe vault of the client of Vault A Collateral.\\n    /// @param _colToken The ETH-A collateral token.\\n    /// @param _makerDestVaultId Only for Maker: e.g. ETH-B vault of the client.\\n    /// @param _makerDestColType Only for Maker: colType of the new vault: e.g.ETH-B\\n    function getDataAndCastFromMaker(\\n        uint256 _vaultAId,\\n        address _colToken,\\n        uint256 _makerDestVaultId,\\n        string memory _makerDestColType\\n    ) external payable {\\n        uint256 debtAmt = _getRealisedDebt(_getMakerVaultDebt(_vaultAId));\\n        (address[] memory targets, bytes[] memory datas) =\\n            _dataFromMaker(\\n                _vaultAId,\\n                _colToken,\\n                DebtBridgeInputData({\\n                    dsa: address(this),\\n                    colAmt: _getMakerVaultCollateralBalance(_vaultAId),\\n                    colToken: _colToken,\\n                    debtAmt: debtAmt,\\n                    oracleAggregator: oracleAggregator,\\n                    makerDestVaultId: _makerDestVaultId,\\n                    makerDestColType: _makerDestColType,\\n                    fees: IInstaFeeCollector(_instaFeeCollector).fee(),\\n                    flashRoute: _getFlashLoanRoute(DAI, debtAmt)\\n                })\\n            );\\n\\n        _cast(targets, datas);\\n    }\\n\\n    function _cast(address[] memory targets, bytes[] memory datas) internal {\\n        // Instapool V2 / FlashLoan call\\n        bytes memory castData =\\n            abi.encodeWithSelector(\\n                AccountInterface.cast.selector,\\n                targets,\\n                datas,\\n                msg.sender // msg.sender == GelatoCore\\n            );\\n\\n        (bool success, bytes memory returndata) =\\n            address(this).delegatecall(castData);\\n\\n        if (!success)\\n            returndata.revertWithError(\\\"ConnectGelatoDataMakerToX._cast:\\\");\\n    }\\n\\n    function _dataFromMaker(\\n        uint256 _vaultAId,\\n        address _colToken,\\n        DebtBridgeInputData memory _data\\n    ) internal view returns (address[] memory targets, bytes[] memory datas) {\\n        PROTOCOL protocol = _getDebtBridgeRoute(_data);\\n\\n        require(\\n            protocol != PROTOCOL.NONE,\\n            \\\"ConnectGelatoDataMakerToX._dataFromMaker: PROTOCOL.NONE\\\"\\n        );\\n\\n        targets = new address[](1);\\n        datas = new bytes[](1);\\n\\n        if (protocol == PROTOCOL.AAVE) {\\n            targets[0] = _connectGelatoDataMakerToAave;\\n            datas[0] = _encodeGetDataAndCastMakerToAave(_vaultAId, _colToken);\\n        } else if (protocol == PROTOCOL.MAKER) {\\n            targets[0] = _connectGelatoDataMakerToMaker;\\n            datas[0] = _encodeGetDataAndCastMakerToMaker(\\n                _vaultAId,\\n                _data.makerDestVaultId,\\n                _data.makerDestColType,\\n                _colToken\\n            );\\n        } else {\\n            targets[0] = _connectGelatoDataMakerToCompound;\\n            datas[0] = _encodeGetDataAndCastMakerToCompound(\\n                _vaultAId,\\n                _colToken\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x14c2f1c47761eff60fa93a20a48bd47bfef7b8550c32f470f4f2b297ae3cb266\",\"license\":\"UNLICENSED\"},\"contracts/functions/InstaDapp/connectors/FConnectGelatoDataMakerToAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IConnectGelatoDataMakerToAave\\n} from \\\"../../../interfaces/InstaDapp/connectors/IConnectGelatoDataMakerToAave.sol\\\";\\n\\nfunction _encodeGetDataAndCastMakerToAave(uint256 _vaultId, address _colToken)\\n    pure\\n    returns (bytes memory)\\n{\\n    return\\n        abi.encodeWithSelector(\\n            IConnectGelatoDataMakerToAave.getDataAndCastMakerToAave.selector,\\n            _vaultId,\\n            _colToken\\n        );\\n}\\n\",\"keccak256\":\"0xe2a4e357512b5cdfd79b05bfdd7a91128465ec58a195dd2dd5917e0e56548373\",\"license\":\"UNLICENSED\"},\"contracts/functions/InstaDapp/connectors/FConnectGelatoDataMakerToCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IConnectGelatoDataMakerToCompound\\n} from \\\"../../../interfaces/InstaDapp/connectors/IConnectGelatoDataMakerToCompound.sol\\\";\\n\\nfunction _encodeGetDataAndCastMakerToCompound(\\n    uint256 _vaultId,\\n    address _colToken\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectGelatoDataMakerToCompound\\n                .getDataAndCastMakerToCompound\\n                .selector,\\n            _vaultId,\\n            _colToken\\n        );\\n}\\n\",\"keccak256\":\"0x375eb62d55827ffb12481f3b6413085656363d5caf43f0614657f56bbbd12624\",\"license\":\"UNLICENSED\"},\"contracts/functions/InstaDapp/connectors/FConnectGelatoDataMakerToMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IConnectGelatoDataMakerToMaker\\n} from \\\"../../../interfaces/InstaDapp/connectors/IConnectGelatoDataMakerToMaker.sol\\\";\\n\\nfunction _encodeGetDataAndCastMakerToMaker(\\n    uint256 _vaultAId,\\n    uint256 _vaultBId,\\n    string memory _colType,\\n    address _colToken\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectGelatoDataMakerToMaker.getDataAndCastMakerToMaker.selector,\\n            _vaultAId,\\n            _vaultBId,\\n            _colType,\\n            _colToken\\n        );\\n}\\n\",\"keccak256\":\"0x7bce04da90a942e3a937e159d97eeb18d78d3596e8f10e6541c4a2ea096f6fa7\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IAaveProtocolDataProvider\\n} from \\\"../../interfaces/dapps/Aave/IAaveProtocolDataProvider.sol\\\";\\nimport {\\n    ILendingPoolAddressesProvider\\n} from \\\"../../interfaces/dapps/Aave/ILendingPoolAddressesProvider.sol\\\";\\nimport {\\n    ChainLinkInterface\\n} from \\\"../../interfaces/dapps/Aave/ChainLinkInterface.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/dapps/Aave/ILendingPool.sol\\\";\\nimport {WETH, ETH} from \\\"../../constants/CTokens.sol\\\";\\nimport {AaveUserData} from \\\"../../structs/SAave.sol\\\";\\nimport {\\n    LENDING_POOL_ADDRESSES_PROVIDER,\\n    CHAINLINK_ETH_FEED,\\n    AAVE_PROTOCOL_DATA_PROVIDER\\n} from \\\"../../constants/CAave.sol\\\";\\nimport {ETH, WETH} from \\\"../../constants/CTokens.sol\\\";\\n\\nfunction _getEtherPrice() view returns (uint256 ethPrice) {\\n    ethPrice = uint256(ChainLinkInterface(CHAINLINK_ETH_FEED).latestAnswer());\\n}\\n\\nfunction _getUserData(address user)\\n    view\\n    returns (AaveUserData memory userData)\\n{\\n    (\\n        uint256 totalCollateralETH,\\n        uint256 totalDebtETH,\\n        uint256 availableBorrowsETH,\\n        uint256 currentLiquidationThreshold,\\n        uint256 ltv,\\n        uint256 healthFactor\\n    ) =\\n        ILendingPool(\\n            ILendingPoolAddressesProvider(LENDING_POOL_ADDRESSES_PROVIDER)\\n                .getLendingPool()\\n        )\\n            .getUserAccountData(user);\\n\\n    userData = AaveUserData(\\n        totalCollateralETH,\\n        totalDebtETH,\\n        availableBorrowsETH,\\n        currentLiquidationThreshold,\\n        ltv,\\n        healthFactor,\\n        _getEtherPrice()\\n    );\\n}\\n\\nfunction _getAssetLiquidationThreshold(address _token)\\n    view\\n    returns (uint256 liquidationThreshold)\\n{\\n    (, , liquidationThreshold, , , , , , , ) = IAaveProtocolDataProvider(\\n        AAVE_PROTOCOL_DATA_PROVIDER\\n    )\\n        .getReserveConfigurationData(_getTokenAddr(_token));\\n}\\n\\nfunction _getTokenAddr(address _token) pure returns (address) {\\n    return _token == ETH ? WETH : _token;\\n}\\n\",\"keccak256\":\"0xa20bfadadb13a66cc88e6b60f706bb66a44ceda97127a96f487978360cb47d24\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {CompData, AccountLiquidityLocalVars} from \\\"../../structs/SCompound.sol\\\";\\nimport {INSTA_MAPPING} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {COMPTROLLER} from \\\"../../constants/CCompound.sol\\\";\\nimport {InstaMapping} from \\\"../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {ICToken} from \\\"../../interfaces/dapps/Compound/ICToken.sol\\\";\\nimport {IComptroller} from \\\"../../interfaces/dapps/Compound/IComptroller.sol\\\";\\nimport {IPriceOracle} from \\\"../../interfaces/dapps/Compound/IPriceOracle.sol\\\";\\nimport {mul} from \\\"../../vendor/DSMath.sol\\\";\\n\\nfunction _getCToken(address _token) view returns (address) {\\n    return InstaMapping(INSTA_MAPPING).cTokenMapping(_token);\\n}\\n\\nfunction _wouldCompoundAccountBeLiquid(\\n    address _dsa,\\n    uint256 _colAmt,\\n    address _cTokenModify,\\n    uint256 _debtAmt\\n) view returns (bool) {\\n    AccountLiquidityLocalVars memory vars;\\n\\n    IComptroller comptroller = IComptroller(COMPTROLLER);\\n\\n    ICToken[] memory assets = comptroller.getAssetsIn(_dsa);\\n    for (uint256 i = 0; i < assets.length; i++) {\\n        ICToken asset = assets[i];\\n        // Read the balances and exchange rate from the cToken\\n        vars = _getAssetLiquidity(vars, _dsa, asset);\\n\\n        // Calculate effects of interacting with cTokenModify\\n        if (address(asset) == _cTokenModify) {\\n            vars.sumCollateral = mulScalarTruncateAddUInt(\\n                vars.tokensToDenom,\\n                _colAmt,\\n                vars.sumCollateral\\n            );\\n\\n            // borrow effect\\n            // sumBorrowPlusEffects += oraclePrice * debtAmt\\n            vars.sumBorrowPlusEffects = mulScalarTruncateAddUInt(\\n                vars.oraclePrice,\\n                _debtAmt,\\n                vars.sumBorrowPlusEffects\\n            );\\n        }\\n    }\\n\\n    if (assets.length == 0) {\\n        vars = _getAssetLiquidity(vars, _dsa, ICToken(_cTokenModify));\\n\\n        vars.sumCollateral = mulScalarTruncateAddUInt(\\n            vars.tokensToDenom,\\n            _colAmt,\\n            vars.sumCollateral\\n        );\\n\\n        vars.sumBorrowPlusEffects = mulScalarTruncateAddUInt(\\n            vars.oraclePrice,\\n            _debtAmt,\\n            vars.sumBorrowPlusEffects\\n        );\\n    }\\n\\n    return vars.sumCollateral > vars.sumBorrowPlusEffects;\\n}\\n\\nfunction _getAssetLiquidity(\\n    AccountLiquidityLocalVars memory vars,\\n    address _dsa,\\n    ICToken _asset\\n) view returns (AccountLiquidityLocalVars memory) {\\n    uint256 oErr;\\n    IComptroller comptroller = IComptroller(COMPTROLLER);\\n\\n    // Read the balances and exchange rate from the cToken\\n    (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRate) = ICToken(\\n        _asset\\n    )\\n        .getAccountSnapshot(_dsa);\\n    require(oErr == 0, \\\"_getAssetLiquidity: semi-opaque error code\\\");\\n    (, vars.collateralFactor, ) = (comptroller.markets(address(_asset)));\\n    vars.oraclePrice = IPriceOracle(IComptroller(COMPTROLLER).oracle())\\n        .getUnderlyingPrice(_asset);\\n    require(vars.oraclePrice != 0, \\\"\\\");\\n\\n    vars.tokensToDenom = mul_expScale(\\n        mul_expScale(vars.collateralFactor, vars.exchangeRate),\\n        vars.oraclePrice\\n    );\\n\\n    vars.sumCollateral = mulScalarTruncateAddUInt(\\n        vars.tokensToDenom,\\n        vars.cTokenBalance,\\n        vars.sumCollateral\\n    );\\n\\n    vars.sumBorrowPlusEffects = mulScalarTruncateAddUInt(\\n        vars.oraclePrice,\\n        vars.borrowBalance,\\n        vars.sumBorrowPlusEffects\\n    );\\n    return vars;\\n}\\n\\n// Compound Math Function\\n\\nfunction mulScalarTruncateAddUInt(\\n    uint256 _a,\\n    uint256 _b,\\n    uint256 _addend\\n) pure returns (uint256) {\\n    return mul_expScale(_a, _b) + _addend;\\n}\\n\\nfunction mul_expScale(uint256 _a, uint256 _b) pure returns (uint256) {\\n    return mul(_a, _b) / 1e18;\\n}\\n\\n// Compound Math Function\\n\",\"keccak256\":\"0xbc4c14090f162d4b6f7ce596cfb34825989b517c68b3e42fff8f52db083dea66\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {MCD_MANAGER} from \\\"../../constants/CMaker.sol\\\";\\nimport {INSTA_MAPPING} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {\\n    ITokenJoinInterface\\n} from \\\"../../interfaces/dapps/Maker/ITokenJoinInterface.sol\\\";\\nimport {IMcdManager} from \\\"../../interfaces/dapps/Maker/IMcdManager.sol\\\";\\nimport {InstaMapping} from \\\"../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {IVat} from \\\"../../interfaces/dapps/Maker/IVat.sol\\\";\\nimport {RAY, add, sub, mul} from \\\"../../vendor/DSMath.sol\\\";\\nimport {_stringToBytes32, _convertTo18} from \\\"../../vendor/Convert.sol\\\";\\n\\nfunction _getMakerVaultDebt(uint256 _vaultId) view returns (uint256 wad) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, , , ) = vat.ilks(ilk);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n    uint256 dai = vat.dai(urn);\\n\\n    uint256 rad = sub(mul(art, rate), dai);\\n    wad = rad / RAY;\\n\\n    wad = mul(wad, RAY) < rad ? wad + 1 : wad;\\n}\\n\\nfunction _getMakerRawVaultDebt(uint256 _vaultId) view returns (uint256 tab) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, , , ) = vat.ilks(ilk);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n\\n    uint256 rad = mul(art, rate);\\n\\n    tab = rad / RAY;\\n    tab = mul(tab, RAY) < rad ? tab + 1 : tab;\\n}\\n\\nfunction _getMakerVaultCollateralBalance(uint256 _vaultId)\\n    view\\n    returns (uint256)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    IVat vat = IVat(manager.vat());\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    (uint256 ink, ) = vat.urns(ilk, urn);\\n\\n    return ink;\\n}\\n\\nfunction _vaultWillBeSafe(\\n    uint256 _vaultId,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    require(_vaultId != 0, \\\"_vaultWillBeSafe: invalid vault id.\\\");\\n\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n\\n    ITokenJoinInterface tokenJoinContract =\\n        ITokenJoinInterface(InstaMapping(INSTA_MAPPING).gemJoinMapping(ilk));\\n\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, uint256 spot, , ) = vat.ilks(ilk);\\n    (uint256 ink, uint256 art) = vat.urns(ilk, urn);\\n    uint256 dai = vat.dai(urn);\\n\\n    uint256 dink = _convertTo18(tokenJoinContract.dec(), _colAmt);\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n\\n    ink = add(ink, dink);\\n    art = add(art, dart);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab <= mul(ink, spot);\\n}\\n\\nfunction _newVaultWillBeSafe(\\n    string memory _colType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (, uint256 rate, uint256 spot, , ) = vat.ilks(ilk);\\n\\n    ITokenJoinInterface tokenJoinContract =\\n        ITokenJoinInterface(InstaMapping(INSTA_MAPPING).gemJoinMapping(ilk));\\n\\n    uint256 ink = _convertTo18(tokenJoinContract.dec(), _colAmt);\\n    uint256 art = _getDebtAmt(_daiDebtAmt, 0, rate);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab <= mul(ink, spot);\\n}\\n\\nfunction _debtCeilingIsReachedNewVault(\\n    string memory _colType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (uint256 Art, uint256 rate, , uint256 line, ) = vat.ilks(ilk);\\n    uint256 Line = vat.Line();\\n    uint256 debt = vat.debt();\\n\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, 0, rate);\\n    uint256 dtab = mul(rate, dart);\\n\\n    debt = add(debt, dtab);\\n    Art = add(Art, dart);\\n\\n    return mul(Art, rate) > line || debt > Line;\\n}\\n\\nfunction _debtCeilingIsReached(uint256 _vaultId, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n\\n    (uint256 Art, uint256 rate, , uint256 line, ) = vat.ilks(ilk);\\n    uint256 dai = vat.dai(urn);\\n    uint256 Line = vat.Line();\\n    uint256 debt = vat.debt();\\n\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n    uint256 dtab = mul(rate, dart);\\n\\n    debt = add(debt, dtab);\\n    Art = add(Art, dart);\\n\\n    return mul(Art, rate) > line || debt > Line;\\n}\\n\\nfunction _debtIsDustNewVault(string memory _colType, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (, uint256 rate, , , uint256 dust) = vat.ilks(ilk);\\n    uint256 art = _getDebtAmt(_daiDebtAmt, 0, rate);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab < dust;\\n}\\n\\nfunction _debtIsDust(uint256 _vaultId, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n    (, uint256 rate, , , uint256 dust) = vat.ilks(ilk);\\n\\n    uint256 dai = vat.dai(urn);\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n    art = add(art, dart);\\n    uint256 tab = mul(rate, art);\\n\\n    return tab < dust;\\n}\\n\\nfunction _getVaultData(IMcdManager _manager, uint256 _vault)\\n    view\\n    returns (bytes32 ilk, address urn)\\n{\\n    ilk = _manager.ilks(_vault);\\n    urn = _manager.urns(_vault);\\n}\\n\\nfunction _getDebtAmt(\\n    uint256 _amt,\\n    uint256 _dai,\\n    uint256 _rate\\n) pure returns (uint256 dart) {\\n    dart = sub(mul(_amt, RAY), _dai) / _rate;\\n    dart = mul(dart, _rate) < mul(_amt, RAY) ? dart + 1 : dart;\\n}\\n\\nfunction _isVaultOwner(uint256 _vaultId, address _owner) view returns (bool) {\\n    if (_vaultId == 0) return false;\\n\\n    try IMcdManager(MCD_MANAGER).owns(_vaultId) returns (address owner) {\\n        return _owner == owner;\\n    } catch Error(string memory error) {\\n        revert(string(abi.encodePacked(\\\"FMaker._isVaultOwner:\\\", error)));\\n    } catch {\\n        revert(\\\"FMaker._isVaultOwner:undefined\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9a36cfb605947e1c73e96b95be4e34d2c913f23386d86be1923b34f3511a772a\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/FGelato.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {GELATO_GAS_PRICE_ORACLE} from \\\"../../constants/CGelato.sol\\\";\\nimport {mul} from \\\"../../vendor/DSMath.sol\\\";\\n\\nfunction _getGelatoGasPrice() view returns (uint256) {\\n    int256 oracleGasPrice = GELATO_GAS_PRICE_ORACLE.latestAnswer();\\n    if (oracleGasPrice <= 0) revert(\\\"_getGelatoGasPrice:0orBelow\\\");\\n    return uint256(oracleGasPrice);\\n}\\n\\nfunction _getGelatoExecutorFees(uint256 _gas) view returns (uint256) {\\n    return mul(_gas, _getGelatoGasPrice());\\n}\\n\",\"keccak256\":\"0x465e09df3c9d5dba7468a625f98bf3a543eaab1eeb0caf35436bf42722dd17e8\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/FGelatoDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {wmul, wdiv} from \\\"../../vendor/DSMath.sol\\\";\\nimport {\\n    INSTA_POOL_RESOLVER,\\n    ROUTE_1_TOLERANCE\\n} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {DebtBridgeInputData} from \\\"../../structs/SDebtBridge.sol\\\";\\nimport {\\n    _canDoMakerToAaveDebtBridge,\\n    _canDoMakerToMakerDebtBridge,\\n    _canDoMakerToCompoundDebtBridge\\n} from \\\"./conditions/FCanDoRefinance.sol\\\";\\nimport {\\n    PROTOCOL,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE,\\n    FAST_TX_FEE,\\n    VAULT_CREATION_COST\\n} from \\\"../../constants/CDebtBridge.sol\\\";\\nimport {\\n    IInstaPoolResolver\\n} from \\\"../../interfaces/InstaDapp/resolvers/IInstaPoolResolver.sol\\\";\\nimport {_getMakerVaultDebt} from \\\"../dapps/FMaker.sol\\\";\\nimport {_getGelatoExecutorFees} from \\\"./FGelato.sol\\\";\\nimport {DAI, ETH} from \\\"../../constants/CTokens.sol\\\";\\nimport {IOracleAggregator} from \\\"../../interfaces/gelato/IOracleAggregator.sol\\\";\\nimport {_convertTo18} from \\\"../../vendor/Convert.sol\\\";\\n\\nfunction _getFlashLoanRoute(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (uint256)\\n{\\n    IInstaPoolResolver.RouteData memory rData =\\n        IInstaPoolResolver(INSTA_POOL_RESOLVER).getTokenLimit(_debtToken);\\n\\n    if (rData.dydx > _debtAmt) return 0;\\n    if (rData.maker > _debtAmt) return 1;\\n    if (rData.compound > _debtAmt) return 2;\\n    if (rData.aave > _debtAmt) return 3;\\n    revert(\\\"FGelatoDebtBridge._getFlashLoanRoute: illiquid\\\");\\n}\\n\\nfunction _getDebtBridgeRoute(DebtBridgeInputData memory _data)\\n    view\\n    returns (PROTOCOL)\\n{\\n    if (_canDoMakerToAaveDebtBridge(_data)) return PROTOCOL.AAVE;\\n    else if (_canDoMakerToMakerDebtBridge(_data)) return PROTOCOL.MAKER;\\n    else if (_canDoMakerToCompoundDebtBridge(_data)) return PROTOCOL.COMPOUND;\\n    return PROTOCOL.NONE;\\n}\\n\\nfunction _getGasCostMakerToMaker(bool _newVault, uint256 _route)\\n    pure\\n    returns (uint256)\\n{\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToMaker: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            _newVault\\n                ? GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()[_route] +\\n                    VAULT_CREATION_COST\\n                : GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()[_route]\\n        );\\n}\\n\\nfunction _getGasCostMakerToCompound(uint256 _route) pure returns (uint256) {\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToCompound: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND()[_route]\\n        );\\n}\\n\\nfunction _getGasCostMakerToAave(uint256 _route) pure returns (uint256) {\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToAave: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE()[_route]\\n        );\\n}\\n\\nfunction _getGasCostPremium(uint256 _rawGasCost) pure returns (uint256) {\\n    return (_rawGasCost * (100 + FAST_TX_FEE)) / 100;\\n}\\n\\nfunction _getRealisedDebt(uint256 _debtToMove) pure returns (uint256) {\\n    return wmul(_debtToMove, ROUTE_1_TOLERANCE);\\n}\\n\\nfunction _checkRouteIndex(uint256 _route, string memory _revertMsg) pure {\\n    require(_route <= 4, _revertMsg);\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToAave(\\n    uint256 _fromVaultId,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToAave(_getFlashLoanRoute(DAI, wDaiToBorrow)),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToCompound(\\n    uint256 _fromVaultId,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToCompound(_getFlashLoanRoute(DAI, wDaiToBorrow)),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToMaker(\\n    uint256 _fromVaultId,\\n    bool _newVault,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToMaker(\\n                _newVault,\\n                _getFlashLoanRoute(DAI, wDaiToBorrow)\\n            ),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrow(\\n    uint256 _wDaiToBorrow,\\n    uint256 _gasCost,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    (uint256 gasCostInDAI, uint256 decimals) =\\n        IOracleAggregator(_oracleAggregator).getExpectedReturnAmount(\\n            _getGelatoExecutorFees(_gasCost),\\n            ETH,\\n            DAI\\n        );\\n\\n    gasCostInDAI = _convertTo18(decimals, gasCostInDAI);\\n\\n    return _wDaiToBorrow + gasCostInDAI + wmul(_wDaiToBorrow, _fees);\\n}\\n\",\"keccak256\":\"0x175aee7c0071ded9d065f293c225c65d8d29253e62e6199119d506c611a1e8d2\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/FCanDoRefinance.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {_isAaveLiquid} from \\\"./aave/FAaveHasLiquidity.sol\\\";\\nimport {_aavePositionWillBeSafe} from \\\"./aave/FAavePositionWillBeSafe.sol\\\";\\nimport {_isDebtAmtDust} from \\\"./maker/FIsDebtAmtDust.sol\\\";\\nimport {_isDebtCeilingReached} from \\\"./maker/FDebtCeilingIsReached.sol\\\";\\nimport {_destVaultWillBeSafe} from \\\"./maker/FDestVaultWillBeSafe.sol\\\";\\nimport {_cTokenHasLiquidity} from \\\"./compound/FCompoundHasLiquidity.sol\\\";\\nimport {\\n    _compoundPositionWillBeSafe\\n} from \\\"./compound/FCompoundPositionWillBeSafe.sol\\\";\\nimport {DebtBridgeInputData} from \\\"../../../structs/SDebtBridge.sol\\\";\\nimport {DAI} from \\\"../../../constants/CTokens.sol\\\";\\nimport {\\n    _getMaxAmtToBorrow,\\n    _getGasCostMakerToAave,\\n    _getGasCostMakerToCompound,\\n    _getGasCostMakerToMaker\\n} from \\\"../FGelatoDebtBridge.sol\\\";\\n\\nfunction _canDoMakerToAaveDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    _data.debtAmt = _getMaxAmtToBorrow(\\n        _data.debtAmt,\\n        _getGasCostMakerToAave(_data.flashRoute),\\n        _data.fees,\\n        _data.oracleAggregator\\n    );\\n    return\\n        _isAaveLiquid(DAI, _data.debtAmt) &&\\n        _aavePositionWillBeSafe(\\n            _data.dsa,\\n            _data.colAmt,\\n            _data.colToken,\\n            _data.debtAmt,\\n            _data.oracleAggregator\\n        );\\n}\\n\\nfunction _canDoMakerToMakerDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    _data.debtAmt = _getMaxAmtToBorrow(\\n        _data.debtAmt,\\n        _getGasCostMakerToMaker(_data.makerDestVaultId == 0, _data.flashRoute),\\n        _data.fees,\\n        _data.oracleAggregator\\n    );\\n    return\\n        !_isDebtAmtDust(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            _data.debtAmt\\n        ) &&\\n        !_isDebtCeilingReached(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            _data.debtAmt\\n        ) &&\\n        _destVaultWillBeSafe(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            _data.colAmt,\\n            _data.debtAmt\\n        );\\n}\\n\\nfunction _canDoMakerToCompoundDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    _data.debtAmt = _getMaxAmtToBorrow(\\n        _data.debtAmt,\\n        _getGasCostMakerToCompound(_data.flashRoute),\\n        _data.fees,\\n        _data.oracleAggregator\\n    );\\n    return\\n        _cTokenHasLiquidity(DAI, _data.debtAmt) &&\\n        _compoundPositionWillBeSafe(\\n            _data.dsa,\\n            _data.colAmt,\\n            DAI,\\n            _data.debtAmt\\n        );\\n}\\n\",\"keccak256\":\"0xfeb332996ecdfecd2ac076897025e06b540134abf20e61b109938cb2c70912a6\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/aave/FAaveHasLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {IERC20} from \\\"../../../../interfaces/dapps/IERC20.sol\\\";\\nimport {\\n    ILendingPoolAddressesProvider\\n} from \\\"../../../../interfaces/dapps/Aave/ILendingPoolAddressesProvider.sol\\\";\\nimport {ILendingPool} from \\\"../../../../interfaces/dapps/Aave/ILendingPool.sol\\\";\\nimport {LENDING_POOL_ADDRESSES_PROVIDER} from \\\"../../../../constants/CAave.sol\\\";\\nimport {\\n    _getRealisedDebt\\n} from \\\"../../../../functions/gelato/FGelatoDebtBridge.sol\\\";\\nimport {_getMakerVaultDebt} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isAaveLiquid(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (bool)\\n{\\n    return\\n        IERC20(_debtToken).balanceOf(\\n            ILendingPool(\\n                ILendingPoolAddressesProvider(LENDING_POOL_ADDRESSES_PROVIDER)\\n                    .getLendingPool()\\n            )\\n                .getReserveData(_debtToken)\\n                .aTokenAddress\\n        ) > _debtAmt;\\n}\\n\",\"keccak256\":\"0xdab0be367444b3277d5945d200dbae6a19b53736c364417a545de30c29ce6ed1\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/aave/FAavePositionWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _getUserData,\\n    _getAssetLiquidationThreshold\\n} from \\\"../../../../functions/dapps/FAave.sol\\\";\\nimport {AaveUserData} from \\\"../../../../structs/SAave.sol\\\";\\nimport {GelatoBytes} from \\\"../../../../lib/GelatoBytes.sol\\\";\\nimport {wdiv, wmul, mul} from \\\"../../../../vendor/DSMath.sol\\\";\\nimport {\\n    IOracleAggregator\\n} from \\\"../../../../interfaces/gelato/IOracleAggregator.sol\\\";\\nimport {ETH, DAI} from \\\"../../../../constants/CTokens.sol\\\";\\nimport {_convertTo18} from \\\"../../../../vendor/Convert.sol\\\";\\n\\nfunction _aavePositionWillBeSafe(\\n    address _dsa,\\n    uint256 _colAmt,\\n    address _colToken,\\n    uint256 _debtAmt,\\n    address _oracleAggregator\\n) view returns (bool) {\\n    uint256 _colAmtInETH;\\n    uint256 _decimals;\\n    IOracleAggregator oracleAggregator = IOracleAggregator(_oracleAggregator);\\n\\n    AaveUserData memory userData = _getUserData(_dsa);\\n\\n    if (_colToken == ETH) _colAmtInETH = _colAmt;\\n    else {\\n        (_colAmtInETH, _decimals) = oracleAggregator.getExpectedReturnAmount(\\n            _colAmt,\\n            _colToken,\\n            ETH\\n        );\\n\\n        _colAmtInETH = _convertTo18(_decimals, _colAmtInETH);\\n    }\\n\\n    (_debtAmt, _decimals) = oracleAggregator.getExpectedReturnAmount(\\n        _debtAmt,\\n        DAI,\\n        ETH\\n    );\\n    _debtAmt = _convertTo18(_decimals, _debtAmt);\\n\\n    //\\n    //                  __\\n    //                  \\\\\\n    //                  /__ (Collateral)i in ETH x (Liquidation Threshold)i\\n    //  HealthFactor =  _________________________________________________\\n    //\\n    //                  Total Borrows in ETH + Total Fees in ETH\\n    //\\n\\n    return\\n        wdiv(\\n            (\\n                (mul(\\n                    userData.currentLiquidationThreshold,\\n                    userData.totalCollateralETH\\n                ) + mul(_colAmtInETH, _getAssetLiquidationThreshold(_colToken)))\\n            ) / 1e4,\\n            userData.totalBorrowsETH + _debtAmt\\n        ) > 1e18;\\n}\\n\",\"keccak256\":\"0x96331066dfa643fef3ebd213c5286b84e2e2a65e796507194cea39f49f4665ac\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/compound/FCompoundHasLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ICToken} from \\\"../../../../interfaces/dapps/Compound/ICToken.sol\\\";\\nimport {_getCToken} from \\\"../../../dapps/FCompound.sol\\\";\\n\\nfunction _cTokenHasLiquidity(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (bool)\\n{\\n    return ICToken(_getCToken(_debtToken)).getCash() > _debtAmt;\\n}\\n\",\"keccak256\":\"0x94ff371cde2624508c316b09e5a5f16efd1315091ec1a6dcd79204e683e2f78c\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/compound/FCompoundPositionWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {DAI} from \\\"../../../../constants/CTokens.sol\\\";\\nimport {\\n    _getCToken,\\n    _wouldCompoundAccountBeLiquid\\n} from \\\"../../../dapps/FCompound.sol\\\";\\n\\nfunction _compoundPositionWillBeSafe(\\n    address _dsa,\\n    uint256 _colAmt,\\n    address _debtToken,\\n    uint256 _debtAmt\\n) view returns (bool) {\\n    return\\n        _wouldCompoundAccountBeLiquid(\\n            _dsa,\\n            _colAmt,\\n            _getCToken(_debtToken),\\n            _debtAmt\\n        );\\n}\\n\",\"keccak256\":\"0x88ec9113308440560945b22168b24404709a70f28b8e639be393d68f8ff6b6ab\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FDebtCeilingIsReached.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _debtCeilingIsReachedNewVault,\\n    _debtCeilingIsReached,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isDebtCeilingReached(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return\\n        _debtCeilingIsReachedExplicit(_destVaultId, _destColType, _daiDebtAmt);\\n}\\n\\nfunction _debtCeilingIsReachedExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _debtCeilingIsReachedNewVault(_destColType, _daiDebtAmt)\\n            : _debtCeilingIsReached(_destVaultId, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x63d4ac5ebf15e2b820f5f8bacbd7856942c56e3f4c758ac72e2c23122f0bb6ad\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FDestVaultWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _vaultWillBeSafe,\\n    _newVaultWillBeSafe,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _destVaultWillBeSafe(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return\\n        _destVaultWillBeSafeExplicit(\\n            _destVaultId,\\n            _destColType,\\n            _colAmt,\\n            _daiDebtAmt\\n        );\\n}\\n\\nfunction _destVaultWillBeSafeExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _newVaultWillBeSafe(_destColType, _colAmt, _daiDebtAmt)\\n            : _vaultWillBeSafe(_destVaultId, _colAmt, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x02d7a4a2ce335b250eb1cbd445f9d76f90d5a183a86b715c0cf943022393dfb4\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FIsDebtAmtDust.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _debtIsDustNewVault,\\n    _debtIsDust,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isDebtAmtDust(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return _isDebtAmtDustExplicit(_destVaultId, _destColType, _daiDebtAmt);\\n}\\n\\nfunction _isDebtAmtDustExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _debtIsDustNewVault(_destColType, _daiDebtAmt)\\n            : _debtIsDust(_destVaultId, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x3fe2e42cc5cf8221731e7f4dd926e973024eb3efab57b4c4568e45ce70765a20\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/IInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n/// @notice Interface InstaDapp Index\\ninterface IndexInterface {\\n    function connectors(uint256 version) external view returns (address);\\n\\n    function list() external view returns (address);\\n}\\n\\n/// @notice Interface InstaDapp List\\ninterface ListInterface {\\n    function accountID(address _account) external view returns (uint64);\\n}\\n\\n/// @notice Interface InstaDapp InstaMemory\\ninterface MemoryInterface {\\n    function setUint(uint256 _id, uint256 _val) external;\\n\\n    function getUint(uint256 _id) external returns (uint256);\\n}\\n\\n/// @notice Interface InstaDapp Defi Smart Account wallet\\ninterface AccountInterface {\\n    function cast(\\n        address[] calldata _targets,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external payable returns (bytes32[] memory responses);\\n\\n    function version() external view returns (uint256);\\n\\n    function isAuth(address user) external view returns (bool);\\n\\n    function shield() external view returns (bool);\\n}\\n\\ninterface ConnectorInterface {\\n    function connectorID() external view returns (uint256 _type, uint256 _id);\\n\\n    function name() external view returns (string memory);\\n}\\n\\ninterface InstaMapping {\\n    function gemJoinMapping(bytes32) external view returns (address);\\n\\n    function cTokenMapping(address) external view returns (address);\\n}\\n\",\"keccak256\":\"0xe0675f18c98f99ac30d284feec4a1de5feb5f85c8d16c1a9e5cddd739dfb34c7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/IInstaFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IInstaFeeCollector {\\n    function setFeeCollector(address payable _feeCollector) external;\\n\\n    function setFee(uint256 _fee) external;\\n\\n    function fee() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address payable);\\n}\\n\",\"keccak256\":\"0xdb768ade8f511ae26c9de55b9373ad8b4eb8c99ab07a4bf097bfc8f25daa35b6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/connectors/IConnectGelatoDataMakerToAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IConnectGelatoDataMakerToAave {\\n    function getDataAndCastMakerToAave(uint256 _vaultId, address _colToken)\\n        external\\n        payable;\\n}\\n\",\"keccak256\":\"0x537201c02d0202cc9142962bd15ed57ae779aeff4a9bd62ffd58f84da326f761\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/connectors/IConnectGelatoDataMakerToCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IConnectGelatoDataMakerToCompound {\\n    function getDataAndCastMakerToCompound(uint256 _vaultId, address _colToken)\\n        external\\n        payable;\\n}\\n\",\"keccak256\":\"0x44c316741c63f25f9a435c5323d5d1e0fcafaafe3ae67dfd46b9eb4ccbb0d9f9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/connectors/IConnectGelatoDataMakerToMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IConnectGelatoDataMakerToMaker {\\n    function getDataAndCastMakerToMaker(\\n        uint256 _vaultAId,\\n        uint256 _vaultBId,\\n        string calldata _colType,\\n        address _colToken\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xdac538c2f2d47cc5776057b55260d7af2cc3fa917d61beff2dcb0497eb15830e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/resolvers/IInstaPoolResolver.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity 0.8.0;\\n\\ninterface IInstaPoolResolver {\\n    struct RouteData {\\n        uint256 dydx;\\n        uint256 maker;\\n        uint256 compound;\\n        uint256 aave;\\n    }\\n\\n    function getTokenLimit(address token)\\n        external\\n        view\\n        returns (RouteData memory);\\n}\\n\",\"keccak256\":\"0xd1e148a8c7d84f528397ac90a23160bfa04df6ad1ec990a2447ddb5ae069dac0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ChainLinkInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ChainLinkInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa28e7bfd15b9353039c764d8203adc9fc066a32db1da3351f10eed6af70c57ad\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/IAaveProtocolDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IAaveProtocolDataProvider {\\n    function getUserReserveData(address asset, address user)\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n}\\n\",\"keccak256\":\"0x8444e5bce4ff4a8715f095a931605e9765bffe3cb206bdf33f4e849cfab85735\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ReserveData} from \\\"../../../structs/SAave.sol\\\";\\n\\ninterface ILendingPool {\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (ReserveData memory);\\n\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function getReservesList() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x1215c59b3edc74953de7c551ee7de24aa00bebf0529f523dea6c99cb1faf5c1b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ILendingPoolAddressesProvider {\\n    function getLendingPool() external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4966d8f93cd89d770c8c5255aa0c266cb7df36adba5b195d0fd5d97960df8f02\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ICToken {\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCash() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x47be032b0dfd57cc06f58eb23c9cb8ec5aeaaee4abd3f620bd0260349e2251c5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ICToken} from \\\"./ICToken.sol\\\";\\nimport {Market} from \\\"../../../structs/SCompound.sol\\\";\\n\\ninterface IComptroller {\\n    function getAssetsIn(address account)\\n        external\\n        view\\n        returns (ICToken[] memory);\\n\\n    function oracle() external view returns (address);\\n\\n    function markets(address cToken)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isComped\\n        );\\n}\\n\",\"keccak256\":\"0x83078bc37abc76900f2db14752e9637c812d6e1798335f4ec7b257c4d0aaaa50\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ICToken} from \\\"./ICToken.sol\\\";\\n\\ninterface IPriceOracle {\\n    function getUnderlyingPrice(ICToken cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa6042bacdf286c327a2fcaa322cbbaa85b6f1407b772f2b5785b58917f6695e9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd0fbf10a1342de2706ae8dd1881ffe09c7bc1f7a3ee93b39a3b5c4acebf24487\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/IMcdManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IMcdManager {\\n    function ilks(uint256) external view returns (bytes32);\\n\\n    function urns(uint256) external view returns (address);\\n\\n    function vat() external view returns (address);\\n\\n    function owns(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x600c309dbdb47e7fb5b5b135e174c5af0fd80a583cc92e9db15868626ea13944\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/ITokenJoinInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ITokenJoinInterface {\\n    function dec() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a73dd7b495b10a6405595d2a72749940cbe62610ea1b4d7ec02f815bf4ed4d6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/IVat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IVat {\\n    function ilks(bytes32)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function dai(address) external view returns (uint256);\\n\\n    function urns(bytes32, address) external view returns (uint256, uint256);\\n\\n    function debt() external view returns (uint256);\\n\\n    // solhint-disable-next-line\\n    function Line() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x562456d1f66878e0dacc113383383c2eb3d4edcb76c9e0ecc04251895f5a453d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/gelato/IGelatoGasPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IGelatoGasPriceOracle {\\n    function latestAnswer() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x5d16f3187c98a910aeb6309f4b5a705237806fba133c7174713a9df7f482cbcb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/gelato/IOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IOracleAggregator {\\n    function getExpectedReturnAmount(\\n        uint256 amountIn,\\n        address inToken,\\n        address outToken\\n    ) external view returns (uint256 returnAmount, uint256 outTokenDecimals);\\n}\\n\",\"keccak256\":\"0xde61cf48c28a17f34bba0327a79af354cff3b92fdbcbe76ea5e0d6b804210b47\",\"license\":\"UNLICENSED\"},\"contracts/lib/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2456950f3849af7457015c291b9a45271ca3497d1c870361878d0f35de41080\",\"license\":\"UNLICENSED\"},\"contracts/structs/SAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// ////////// LendingPool /////////////////\\nstruct AaveUserData {\\n    uint256 totalCollateralETH;\\n    uint256 totalBorrowsETH;\\n    uint256 availableBorrowsETH;\\n    uint256 currentLiquidationThreshold;\\n    uint256 ltv;\\n    uint256 healthFactor;\\n    uint256 ethPriceInUsd;\\n}\\n\\nstruct ReserveConfigurationMap {\\n    uint256 data;\\n}\\n\\nstruct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n}\\n\",\"keccak256\":\"0x10956f70b043a4fdcaa69ceb6d286301ce8da849c0ccd5f5bc83690dab63f843\",\"license\":\"UNLICENSED\"},\"contracts/structs/SCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nstruct AccountLiquidityLocalVars {\\n    uint256 sumCollateral;\\n    uint256 sumBorrowPlusEffects;\\n    uint256 cTokenBalance;\\n    uint256 borrowBalance;\\n    uint256 exchangeRateMantissa;\\n    uint256 oraclePriceMantissa;\\n    uint256 collateralFactor;\\n    uint256 exchangeRate;\\n    uint256 oraclePrice;\\n    uint256 tokensToDenom;\\n}\\n\\nstruct Market {\\n    bool isListed;\\n    uint256 collateralFactorMantissa;\\n    mapping(address => bool) accountMembership;\\n    bool isComped;\\n}\\n\\nstruct CompData {\\n    uint256 tokenPriceInEth;\\n    uint256 tokenPriceInUsd;\\n    uint256 exchangeRateStored;\\n    uint256 balanceOfUser;\\n    uint256 borrowBalanceStoredUser;\\n    uint256 supplyRatePerBlock;\\n    uint256 borrowRatePerBlock;\\n    uint256 collateralFactor;\\n    bool isComped;\\n}\\n\",\"keccak256\":\"0xe8a0f77e7d1cfe283a9a9d356c0f32afb1fef06757e36c84948be9b0a4955927\",\"license\":\"UNLICENSED\"},\"contracts/structs/SDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nstruct DebtBridgeInputData {\\n    address dsa;\\n    uint256 colAmt;\\n    address colToken;\\n    uint256 debtAmt;\\n    address oracleAggregator;\\n    uint256 makerDestVaultId;\\n    string makerDestColType;\\n    uint256 fees;\\n    uint256 flashRoute;\\n}\\n\",\"keccak256\":\"0xec7b95278e03209f89a8c95b53b15d1c3faad51fd733b1f1b3d4d1a36ebd3bdd\",\"license\":\"UNLICENSED\"},\"contracts/vendor/Convert.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {mul as _mul} from \\\"./DSMath.sol\\\";\\n\\nfunction _stringToBytes32(string memory str) pure returns (bytes32 result) {\\n    require(bytes(str).length != 0, \\\"string-empty\\\");\\n    assembly {\\n        result := mload(add(str, 32))\\n    }\\n}\\n\\nfunction _convertTo18(uint256 _dec, uint256 _amt) pure returns (uint256 amt) {\\n    amt = _mul(_amt, 10**(18 - _dec));\\n}\\n\",\"keccak256\":\"0xba31db6ad3b69599bc5a6d8dc27f39fa6795f671af2f69fcd747983c01b799ce\",\"license\":\"UNLICENSED\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: AGPL-3.0-or-later\\\"\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.0;\\n\\nfunction add(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n}\\n\\nfunction sub(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n}\\n\\nfunction mul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n}\\n\\nfunction min(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction max(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nfunction imin(int256 x, int256 y) pure returns (int256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction imax(int256 x, int256 y) pure returns (int256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nuint256 constant WAD = 10**18;\\nuint256 constant RAY = 10**27;\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), WAD / 2) / WAD;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction rmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), RAY / 2) / RAY;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, WAD), y / 2) / y;\\n}\\n\\n//rounds to zero if x*y < RAY / 2\\nfunction rdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, RAY), y / 2) / y;\\n}\\n\\n// This famous algorithm is called \\\"exponentiation by squaring\\\"\\n// and calculates x^n with x as fixed-point and n as regular unsigned.\\n//\\n// It's O(log n), instead of O(n) for naive repeated multiplication.\\n//\\n// These facts are why it works:\\n//\\n//  If n is even, then x^n = (x^2)^(n/2).\\n//  If n is odd,  then x^n = x * x^(n-1),\\n//   and applying the equation for even x gives\\n//    x^n = x * (x^2)^((n-1) / 2).\\n//\\n//  Also, EVM division is flooring and\\n//    floor[(n-1) / 2] = floor[n / 2].\\n//\\nfunction rpow(uint256 x, uint256 n) pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n        x = rmul(x, x);\\n\\n        if (n % 2 != 0) {\\n            z = rmul(z, x);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d7cc87f9c74e3c8d9cfe196e0bdd657f2c4c0fbb588db8cb941066e859ed60a\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b506040516200602f3803806200602f83398181016040528101906200003891906200018f565b85608081815250508473ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508373ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508273ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050505050505062000297565b600081519050620001728162000263565b92915050565b60008151905062000189816200027d565b92915050565b60008060008060008060c08789031215620001a957600080fd5b6000620001b989828a0162000178565b9650506020620001cc89828a0162000161565b9550506040620001df89828a0162000161565b9450506060620001f289828a0162000161565b93505060806200020589828a0162000161565b92505060a06200021889828a0162000161565b9150509295509295509295565b6000620002328262000239565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200026e8162000225565b81146200027a57600080fd5b50565b620002888162000259565b81146200029457600080fd5b50565b60805160a05160601c60c05160601c60e05160601c6101005160601c6101205160601c615d32620002fd6000396000610e6f01526000610d7c01526000610c1a0152600061027c01526000818161019b01526102340152600061039a0152615d326000f3fe6080604052600436106100555760003560e01c806306fdde031461005a5780638dffe3f414610085578063ad830c1c146100b0578063d48fe280146100cc578063eb15f781146100f7578063eb9e712614610123575b600080fd5b34801561006657600080fd5b5061006f610160565b60405161007c9190615186565b60405180910390f35b34801561009157600080fd5b5061009a610199565b6040516100a791906150c7565b60405180910390f35b6100ca60048036038101906100c59190614721565b6101bd565b005b3480156100d857600080fd5b506100e161035a565b6040516100ee9190615186565b60405180910390f35b34801561010357600080fd5b5061010c610393565b60405161011a929190615383565b60405180910390f35b34801561012f57600080fd5b5061014a6004803603810190610145919061467a565b6103c5565b6040516101579190615186565b60405180910390f35b6040518060400160405280601e81526020017f436f6e6e65637447656c61746f446174614d616b6572546f582d76312e30000081525081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006101d06101cb8661048a565b610754565b905060008061034387876040518061012001604052803073ffffffffffffffffffffffffffffffffffffffff16815260200161020b8c61076f565b81526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018781526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018881526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e057600080fd5b505afa1580156102f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103189190614651565b815260200161033b736b175474e89094c44da98b954eedeac495271d0f896108b8565b8152506109f3565b915091506103518282610f5c565b50505050505050565b6040518060400160405280600281526020017f4f4b00000000000000000000000000000000000000000000000000000000000081525081565b60008060017f000000000000000000000000000000000000000000000000000000000000000080925081935050509091565b6060600086866004906024926103dd93929190615545565b8101906103ea9190614628565b9050600081141561041657604051806060016040528060368152602001615c536036913991505061047f565b610420818961109c565b61044557604051806060016040528060378152602001615cc66037913991505061047f565b6040518060400160405280600281526020017f4f4b0000000000000000000000000000000000000000000000000000000000008152509150505b979650505050505050565b600080735ef30b9986345249bc32d8928b7ee64de9435e3990506000806104b1838661122c565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156104fd57600080fd5b505afa158015610511573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053591906144ca565b905060008173ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b81526004016105729190615127565b60a06040518083038186803b15801561058a57600080fd5b505afa15801561059e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c2919061483b565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff16632424be5c86866040518363ffffffff1660e01b8152600401610605929190615142565b604080518083038186803b15801561061c57600080fd5b505afa158015610630573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610654919061479c565b91505060008373ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b815260040161069291906150c7565b60206040518083038186803b1580156106aa57600080fd5b505afa1580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e29190614651565b905060006106f96106f3848661134c565b836113b9565b90506b033b2e3c9fd0803ce80000008161071391906155ce565b98508061072c8a6b033b2e3c9fd0803ce800000061134c565b106107375788610745565b6001896107449190615578565b5b98505050505050505050919050565b600061076882670df27a2cdf448000611412565b9050919050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d157600080fd5b505afa1580156107e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080991906144ca565b9050600080610818848761122c565b9150915060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c84846040518363ffffffff1660e01b8152600401610859929190615142565b604080518083038186803b15801561087057600080fd5b505afa158015610884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a8919061479c565b5090508095505050505050919050565b60008073a004a5afba04b74037e9e52ba1f7eb02b5e6150973ffffffffffffffffffffffffffffffffffffffff16635a860c87856040518263ffffffff1660e01b815260040161090891906150c7565b60806040518083038186803b15801561092057600080fd5b505afa158015610934573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095891906145ff565b905082816000015111156109705760009150506109ed565b82816020015111156109865760019150506109ed565b828160400151111561099c5760029150506109ed565b82816060015111156109b25760039150506109ed565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e4906152e8565b60405180910390fd5b92915050565b6060806000610a0184611456565b9050600380811115610a3c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816003811115610a75577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610ab6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aad906151c8565b60405180910390fd5b600167ffffffffffffffff811115610af7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610b255781602001602082028036833780820191505090505b509250600167ffffffffffffffff811115610b69577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610b9c57816020015b6060815260200190600190039081610b875790505b50915060006003811115610bd9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816003811115610c12577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610d01577f000000000000000000000000000000000000000000000000000000000000000083600081518110610c73577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610cb786866114a7565b82600081518110610cf1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250610f53565b60016003811115610d3b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816003811115610d74577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610e6d577f000000000000000000000000000000000000000000000000000000000000000083600081518110610dd5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610e23868560a001518660c0015188611529565b82600081518110610e5d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250610f52565b7f000000000000000000000000000000000000000000000000000000000000000083600081518110610ec8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610f0c86866115b1565b82600081518110610f46577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052505b5b50935093915050565b600063e0e90acf60e01b838333604051602401610f7b939291906150e2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000803073ffffffffffffffffffffffffffffffffffffffff16836040516110029190615026565b600060405180830381855af49150503d806000811461103d576040519150601f19603f3d011682016040523d82523d6000602084013e611042565b606091505b509150915081611095576110946040518060400160405280602081526020017f436f6e6e65637447656c61746f446174614d616b6572546f582e5f636173743a8152508261163390919063ffffffff16565b5b5050505050565b6000808314156110af5760009050611226565b735ef30b9986345249bc32d8928b7ee64de9435e3973ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b81526004016110fc9190615308565b60206040518083038186803b15801561111457600080fd5b505afa92505050801561114557506040513d601f19601f8201168201806040525081019061114291906144ca565b60015b6111f357611151615a3e565b8061115c57506111b8565b8060405160200161116d91906150a5565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111af9190615186565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ea90615268565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16149150505b92915050565b6000808373ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd846040518263ffffffff1660e01b81526004016112689190615308565b60206040518083038186803b15801561128057600080fd5b505afa158015611294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b89190614583565b91508373ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b81526004016112f39190615308565b60206040518083038186803b15801561130b57600080fd5b505afa15801561131f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134391906144ca565b90509250929050565b6000808214806113745750828283856113659190615770565b92508261137291906155ce565b145b6113b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113aa906151e8565b60405180910390fd5b92915050565b60008282846113c891906157ca565b915081111561140c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611403906151a8565b60405180910390fd5b92915050565b6000670de0b6b3a764000061144461142a858561134c565b6002670de0b6b3a764000061143f91906155ce565b61179c565b61144e91906155ce565b905092915050565b6000611461826117f5565b1561146f57600090506114a2565b61147882611877565b1561148657600190506114a2565b61148f82611921565b1561149d57600290506114a2565b600390505b919050565b6060639ae4bca260e01b83836040516024016114c4929190615323565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b606063bf8f75b760e01b8585858560405160240161154a94939291906153ac565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050949350505050565b606063e588576e60e01b83836040516024016115ce929190615323565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b6004602083516116439190615955565b1415611740576000826020015190506308c379a060e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156116e457604483019250818360405160200161169992919061503d565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116db9190615186565b60405180910390fd5b816040516020016116f59190615061565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117379190615186565b60405180910390fd5b806040516020016117519190615083565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117939190615186565b60405180910390fd5b60008282846117ab9190615578565b91508110156117ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e690615228565b60405180910390fd5b92915050565b600061181c826060015161180d8461010001516119ae565b8460e001518560800151611a26565b826060018181525050611847736b175474e89094c44da98b954eedeac495271d0f8360600151611b23565b8015611870575061186f82600001518360200151846040015185606001518660800151611cd6565b5b9050919050565b60006118a6826060015161189760008560a0015114856101000151611f25565b8460e001518560800151611a26565b8260600181815250506118cb82600001518360a001518460c001518560600151611ffc565b1580156118f157506118ef82600001518360a001518460c00151856060015161202c565b155b801561191a575061191982600001518360a001518460c001518560200151866060015161205c565b5b9050919050565b6000611948826060015161193984610100015161208e565b8460e001518560800151611a26565b826060018181525050611973736b175474e89094c44da98b954eedeac495271d0f8360600151612106565b80156119a757506119a682600001518360200151736b175474e89094c44da98b954eedeac495271d0f8560600151612198565b5b9050919050565b60006119d2826040518060600160405280603d8152602001615c89603d91396121b8565b611a1f6119dd612204565b8360048110611a15577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015161223e565b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff16633c772b6c611a508861226c565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee736b175474e89094c44da98b954eedeac495271d0f6040518463ffffffff1660e01b8152600401611a989392919061534c565b604080518083038186803b158015611aaf57600080fd5b505afa158015611ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae7919061479c565b91509150611af58183612286565b9150611b018786611412565b8288611b0d9190615578565b611b179190615578565b92505050949350505050565b6000818373ffffffffffffffffffffffffffffffffffffffff166370a0823173b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b9c57600080fd5b505afa158015611bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd491906144ca565b73ffffffffffffffffffffffffffffffffffffffff166335ea6a75876040518263ffffffff1660e01b8152600401611c0c91906150c7565b6101806040518083038186803b158015611c2557600080fd5b505afa158015611c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5d91906145d5565b60e001516040518263ffffffff1660e01b8152600401611c7d91906150c7565b60206040518083038186803b158015611c9557600080fd5b505afa158015611ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccd9190614651565b11905092915050565b6000806000808490506000611cea8a6122b2565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415611d3c57889350611df1565b8173ffffffffffffffffffffffffffffffffffffffff16633c772b6c8a8a73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6040518463ffffffff1660e01b8152600401611d8d9392919061534c565b604080518083038186803b158015611da457600080fd5b505afa158015611db8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddc919061479c565b8094508195505050611dee8385612286565b93505b8173ffffffffffffffffffffffffffffffffffffffff16633c772b6c88736b175474e89094c44da98b954eedeac495271d0f73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6040518463ffffffff1660e01b8152600401611e569392919061534c565b604080518083038186803b158015611e6d57600080fd5b505afa158015611e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea5919061479c565b8094508198505050611eb78388612286565b9650670de0b6b3a7640000611f15612710611eda87611ed58d612430565b61134c565b611eec8560600151866000015161134c565b611ef69190615578565b611f0091906155ce565b898460200151611f109190615578565b612510565b1194505050505095945050505050565b6000611f49826040518060600160405280603e8152602001615bd4603e91396121b8565b611ff483611f9b57611f5961254c565b8360048110611f91577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151611fef565b62030d40611fa761254c565b8460048110611fdf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151611fee9190615578565b5b61223e565b905092915050565b6000612008848661109c565b612013576000612015565b835b9350612022848484612586565b9050949350505050565b6000612038848661109c565b612043576000612045565b835b93506120528484846125b2565b9050949350505050565b6000612068858761109c565b612073576000612075565b845b9450612083858585856125de565b905095945050505050565b60006120b282604051806080016040528060418152602001615c12604191396121b8565b6120ff6120bd61260d565b83600481106120f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015161223e565b9050919050565b60008161211284612647565b73ffffffffffffffffffffffffffffffffffffffff16633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b15801561215757600080fd5b505afa15801561216b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218f9190614651565b11905092915050565b60006121ae85856121a886612647565b856126ed565b9050949350505050565b600482111581906121ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f69190615186565b60405180910390fd5b505050565b61220c61400a565b60405180608001604052806223fd068152602001622d1e89815260200162339ac88152602001623d7bd8815250905090565b60006064601e60646122509190615578565b8361225b9190615770565b61226591906155ce565b9050919050565b600061227f8261227a6128ee565b61134c565b9050919050565b60006122aa8284601261229991906157ca565b600a6122a59190615652565b61134c565b905092915050565b6122ba61402c565b60008060008060008073b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561231d57600080fd5b505afa158015612331573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235591906144ca565b73ffffffffffffffffffffffffffffffffffffffff1663bf92857c896040518263ffffffff1660e01b815260040161238d91906150c7565b60c06040518083038186803b1580156123a557600080fd5b505afa1580156123b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dd919061498d565b9550955095509550955095506040518060e001604052808781526020018681526020018581526020018481526020018381526020018281526020016124206129cf565b8152509650505050505050919050565b600073057835ad21a177dbdd3090bb1cae03eacf78fc6d73ffffffffffffffffffffffffffffffffffffffff16633e15014161246b84612a68565b6040518263ffffffff1660e01b815260040161248791906150c7565b6101406040518083038186803b1580156124a057600080fd5b505afa1580156124b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d891906148b2565b909192939495969798509091929394959697509091929394955090919293945090919293509091925090915090505080915050919050565b60008161253a61252885670de0b6b3a764000061134c565b60028561253591906155ce565b61179c565b61254491906155ce565b905092915050565b61255461400a565b604051806080016040528062266fd88152602001622feb948152602001623c97b8815260200162424ca8815250905090565b600080841461259e576125998483612ad4565b6125a9565b6125a88383612d6e565b5b90509392505050565b60008084146125ca576125c58483612eda565b6125d5565b6125d4838361320d565b5b90509392505050565b60008085146125f7576125f28584846134ae565b612603565b6126028484846138d4565b5b9050949350505050565b61261561400a565b6040518060800160405280621ef3138152602001622814978152602001622cec41815260200162387070815250905090565b600073e81f70cc7c0d46e12d70efc60607f16bbd617e8873ffffffffffffffffffffffffffffffffffffffff1663104b29e9836040518263ffffffff1660e01b815260040161269691906150c7565b60206040518083038186803b1580156126ae57600080fd5b505afa1580156126c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e691906144ca565b9050919050565b60006126f7614069565b6000733d9819210a31b4961b30ef54be2aed79b9c9cd3b905060008173ffffffffffffffffffffffffffffffffffffffff1663abfceffc896040518263ffffffff1660e01b815260040161274b91906150c7565b60006040518083038186803b15801561276357600080fd5b505afa158015612777573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906127a091906144f3565b905060005b81518110156128835760008282815181106127e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506127fe858b83613b79565b94508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561286f576128488561012001518a8760000151613f01565b856000018181525050612865856101000151888760200151613f01565b8560200181815250505b50808061287b9061590c565b9150506127a5565b506000815114156128d657612899838988613b79565b92506128af836101200151888560000151613f01565b8360000181815250506128cc836101000151868560200151613f01565b8360200181815250505b82602001518360000151119350505050949350505050565b60008073169e633a2d1e6c10dd91238ba11c4a708dfef37c73ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561294b57600080fd5b505afa15801561295f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298391906145ac565b9050600081136129c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129bf90615248565b60405180910390fd5b8091505090565b6000735f4ec3df9cbd43714fe2740f5e3616155c5b841973ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a2b57600080fd5b505afa158015612a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6391906145ac565b905090565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612ab75781612acd565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b9050919050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015612b3657600080fd5b505afa158015612b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6e91906144ca565b9050600080612b7d848861122c565b9150915060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c84846040518363ffffffff1660e01b8152600401612bbe929190615142565b604080518083038186803b158015612bd557600080fd5b505afa158015612be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0d919061479c565b9150506000808573ffffffffffffffffffffffffffffffffffffffff1663d9638d36866040518263ffffffff1660e01b8152600401612c4c9190615127565b60a06040518083038186803b158015612c6457600080fd5b505afa158015612c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9c919061483b565b9450505092505060008673ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b8152600401612cde91906150c7565b60206040518083038186803b158015612cf657600080fd5b505afa158015612d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2e9190614651565b90506000612d3d8b8386613f21565b9050612d49858261179c565b94506000612d57858761134c565b90508381109a505050505050505050505092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015612dd057600080fd5b505afa158015612de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0891906144ca565b90506000612e1586613f91565b90506000808373ffffffffffffffffffffffffffffffffffffffff1663d9638d36846040518263ffffffff1660e01b8152600401612e539190615127565b60a06040518083038186803b158015612e6b57600080fd5b505afa158015612e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea3919061483b565b945050509250506000612eb888600085613f21565b90506000612ec6848361134c565b905082811097505050505050505092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015612f3c57600080fd5b505afa158015612f50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f7491906144ca565b9050600080612f83848861122c565b9150915060008060008573ffffffffffffffffffffffffffffffffffffffff1663d9638d36866040518263ffffffff1660e01b8152600401612fc59190615127565b60a06040518083038186803b158015612fdd57600080fd5b505afa158015612ff1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613015919061483b565b509350509250925060008673ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b815260040161305891906150c7565b60206040518083038186803b15801561307057600080fd5b505afa158015613084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a89190614651565b905060008773ffffffffffffffffffffffffffffffffffffffff1663babe8a3f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156130f257600080fd5b505afa158015613106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312a9190614651565b905060008873ffffffffffffffffffffffffffffffffffffffff16630dca59c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561317457600080fd5b505afa158015613188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ac9190614651565b905060006131bb8d8588613f21565b905060006131c9878361134c565b90506131d5838261179c565b92506131e1888361179c565b9750856131ee898961134c565b11806131f957508383115b9c5050505050505050505050505092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561326f57600080fd5b505afa158015613283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132a791906144ca565b905060006132b486613f91565b905060008060008473ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b81526004016132f49190615127565b60a06040518083038186803b15801561330c57600080fd5b505afa158015613320573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613344919061483b565b509350509250925060008573ffffffffffffffffffffffffffffffffffffffff1663babe8a3f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561339457600080fd5b505afa1580156133a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133cc9190614651565b905060008673ffffffffffffffffffffffffffffffffffffffff16630dca59c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561341657600080fd5b505afa15801561342a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344e9190614651565b9050600061345e8b600087613f21565b9050600061346c868361134c565b9050613478838261179c565b9250613484878361179c565b965084613491888861134c565b118061349c57508383115b9a505050505050505050505092915050565b6000808414156134f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134ea90615288565b60405180910390fd5b6000735ef30b9986345249bc32d8928b7ee64de9435e399050600080613519838861122c565b91509150600073e81f70cc7c0d46e12d70efc60607f16bbd617e8873ffffffffffffffffffffffffffffffffffffffff16634445d799846040518263ffffffff1660e01b815260040161356c9190615127565b60206040518083038186803b15801561358457600080fd5b505afa158015613598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135bc91906144ca565b905060008473ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561360657600080fd5b505afa15801561361a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061363e91906144ca565b90506000808273ffffffffffffffffffffffffffffffffffffffff1663d9638d36876040518263ffffffff1660e01b815260040161367c9190615127565b60a06040518083038186803b15801561369457600080fd5b505afa1580156136a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136cc919061483b565b505092509250506000808473ffffffffffffffffffffffffffffffffffffffff16632424be5c89896040518363ffffffff1660e01b8152600401613711929190615142565b604080518083038186803b15801561372857600080fd5b505afa15801561373c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613760919061479c565b9150915060008573ffffffffffffffffffffffffffffffffffffffff16636c25b346896040518263ffffffff1660e01b815260040161379f91906150c7565b60206040518083038186803b1580156137b757600080fd5b505afa1580156137cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ef9190614651565b9050600061387a8873ffffffffffffffffffffffffffffffffffffffff1663b3bcfa826040518163ffffffff1660e01b815260040160206040518083038186803b15801561383c57600080fd5b505afa158015613850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138749190614651565b8f612286565b905060006138898e8489613f21565b9050613895858361179c565b94506138a1848261179c565b935060006138af888661134c565b90506138bb868861134c565b8111159d50505050505050505050505050509392505050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561393657600080fd5b505afa15801561394a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061396e91906144ca565b9050600061397b87613f91565b90506000808373ffffffffffffffffffffffffffffffffffffffff1663d9638d36846040518263ffffffff1660e01b81526004016139b99190615127565b60a06040518083038186803b1580156139d157600080fd5b505afa1580156139e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a09919061483b565b50509250925050600073e81f70cc7c0d46e12d70efc60607f16bbd617e8873ffffffffffffffffffffffffffffffffffffffff16634445d799856040518263ffffffff1660e01b8152600401613a5f9190615127565b60206040518083038186803b158015613a7757600080fd5b505afa158015613a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aaf91906144ca565b90506000613b3a8273ffffffffffffffffffffffffffffffffffffffff1663b3bcfa826040518163ffffffff1660e01b815260040160206040518083038186803b158015613afc57600080fd5b505afa158015613b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b349190614651565b8b612286565b90506000613b4a8a600087613f21565b90506000613b58868361134c565b9050613b64838661134c565b81111599505050505050505050509392505050565b613b81614069565b600080733d9819210a31b4961b30ef54be2aed79b9c9cd3b90508373ffffffffffffffffffffffffffffffffffffffff1663c37f68e2866040518263ffffffff1660e01b8152600401613bd491906150c7565b60806040518083038186803b158015613bec57600080fd5b505afa158015613c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c2491906147d8565b896040018a6060018b60e0018381525083815250838152508395505050505060008214613c86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c7d90615208565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16638e8f294b856040518263ffffffff1660e01b8152600401613cbf91906150c7565b60606040518083038186803b158015613cd757600080fd5b505afa158015613ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d0f9190614534565b909150508660c0018181525050733d9819210a31b4961b30ef54be2aed79b9c9cd3b73ffffffffffffffffffffffffffffffffffffffff16637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015613d7657600080fd5b505afa158015613d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dae91906144ca565b73ffffffffffffffffffffffffffffffffffffffff1663fc57d4df856040518263ffffffff1660e01b8152600401613de6919061516b565b60206040518083038186803b158015613dfe57600080fd5b505afa158015613e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e369190614651565b8661010001818152505060008661010001511415613e89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e80906152c8565b60405180910390fd5b613ea9613e9e8760c001518860e00151613fe3565b876101000151613fe3565b86610120018181525050613ecb86610120015187604001518860000151613f01565b866000018181525050613eec86610100015187606001518860200151613f01565b86602001818152505085925050509392505050565b600081613f0e8585613fe3565b613f189190615578565b90509392505050565b600081613f43613f3d866b033b2e3c9fd0803ce800000061134c565b856113b9565b613f4d91906155ce565b9050613f65846b033b2e3c9fd0803ce800000061134c565b613f6f828461134c565b10613f7a5780613f88565b600181613f879190615578565b5b90509392505050565b60008082511415613fd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613fce906152a8565b60405180910390fd5b60208201519050919050565b6000670de0b6b3a7640000613ff8848461134c565b61400291906155ce565b905092915050565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006140cf6140ca84615429565b6153f8565b905080838252602082019050828560208602820111156140ee57600080fd5b60005b8581101561411e5781614104888261422e565b8452602084019350602083019250506001810190506140f1565b5050509392505050565b600061413b61413684615455565b6153f8565b90508281526020810184848401111561415357600080fd5b61415e8482856158ca565b509392505050565b60008135905061417581615af4565b92915050565b60008151905061418a81615af4565b92915050565b600082601f8301126141a157600080fd5b81516141b18482602086016140bc565b91505092915050565b6000815190506141c981615b0b565b92915050565b6000815190506141de81615b22565b92915050565b60008083601f8401126141f657600080fd5b8235905067ffffffffffffffff81111561420f57600080fd5b60208301915083600182028301111561422757600080fd5b9250929050565b60008151905061423d81615b39565b92915050565b60008135905061425281615b50565b92915050565b60008151905061426781615b60565b92915050565b600082601f83011261427e57600080fd5b813561428e848260208601614128565b91505092915050565b6000602082840312156142a957600080fd5b6142b360206153f8565b905060006142c38482850161448b565b60008301525092915050565b600061018082840312156142e257600080fd5b6142ed6101806153f8565b905060006142fd84828501614297565b600083015250602061431184828501614461565b602083015250604061432584828501614461565b604083015250606061433984828501614461565b606083015250608061434d84828501614461565b60808301525060a061436184828501614461565b60a08301525060c0614375848285016144a0565b60c08301525060e06143898482850161417b565b60e08301525061010061439e8482850161417b565b610100830152506101206143b48482850161417b565b610120830152506101406143ca8482850161417b565b610140830152506101606143e0848285016144b5565b6101608301525092915050565b6000608082840312156143ff57600080fd5b61440960806153f8565b905060006144198482850161448b565b600083015250602061442d8482850161448b565b60208301525060406144418482850161448b565b60408301525060606144558482850161448b565b60608301525092915050565b60008151905061447081615b77565b92915050565b60008135905061448581615b8e565b92915050565b60008151905061449a81615b8e565b92915050565b6000815190506144af81615ba5565b92915050565b6000815190506144c481615bbc565b92915050565b6000602082840312156144dc57600080fd5b60006144ea8482850161417b565b91505092915050565b60006020828403121561450557600080fd5b600082015167ffffffffffffffff81111561451f57600080fd5b61452b84828501614190565b91505092915050565b60008060006060848603121561454957600080fd5b6000614557868287016141ba565b93505060206145688682870161448b565b9250506040614579868287016141ba565b9150509250925092565b60006020828403121561459557600080fd5b60006145a3848285016141cf565b91505092915050565b6000602082840312156145be57600080fd5b60006145cc84828501614258565b91505092915050565b600061018082840312156145e857600080fd5b60006145f6848285016142cf565b91505092915050565b60006080828403121561461157600080fd5b600061461f848285016143ed565b91505092915050565b60006020828403121561463a57600080fd5b600061464884828501614476565b91505092915050565b60006020828403121561466357600080fd5b60006146718482850161448b565b91505092915050565b600080600080600080600060c0888a03121561469557600080fd5b60006146a38a828b01614476565b97505060206146b48a828b01614166565b965050604088013567ffffffffffffffff8111156146d157600080fd5b6146dd8a828b016141e4565b955095505060606146f08a828b01614243565b93505060806147018a828b01614476565b92505060a06147128a828b01614476565b91505092959891949750929550565b6000806000806080858703121561473757600080fd5b600061474587828801614476565b945050602061475687828801614166565b935050604061476787828801614476565b925050606085013567ffffffffffffffff81111561478457600080fd5b6147908782880161426d565b91505092959194509250565b600080604083850312156147af57600080fd5b60006147bd8582860161448b565b92505060206147ce8582860161448b565b9150509250929050565b600080600080608085870312156147ee57600080fd5b60006147fc8782880161448b565b945050602061480d8782880161448b565b935050604061481e8782880161448b565b925050606061482f8782880161448b565b91505092959194509250565b600080600080600060a0868803121561485357600080fd5b60006148618882890161448b565b95505060206148728882890161448b565b94505060406148838882890161448b565b93505060606148948882890161448b565b92505060806148a58882890161448b565b9150509295509295909350565b6000806000806000806000806000806101408b8d0312156148d257600080fd5b60006148e08d828e0161448b565b9a505060206148f18d828e0161448b565b99505060406149028d828e0161448b565b98505060606149138d828e0161448b565b97505060806149248d828e0161448b565b96505060a06149358d828e016141ba565b95505060c06149468d828e016141ba565b94505060e06149578d828e016141ba565b9350506101006149698d828e016141ba565b92505061012061497b8d828e016141ba565b9150509295989b9194979a5092959850565b60008060008060008060c087890312156149a657600080fd5b60006149b489828a0161448b565b96505060206149c589828a0161448b565b95505060406149d689828a0161448b565b94505060606149e789828a0161448b565b93505060806149f889828a0161448b565b92505060a0614a0989828a0161448b565b9150509295509295509295565b6000614a228383614a42565b60208301905092915050565b6000614a3a8383614b42565b905092915050565b614a4b816157fe565b82525050565b614a5a816157fe565b82525050565b6000614a6b826154a5565b614a7581856154eb565b9350614a8083615485565b8060005b83811015614ab1578151614a988882614a16565b9750614aa3836154d1565b925050600181019050614a84565b5085935050505092915050565b6000614ac9826154b0565b614ad381856154fc565b935083602082028501614ae585615495565b8060005b85811015614b215784840389528151614b028582614a2e565b9450614b0d836154de565b925060208a01995050600181019050614ae9565b50829750879550505050505092915050565b614b3c8161581c565b82525050565b6000614b4d826154bb565b614b57818561550d565b9350614b678185602086016158d9565b614b7081615a13565b840191505092915050565b6000614b86826154bb565b614b90818561551e565b9350614ba08185602086016158d9565b80840191505092915050565b614bb5816158a6565b82525050565b6000614bc6826154c6565b614bd08185615529565b9350614be08185602086016158d9565b614be981615a13565b840191505092915050565b6000614bff826154c6565b614c09818561553a565b9350614c198185602086016158d9565b80840191505092915050565b6000614c32601583615529565b91507f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006000830152602082019050919050565b6000614c72603783615529565b91507f436f6e6e65637447656c61746f446174614d616b6572546f582e5f646174614660008301527f726f6d4d616b65723a2050524f544f434f4c2e4e4f4e450000000000000000006020830152604082019050919050565b6000614cd8601483615529565b91507f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000614d18602a83615529565b91507f5f67657441737365744c69717569646974793a2073656d692d6f70617175652060008301527f6572726f7220636f6465000000000000000000000000000000000000000000006020830152604082019050919050565b6000614d7e601483615529565b91507f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000614dbe600f8361553a565b91507f4e6f4572726f7253656c6563746f7200000000000000000000000000000000006000830152600f82019050919050565b6000614dfe601b83615529565b91507f5f67657447656c61746f47617350726963653a306f7242656c6f7700000000006000830152602082019050919050565b6000614e3e60158361553a565b91507f464d616b65722e5f69735661756c744f776e65723a00000000000000000000006000830152601582019050919050565b6000614e7e601e83615529565b91507f464d616b65722e5f69735661756c744f776e65723a756e646566696e656400006000830152602082019050919050565b6000614ebe602383615529565b91507f5f7661756c7457696c6c4265536166653a20696e76616c6964207661756c742060008301527f69642e00000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614f24600c83615529565b91507f737472696e672d656d70747900000000000000000000000000000000000000006000830152602082019050919050565b6000614f64600083615529565b9150600082019050919050565b6000614f7e602e83615529565b91507f4647656c61746f446562744272696467652e5f676574466c6173684c6f616e5260008301527f6f7574653a20696c6c69717569640000000000000000000000000000000000006020830152604082019050919050565b6000614fe460148361553a565b91507f556e657870656374656452657475726e646174610000000000000000000000006000830152601482019050919050565b6150208161587e565b82525050565b60006150328284614b7b565b915081905092915050565b60006150498285614bf4565b91506150558284614bf4565b91508190509392505050565b600061506d8284614bf4565b915061507882614db1565b915081905092915050565b600061508f8284614bf4565b915061509a82614fd7565b915081905092915050565b60006150b082614e31565b91506150bc8284614bf4565b915081905092915050565b60006020820190506150dc6000830184614a51565b92915050565b600060608201905081810360008301526150fc8186614a60565b905081810360208301526151108185614abe565b905061511f6040830184614a51565b949350505050565b600060208201905061513c6000830184614b33565b92915050565b60006040820190506151576000830185614b33565b6151646020830184614a51565b9392505050565b60006020820190506151806000830184614bac565b92915050565b600060208201905081810360008301526151a08184614bbb565b905092915050565b600060208201905081810360008301526151c181614c25565b9050919050565b600060208201905081810360008301526151e181614c65565b9050919050565b6000602082019050818103600083015261520181614ccb565b9050919050565b6000602082019050818103600083015261522181614d0b565b9050919050565b6000602082019050818103600083015261524181614d71565b9050919050565b6000602082019050818103600083015261526181614df1565b9050919050565b6000602082019050818103600083015261528181614e71565b9050919050565b600060208201905081810360008301526152a181614eb1565b9050919050565b600060208201905081810360008301526152c181614f17565b9050919050565b600060208201905081810360008301526152e181614f57565b9050919050565b6000602082019050818103600083015261530181614f71565b9050919050565b600060208201905061531d6000830184615017565b92915050565b60006040820190506153386000830185615017565b6153456020830184614a51565b9392505050565b60006060820190506153616000830186615017565b61536e6020830185614a51565b61537b6040830184614a51565b949350505050565b60006040820190506153986000830185615017565b6153a56020830184615017565b9392505050565b60006080820190506153c16000830187615017565b6153ce6020830186615017565b81810360408301526153e08185614bbb565b90506153ef6060830184614a51565b95945050505050565b6000604051905081810181811067ffffffffffffffff8211171561541f5761541e6159e4565b5b8060405250919050565b600067ffffffffffffffff821115615444576154436159e4565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156154705761546f6159e4565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000808585111561555557600080fd5b8386111561556257600080fd5b6001850283019150848603905094509492505050565b60006155838261587e565b915061558e8361587e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156155c3576155c2615986565b5b828201905092915050565b60006155d98261587e565b91506155e48361587e565b9250826155f4576155f36159b5565b5b828204905092915050565b6000808291508390505b60018511156156495780860481111561562557615624615986565b5b60018516156156345780820291505b808102905061564285615a24565b9450615609565b94509492505050565b600061565d8261587e565b91506156688361587e565b92506156957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461569d565b905092915050565b6000826156ad5760019050615769565b816156bb5760009050615769565b81600181146156d157600281146156db5761570a565b6001915050615769565b60ff8411156156ed576156ec615986565b5b8360020a91508482111561570457615703615986565b5b50615769565b5060208310610133831016604e8410600b841016171561573f5782820a90508381111561573a57615739615986565b5b615769565b61574c84848460016155ff565b9250905081840481111561576357615762615986565b5b81810290505b9392505050565b600061577b8261587e565b91506157868361587e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156157bf576157be615986565b5b828202905092915050565b60006157d58261587e565b91506157e08361587e565b9250828210156157f3576157f2615986565b5b828203905092915050565b60006158098261585e565b9050919050565b60008115159050919050565b6000819050919050565b6000615831826157fe565b9050919050565b6000819050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600064ffffffffff82169050919050565b600060ff82169050919050565b60006158b1826158b8565b9050919050565b60006158c38261585e565b9050919050565b82818337600083830152505050565b60005b838110156158f75780820151818401526020810190506158dc565b83811115615906576000848401525b50505050565b60006159178261587e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561594a57615949615986565b5b600182019050919050565b60006159608261587e565b915061596b8361587e565b92508261597b5761597a6159b5565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b60008160e01c9050919050565b600060443d1015615a4e57615af1565b60046000803e615a5f600051615a31565b6308c379a08114615a705750615af1565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715615a9c57505050615af1565b808201805167ffffffffffffffff811115615abb575050505050615af1565b8060208301013d8501811115615ad657505050505050615af1565b615adf82615a13565b60208401016040528296505050505050505b90565b615afd816157fe565b8114615b0857600080fd5b50565b615b1481615810565b8114615b1f57600080fd5b50565b615b2b8161581c565b8114615b3657600080fd5b50565b615b4281615826565b8114615b4d57600080fd5b50565b60048110615b5d57600080fd5b50565b615b6981615838565b8114615b7457600080fd5b50565b615b8081615842565b8114615b8b57600080fd5b50565b615b978161587e565b8114615ba257600080fd5b50565b615bae81615888565b8114615bb957600080fd5b50565b615bc581615899565b8114615bd057600080fd5b5056fe4647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f4d616b65723a20696e76616c696420726f75746520696e6465784647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f436f6d706f756e643a20696e76616c696420726f75746520696e646578436f6e6e65637447656c61746f446174614d616b6572546f4d616b65723a205661756c742041204964206973206e6f742076616c69644647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f416176653a20696e76616c696420726f75746520696e646578436f6e6e65637447656c61746f446174614d616b6572546f4d616b65723a205661756c742041206e6f74206f776e656420627920647361a26469706673582212204952999ee19e3964344d8c916c4c7f1106bc2bf1ee1750ea5bea24fa800d42f164736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c806306fdde031461005a5780638dffe3f414610085578063ad830c1c146100b0578063d48fe280146100cc578063eb15f781146100f7578063eb9e712614610123575b600080fd5b34801561006657600080fd5b5061006f610160565b60405161007c9190615186565b60405180910390f35b34801561009157600080fd5b5061009a610199565b6040516100a791906150c7565b60405180910390f35b6100ca60048036038101906100c59190614721565b6101bd565b005b3480156100d857600080fd5b506100e161035a565b6040516100ee9190615186565b60405180910390f35b34801561010357600080fd5b5061010c610393565b60405161011a929190615383565b60405180910390f35b34801561012f57600080fd5b5061014a6004803603810190610145919061467a565b6103c5565b6040516101579190615186565b60405180910390f35b6040518060400160405280601e81526020017f436f6e6e65637447656c61746f446174614d616b6572546f582d76312e30000081525081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006101d06101cb8661048a565b610754565b905060008061034387876040518061012001604052803073ffffffffffffffffffffffffffffffffffffffff16815260200161020b8c61076f565b81526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018781526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018881526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e057600080fd5b505afa1580156102f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103189190614651565b815260200161033b736b175474e89094c44da98b954eedeac495271d0f896108b8565b8152506109f3565b915091506103518282610f5c565b50505050505050565b6040518060400160405280600281526020017f4f4b00000000000000000000000000000000000000000000000000000000000081525081565b60008060017f000000000000000000000000000000000000000000000000000000000000000080925081935050509091565b6060600086866004906024926103dd93929190615545565b8101906103ea9190614628565b9050600081141561041657604051806060016040528060368152602001615c536036913991505061047f565b610420818961109c565b61044557604051806060016040528060378152602001615cc66037913991505061047f565b6040518060400160405280600281526020017f4f4b0000000000000000000000000000000000000000000000000000000000008152509150505b979650505050505050565b600080735ef30b9986345249bc32d8928b7ee64de9435e3990506000806104b1838661122c565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156104fd57600080fd5b505afa158015610511573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053591906144ca565b905060008173ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b81526004016105729190615127565b60a06040518083038186803b15801561058a57600080fd5b505afa15801561059e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c2919061483b565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff16632424be5c86866040518363ffffffff1660e01b8152600401610605929190615142565b604080518083038186803b15801561061c57600080fd5b505afa158015610630573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610654919061479c565b91505060008373ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b815260040161069291906150c7565b60206040518083038186803b1580156106aa57600080fd5b505afa1580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e29190614651565b905060006106f96106f3848661134c565b836113b9565b90506b033b2e3c9fd0803ce80000008161071391906155ce565b98508061072c8a6b033b2e3c9fd0803ce800000061134c565b106107375788610745565b6001896107449190615578565b5b98505050505050505050919050565b600061076882670df27a2cdf448000611412565b9050919050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d157600080fd5b505afa1580156107e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080991906144ca565b9050600080610818848761122c565b9150915060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c84846040518363ffffffff1660e01b8152600401610859929190615142565b604080518083038186803b15801561087057600080fd5b505afa158015610884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a8919061479c565b5090508095505050505050919050565b60008073a004a5afba04b74037e9e52ba1f7eb02b5e6150973ffffffffffffffffffffffffffffffffffffffff16635a860c87856040518263ffffffff1660e01b815260040161090891906150c7565b60806040518083038186803b15801561092057600080fd5b505afa158015610934573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095891906145ff565b905082816000015111156109705760009150506109ed565b82816020015111156109865760019150506109ed565b828160400151111561099c5760029150506109ed565b82816060015111156109b25760039150506109ed565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e4906152e8565b60405180910390fd5b92915050565b6060806000610a0184611456565b9050600380811115610a3c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816003811115610a75577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610ab6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aad906151c8565b60405180910390fd5b600167ffffffffffffffff811115610af7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610b255781602001602082028036833780820191505090505b509250600167ffffffffffffffff811115610b69577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610b9c57816020015b6060815260200190600190039081610b875790505b50915060006003811115610bd9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816003811115610c12577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610d01577f000000000000000000000000000000000000000000000000000000000000000083600081518110610c73577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610cb786866114a7565b82600081518110610cf1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250610f53565b60016003811115610d3b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816003811115610d74577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610e6d577f000000000000000000000000000000000000000000000000000000000000000083600081518110610dd5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610e23868560a001518660c0015188611529565b82600081518110610e5d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250610f52565b7f000000000000000000000000000000000000000000000000000000000000000083600081518110610ec8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610f0c86866115b1565b82600081518110610f46577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052505b5b50935093915050565b600063e0e90acf60e01b838333604051602401610f7b939291906150e2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000803073ffffffffffffffffffffffffffffffffffffffff16836040516110029190615026565b600060405180830381855af49150503d806000811461103d576040519150601f19603f3d011682016040523d82523d6000602084013e611042565b606091505b509150915081611095576110946040518060400160405280602081526020017f436f6e6e65637447656c61746f446174614d616b6572546f582e5f636173743a8152508261163390919063ffffffff16565b5b5050505050565b6000808314156110af5760009050611226565b735ef30b9986345249bc32d8928b7ee64de9435e3973ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b81526004016110fc9190615308565b60206040518083038186803b15801561111457600080fd5b505afa92505050801561114557506040513d601f19601f8201168201806040525081019061114291906144ca565b60015b6111f357611151615a3e565b8061115c57506111b8565b8060405160200161116d91906150a5565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111af9190615186565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ea90615268565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16149150505b92915050565b6000808373ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd846040518263ffffffff1660e01b81526004016112689190615308565b60206040518083038186803b15801561128057600080fd5b505afa158015611294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b89190614583565b91508373ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b81526004016112f39190615308565b60206040518083038186803b15801561130b57600080fd5b505afa15801561131f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134391906144ca565b90509250929050565b6000808214806113745750828283856113659190615770565b92508261137291906155ce565b145b6113b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113aa906151e8565b60405180910390fd5b92915050565b60008282846113c891906157ca565b915081111561140c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611403906151a8565b60405180910390fd5b92915050565b6000670de0b6b3a764000061144461142a858561134c565b6002670de0b6b3a764000061143f91906155ce565b61179c565b61144e91906155ce565b905092915050565b6000611461826117f5565b1561146f57600090506114a2565b61147882611877565b1561148657600190506114a2565b61148f82611921565b1561149d57600290506114a2565b600390505b919050565b6060639ae4bca260e01b83836040516024016114c4929190615323565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b606063bf8f75b760e01b8585858560405160240161154a94939291906153ac565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050949350505050565b606063e588576e60e01b83836040516024016115ce929190615323565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b6004602083516116439190615955565b1415611740576000826020015190506308c379a060e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156116e457604483019250818360405160200161169992919061503d565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116db9190615186565b60405180910390fd5b816040516020016116f59190615061565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117379190615186565b60405180910390fd5b806040516020016117519190615083565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117939190615186565b60405180910390fd5b60008282846117ab9190615578565b91508110156117ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e690615228565b60405180910390fd5b92915050565b600061181c826060015161180d8461010001516119ae565b8460e001518560800151611a26565b826060018181525050611847736b175474e89094c44da98b954eedeac495271d0f8360600151611b23565b8015611870575061186f82600001518360200151846040015185606001518660800151611cd6565b5b9050919050565b60006118a6826060015161189760008560a0015114856101000151611f25565b8460e001518560800151611a26565b8260600181815250506118cb82600001518360a001518460c001518560600151611ffc565b1580156118f157506118ef82600001518360a001518460c00151856060015161202c565b155b801561191a575061191982600001518360a001518460c001518560200151866060015161205c565b5b9050919050565b6000611948826060015161193984610100015161208e565b8460e001518560800151611a26565b826060018181525050611973736b175474e89094c44da98b954eedeac495271d0f8360600151612106565b80156119a757506119a682600001518360200151736b175474e89094c44da98b954eedeac495271d0f8560600151612198565b5b9050919050565b60006119d2826040518060600160405280603d8152602001615c89603d91396121b8565b611a1f6119dd612204565b8360048110611a15577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015161223e565b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff16633c772b6c611a508861226c565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee736b175474e89094c44da98b954eedeac495271d0f6040518463ffffffff1660e01b8152600401611a989392919061534c565b604080518083038186803b158015611aaf57600080fd5b505afa158015611ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae7919061479c565b91509150611af58183612286565b9150611b018786611412565b8288611b0d9190615578565b611b179190615578565b92505050949350505050565b6000818373ffffffffffffffffffffffffffffffffffffffff166370a0823173b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b9c57600080fd5b505afa158015611bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd491906144ca565b73ffffffffffffffffffffffffffffffffffffffff166335ea6a75876040518263ffffffff1660e01b8152600401611c0c91906150c7565b6101806040518083038186803b158015611c2557600080fd5b505afa158015611c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5d91906145d5565b60e001516040518263ffffffff1660e01b8152600401611c7d91906150c7565b60206040518083038186803b158015611c9557600080fd5b505afa158015611ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccd9190614651565b11905092915050565b6000806000808490506000611cea8a6122b2565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415611d3c57889350611df1565b8173ffffffffffffffffffffffffffffffffffffffff16633c772b6c8a8a73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6040518463ffffffff1660e01b8152600401611d8d9392919061534c565b604080518083038186803b158015611da457600080fd5b505afa158015611db8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddc919061479c565b8094508195505050611dee8385612286565b93505b8173ffffffffffffffffffffffffffffffffffffffff16633c772b6c88736b175474e89094c44da98b954eedeac495271d0f73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6040518463ffffffff1660e01b8152600401611e569392919061534c565b604080518083038186803b158015611e6d57600080fd5b505afa158015611e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea5919061479c565b8094508198505050611eb78388612286565b9650670de0b6b3a7640000611f15612710611eda87611ed58d612430565b61134c565b611eec8560600151866000015161134c565b611ef69190615578565b611f0091906155ce565b898460200151611f109190615578565b612510565b1194505050505095945050505050565b6000611f49826040518060600160405280603e8152602001615bd4603e91396121b8565b611ff483611f9b57611f5961254c565b8360048110611f91577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151611fef565b62030d40611fa761254c565b8460048110611fdf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151611fee9190615578565b5b61223e565b905092915050565b6000612008848661109c565b612013576000612015565b835b9350612022848484612586565b9050949350505050565b6000612038848661109c565b612043576000612045565b835b93506120528484846125b2565b9050949350505050565b6000612068858761109c565b612073576000612075565b845b9450612083858585856125de565b905095945050505050565b60006120b282604051806080016040528060418152602001615c12604191396121b8565b6120ff6120bd61260d565b83600481106120f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015161223e565b9050919050565b60008161211284612647565b73ffffffffffffffffffffffffffffffffffffffff16633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b15801561215757600080fd5b505afa15801561216b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218f9190614651565b11905092915050565b60006121ae85856121a886612647565b856126ed565b9050949350505050565b600482111581906121ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f69190615186565b60405180910390fd5b505050565b61220c61400a565b60405180608001604052806223fd068152602001622d1e89815260200162339ac88152602001623d7bd8815250905090565b60006064601e60646122509190615578565b8361225b9190615770565b61226591906155ce565b9050919050565b600061227f8261227a6128ee565b61134c565b9050919050565b60006122aa8284601261229991906157ca565b600a6122a59190615652565b61134c565b905092915050565b6122ba61402c565b60008060008060008073b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561231d57600080fd5b505afa158015612331573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235591906144ca565b73ffffffffffffffffffffffffffffffffffffffff1663bf92857c896040518263ffffffff1660e01b815260040161238d91906150c7565b60c06040518083038186803b1580156123a557600080fd5b505afa1580156123b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dd919061498d565b9550955095509550955095506040518060e001604052808781526020018681526020018581526020018481526020018381526020018281526020016124206129cf565b8152509650505050505050919050565b600073057835ad21a177dbdd3090bb1cae03eacf78fc6d73ffffffffffffffffffffffffffffffffffffffff16633e15014161246b84612a68565b6040518263ffffffff1660e01b815260040161248791906150c7565b6101406040518083038186803b1580156124a057600080fd5b505afa1580156124b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d891906148b2565b909192939495969798509091929394959697509091929394955090919293945090919293509091925090915090505080915050919050565b60008161253a61252885670de0b6b3a764000061134c565b60028561253591906155ce565b61179c565b61254491906155ce565b905092915050565b61255461400a565b604051806080016040528062266fd88152602001622feb948152602001623c97b8815260200162424ca8815250905090565b600080841461259e576125998483612ad4565b6125a9565b6125a88383612d6e565b5b90509392505050565b60008084146125ca576125c58483612eda565b6125d5565b6125d4838361320d565b5b90509392505050565b60008085146125f7576125f28584846134ae565b612603565b6126028484846138d4565b5b9050949350505050565b61261561400a565b6040518060800160405280621ef3138152602001622814978152602001622cec41815260200162387070815250905090565b600073e81f70cc7c0d46e12d70efc60607f16bbd617e8873ffffffffffffffffffffffffffffffffffffffff1663104b29e9836040518263ffffffff1660e01b815260040161269691906150c7565b60206040518083038186803b1580156126ae57600080fd5b505afa1580156126c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e691906144ca565b9050919050565b60006126f7614069565b6000733d9819210a31b4961b30ef54be2aed79b9c9cd3b905060008173ffffffffffffffffffffffffffffffffffffffff1663abfceffc896040518263ffffffff1660e01b815260040161274b91906150c7565b60006040518083038186803b15801561276357600080fd5b505afa158015612777573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906127a091906144f3565b905060005b81518110156128835760008282815181106127e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506127fe858b83613b79565b94508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561286f576128488561012001518a8760000151613f01565b856000018181525050612865856101000151888760200151613f01565b8560200181815250505b50808061287b9061590c565b9150506127a5565b506000815114156128d657612899838988613b79565b92506128af836101200151888560000151613f01565b8360000181815250506128cc836101000151868560200151613f01565b8360200181815250505b82602001518360000151119350505050949350505050565b60008073169e633a2d1e6c10dd91238ba11c4a708dfef37c73ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561294b57600080fd5b505afa15801561295f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298391906145ac565b9050600081136129c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129bf90615248565b60405180910390fd5b8091505090565b6000735f4ec3df9cbd43714fe2740f5e3616155c5b841973ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a2b57600080fd5b505afa158015612a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6391906145ac565b905090565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612ab75781612acd565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b9050919050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015612b3657600080fd5b505afa158015612b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6e91906144ca565b9050600080612b7d848861122c565b9150915060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c84846040518363ffffffff1660e01b8152600401612bbe929190615142565b604080518083038186803b158015612bd557600080fd5b505afa158015612be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0d919061479c565b9150506000808573ffffffffffffffffffffffffffffffffffffffff1663d9638d36866040518263ffffffff1660e01b8152600401612c4c9190615127565b60a06040518083038186803b158015612c6457600080fd5b505afa158015612c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9c919061483b565b9450505092505060008673ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b8152600401612cde91906150c7565b60206040518083038186803b158015612cf657600080fd5b505afa158015612d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2e9190614651565b90506000612d3d8b8386613f21565b9050612d49858261179c565b94506000612d57858761134c565b90508381109a505050505050505050505092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015612dd057600080fd5b505afa158015612de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0891906144ca565b90506000612e1586613f91565b90506000808373ffffffffffffffffffffffffffffffffffffffff1663d9638d36846040518263ffffffff1660e01b8152600401612e539190615127565b60a06040518083038186803b158015612e6b57600080fd5b505afa158015612e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea3919061483b565b945050509250506000612eb888600085613f21565b90506000612ec6848361134c565b905082811097505050505050505092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015612f3c57600080fd5b505afa158015612f50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f7491906144ca565b9050600080612f83848861122c565b9150915060008060008573ffffffffffffffffffffffffffffffffffffffff1663d9638d36866040518263ffffffff1660e01b8152600401612fc59190615127565b60a06040518083038186803b158015612fdd57600080fd5b505afa158015612ff1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613015919061483b565b509350509250925060008673ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b815260040161305891906150c7565b60206040518083038186803b15801561307057600080fd5b505afa158015613084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a89190614651565b905060008773ffffffffffffffffffffffffffffffffffffffff1663babe8a3f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156130f257600080fd5b505afa158015613106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312a9190614651565b905060008873ffffffffffffffffffffffffffffffffffffffff16630dca59c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561317457600080fd5b505afa158015613188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ac9190614651565b905060006131bb8d8588613f21565b905060006131c9878361134c565b90506131d5838261179c565b92506131e1888361179c565b9750856131ee898961134c565b11806131f957508383115b9c5050505050505050505050505092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561326f57600080fd5b505afa158015613283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132a791906144ca565b905060006132b486613f91565b905060008060008473ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b81526004016132f49190615127565b60a06040518083038186803b15801561330c57600080fd5b505afa158015613320573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613344919061483b565b509350509250925060008573ffffffffffffffffffffffffffffffffffffffff1663babe8a3f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561339457600080fd5b505afa1580156133a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133cc9190614651565b905060008673ffffffffffffffffffffffffffffffffffffffff16630dca59c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561341657600080fd5b505afa15801561342a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344e9190614651565b9050600061345e8b600087613f21565b9050600061346c868361134c565b9050613478838261179c565b9250613484878361179c565b965084613491888861134c565b118061349c57508383115b9a505050505050505050505092915050565b6000808414156134f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134ea90615288565b60405180910390fd5b6000735ef30b9986345249bc32d8928b7ee64de9435e399050600080613519838861122c565b91509150600073e81f70cc7c0d46e12d70efc60607f16bbd617e8873ffffffffffffffffffffffffffffffffffffffff16634445d799846040518263ffffffff1660e01b815260040161356c9190615127565b60206040518083038186803b15801561358457600080fd5b505afa158015613598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135bc91906144ca565b905060008473ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561360657600080fd5b505afa15801561361a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061363e91906144ca565b90506000808273ffffffffffffffffffffffffffffffffffffffff1663d9638d36876040518263ffffffff1660e01b815260040161367c9190615127565b60a06040518083038186803b15801561369457600080fd5b505afa1580156136a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136cc919061483b565b505092509250506000808473ffffffffffffffffffffffffffffffffffffffff16632424be5c89896040518363ffffffff1660e01b8152600401613711929190615142565b604080518083038186803b15801561372857600080fd5b505afa15801561373c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613760919061479c565b9150915060008573ffffffffffffffffffffffffffffffffffffffff16636c25b346896040518263ffffffff1660e01b815260040161379f91906150c7565b60206040518083038186803b1580156137b757600080fd5b505afa1580156137cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ef9190614651565b9050600061387a8873ffffffffffffffffffffffffffffffffffffffff1663b3bcfa826040518163ffffffff1660e01b815260040160206040518083038186803b15801561383c57600080fd5b505afa158015613850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138749190614651565b8f612286565b905060006138898e8489613f21565b9050613895858361179c565b94506138a1848261179c565b935060006138af888661134c565b90506138bb868861134c565b8111159d50505050505050505050505050509392505050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561393657600080fd5b505afa15801561394a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061396e91906144ca565b9050600061397b87613f91565b90506000808373ffffffffffffffffffffffffffffffffffffffff1663d9638d36846040518263ffffffff1660e01b81526004016139b99190615127565b60a06040518083038186803b1580156139d157600080fd5b505afa1580156139e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a09919061483b565b50509250925050600073e81f70cc7c0d46e12d70efc60607f16bbd617e8873ffffffffffffffffffffffffffffffffffffffff16634445d799856040518263ffffffff1660e01b8152600401613a5f9190615127565b60206040518083038186803b158015613a7757600080fd5b505afa158015613a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aaf91906144ca565b90506000613b3a8273ffffffffffffffffffffffffffffffffffffffff1663b3bcfa826040518163ffffffff1660e01b815260040160206040518083038186803b158015613afc57600080fd5b505afa158015613b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b349190614651565b8b612286565b90506000613b4a8a600087613f21565b90506000613b58868361134c565b9050613b64838661134c565b81111599505050505050505050509392505050565b613b81614069565b600080733d9819210a31b4961b30ef54be2aed79b9c9cd3b90508373ffffffffffffffffffffffffffffffffffffffff1663c37f68e2866040518263ffffffff1660e01b8152600401613bd491906150c7565b60806040518083038186803b158015613bec57600080fd5b505afa158015613c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c2491906147d8565b896040018a6060018b60e0018381525083815250838152508395505050505060008214613c86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c7d90615208565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16638e8f294b856040518263ffffffff1660e01b8152600401613cbf91906150c7565b60606040518083038186803b158015613cd757600080fd5b505afa158015613ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d0f9190614534565b909150508660c0018181525050733d9819210a31b4961b30ef54be2aed79b9c9cd3b73ffffffffffffffffffffffffffffffffffffffff16637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015613d7657600080fd5b505afa158015613d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dae91906144ca565b73ffffffffffffffffffffffffffffffffffffffff1663fc57d4df856040518263ffffffff1660e01b8152600401613de6919061516b565b60206040518083038186803b158015613dfe57600080fd5b505afa158015613e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e369190614651565b8661010001818152505060008661010001511415613e89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e80906152c8565b60405180910390fd5b613ea9613e9e8760c001518860e00151613fe3565b876101000151613fe3565b86610120018181525050613ecb86610120015187604001518860000151613f01565b866000018181525050613eec86610100015187606001518860200151613f01565b86602001818152505085925050509392505050565b600081613f0e8585613fe3565b613f189190615578565b90509392505050565b600081613f43613f3d866b033b2e3c9fd0803ce800000061134c565b856113b9565b613f4d91906155ce565b9050613f65846b033b2e3c9fd0803ce800000061134c565b613f6f828461134c565b10613f7a5780613f88565b600181613f879190615578565b5b90509392505050565b60008082511415613fd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613fce906152a8565b60405180910390fd5b60208201519050919050565b6000670de0b6b3a7640000613ff8848461134c565b61400291906155ce565b905092915050565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006140cf6140ca84615429565b6153f8565b905080838252602082019050828560208602820111156140ee57600080fd5b60005b8581101561411e5781614104888261422e565b8452602084019350602083019250506001810190506140f1565b5050509392505050565b600061413b61413684615455565b6153f8565b90508281526020810184848401111561415357600080fd5b61415e8482856158ca565b509392505050565b60008135905061417581615af4565b92915050565b60008151905061418a81615af4565b92915050565b600082601f8301126141a157600080fd5b81516141b18482602086016140bc565b91505092915050565b6000815190506141c981615b0b565b92915050565b6000815190506141de81615b22565b92915050565b60008083601f8401126141f657600080fd5b8235905067ffffffffffffffff81111561420f57600080fd5b60208301915083600182028301111561422757600080fd5b9250929050565b60008151905061423d81615b39565b92915050565b60008135905061425281615b50565b92915050565b60008151905061426781615b60565b92915050565b600082601f83011261427e57600080fd5b813561428e848260208601614128565b91505092915050565b6000602082840312156142a957600080fd5b6142b360206153f8565b905060006142c38482850161448b565b60008301525092915050565b600061018082840312156142e257600080fd5b6142ed6101806153f8565b905060006142fd84828501614297565b600083015250602061431184828501614461565b602083015250604061432584828501614461565b604083015250606061433984828501614461565b606083015250608061434d84828501614461565b60808301525060a061436184828501614461565b60a08301525060c0614375848285016144a0565b60c08301525060e06143898482850161417b565b60e08301525061010061439e8482850161417b565b610100830152506101206143b48482850161417b565b610120830152506101406143ca8482850161417b565b610140830152506101606143e0848285016144b5565b6101608301525092915050565b6000608082840312156143ff57600080fd5b61440960806153f8565b905060006144198482850161448b565b600083015250602061442d8482850161448b565b60208301525060406144418482850161448b565b60408301525060606144558482850161448b565b60608301525092915050565b60008151905061447081615b77565b92915050565b60008135905061448581615b8e565b92915050565b60008151905061449a81615b8e565b92915050565b6000815190506144af81615ba5565b92915050565b6000815190506144c481615bbc565b92915050565b6000602082840312156144dc57600080fd5b60006144ea8482850161417b565b91505092915050565b60006020828403121561450557600080fd5b600082015167ffffffffffffffff81111561451f57600080fd5b61452b84828501614190565b91505092915050565b60008060006060848603121561454957600080fd5b6000614557868287016141ba565b93505060206145688682870161448b565b9250506040614579868287016141ba565b9150509250925092565b60006020828403121561459557600080fd5b60006145a3848285016141cf565b91505092915050565b6000602082840312156145be57600080fd5b60006145cc84828501614258565b91505092915050565b600061018082840312156145e857600080fd5b60006145f6848285016142cf565b91505092915050565b60006080828403121561461157600080fd5b600061461f848285016143ed565b91505092915050565b60006020828403121561463a57600080fd5b600061464884828501614476565b91505092915050565b60006020828403121561466357600080fd5b60006146718482850161448b565b91505092915050565b600080600080600080600060c0888a03121561469557600080fd5b60006146a38a828b01614476565b97505060206146b48a828b01614166565b965050604088013567ffffffffffffffff8111156146d157600080fd5b6146dd8a828b016141e4565b955095505060606146f08a828b01614243565b93505060806147018a828b01614476565b92505060a06147128a828b01614476565b91505092959891949750929550565b6000806000806080858703121561473757600080fd5b600061474587828801614476565b945050602061475687828801614166565b935050604061476787828801614476565b925050606085013567ffffffffffffffff81111561478457600080fd5b6147908782880161426d565b91505092959194509250565b600080604083850312156147af57600080fd5b60006147bd8582860161448b565b92505060206147ce8582860161448b565b9150509250929050565b600080600080608085870312156147ee57600080fd5b60006147fc8782880161448b565b945050602061480d8782880161448b565b935050604061481e8782880161448b565b925050606061482f8782880161448b565b91505092959194509250565b600080600080600060a0868803121561485357600080fd5b60006148618882890161448b565b95505060206148728882890161448b565b94505060406148838882890161448b565b93505060606148948882890161448b565b92505060806148a58882890161448b565b9150509295509295909350565b6000806000806000806000806000806101408b8d0312156148d257600080fd5b60006148e08d828e0161448b565b9a505060206148f18d828e0161448b565b99505060406149028d828e0161448b565b98505060606149138d828e0161448b565b97505060806149248d828e0161448b565b96505060a06149358d828e016141ba565b95505060c06149468d828e016141ba565b94505060e06149578d828e016141ba565b9350506101006149698d828e016141ba565b92505061012061497b8d828e016141ba565b9150509295989b9194979a5092959850565b60008060008060008060c087890312156149a657600080fd5b60006149b489828a0161448b565b96505060206149c589828a0161448b565b95505060406149d689828a0161448b565b94505060606149e789828a0161448b565b93505060806149f889828a0161448b565b92505060a0614a0989828a0161448b565b9150509295509295509295565b6000614a228383614a42565b60208301905092915050565b6000614a3a8383614b42565b905092915050565b614a4b816157fe565b82525050565b614a5a816157fe565b82525050565b6000614a6b826154a5565b614a7581856154eb565b9350614a8083615485565b8060005b83811015614ab1578151614a988882614a16565b9750614aa3836154d1565b925050600181019050614a84565b5085935050505092915050565b6000614ac9826154b0565b614ad381856154fc565b935083602082028501614ae585615495565b8060005b85811015614b215784840389528151614b028582614a2e565b9450614b0d836154de565b925060208a01995050600181019050614ae9565b50829750879550505050505092915050565b614b3c8161581c565b82525050565b6000614b4d826154bb565b614b57818561550d565b9350614b678185602086016158d9565b614b7081615a13565b840191505092915050565b6000614b86826154bb565b614b90818561551e565b9350614ba08185602086016158d9565b80840191505092915050565b614bb5816158a6565b82525050565b6000614bc6826154c6565b614bd08185615529565b9350614be08185602086016158d9565b614be981615a13565b840191505092915050565b6000614bff826154c6565b614c09818561553a565b9350614c198185602086016158d9565b80840191505092915050565b6000614c32601583615529565b91507f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006000830152602082019050919050565b6000614c72603783615529565b91507f436f6e6e65637447656c61746f446174614d616b6572546f582e5f646174614660008301527f726f6d4d616b65723a2050524f544f434f4c2e4e4f4e450000000000000000006020830152604082019050919050565b6000614cd8601483615529565b91507f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000614d18602a83615529565b91507f5f67657441737365744c69717569646974793a2073656d692d6f70617175652060008301527f6572726f7220636f6465000000000000000000000000000000000000000000006020830152604082019050919050565b6000614d7e601483615529565b91507f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000614dbe600f8361553a565b91507f4e6f4572726f7253656c6563746f7200000000000000000000000000000000006000830152600f82019050919050565b6000614dfe601b83615529565b91507f5f67657447656c61746f47617350726963653a306f7242656c6f7700000000006000830152602082019050919050565b6000614e3e60158361553a565b91507f464d616b65722e5f69735661756c744f776e65723a00000000000000000000006000830152601582019050919050565b6000614e7e601e83615529565b91507f464d616b65722e5f69735661756c744f776e65723a756e646566696e656400006000830152602082019050919050565b6000614ebe602383615529565b91507f5f7661756c7457696c6c4265536166653a20696e76616c6964207661756c742060008301527f69642e00000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614f24600c83615529565b91507f737472696e672d656d70747900000000000000000000000000000000000000006000830152602082019050919050565b6000614f64600083615529565b9150600082019050919050565b6000614f7e602e83615529565b91507f4647656c61746f446562744272696467652e5f676574466c6173684c6f616e5260008301527f6f7574653a20696c6c69717569640000000000000000000000000000000000006020830152604082019050919050565b6000614fe460148361553a565b91507f556e657870656374656452657475726e646174610000000000000000000000006000830152601482019050919050565b6150208161587e565b82525050565b60006150328284614b7b565b915081905092915050565b60006150498285614bf4565b91506150558284614bf4565b91508190509392505050565b600061506d8284614bf4565b915061507882614db1565b915081905092915050565b600061508f8284614bf4565b915061509a82614fd7565b915081905092915050565b60006150b082614e31565b91506150bc8284614bf4565b915081905092915050565b60006020820190506150dc6000830184614a51565b92915050565b600060608201905081810360008301526150fc8186614a60565b905081810360208301526151108185614abe565b905061511f6040830184614a51565b949350505050565b600060208201905061513c6000830184614b33565b92915050565b60006040820190506151576000830185614b33565b6151646020830184614a51565b9392505050565b60006020820190506151806000830184614bac565b92915050565b600060208201905081810360008301526151a08184614bbb565b905092915050565b600060208201905081810360008301526151c181614c25565b9050919050565b600060208201905081810360008301526151e181614c65565b9050919050565b6000602082019050818103600083015261520181614ccb565b9050919050565b6000602082019050818103600083015261522181614d0b565b9050919050565b6000602082019050818103600083015261524181614d71565b9050919050565b6000602082019050818103600083015261526181614df1565b9050919050565b6000602082019050818103600083015261528181614e71565b9050919050565b600060208201905081810360008301526152a181614eb1565b9050919050565b600060208201905081810360008301526152c181614f17565b9050919050565b600060208201905081810360008301526152e181614f57565b9050919050565b6000602082019050818103600083015261530181614f71565b9050919050565b600060208201905061531d6000830184615017565b92915050565b60006040820190506153386000830185615017565b6153456020830184614a51565b9392505050565b60006060820190506153616000830186615017565b61536e6020830185614a51565b61537b6040830184614a51565b949350505050565b60006040820190506153986000830185615017565b6153a56020830184615017565b9392505050565b60006080820190506153c16000830187615017565b6153ce6020830186615017565b81810360408301526153e08185614bbb565b90506153ef6060830184614a51565b95945050505050565b6000604051905081810181811067ffffffffffffffff8211171561541f5761541e6159e4565b5b8060405250919050565b600067ffffffffffffffff821115615444576154436159e4565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156154705761546f6159e4565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000808585111561555557600080fd5b8386111561556257600080fd5b6001850283019150848603905094509492505050565b60006155838261587e565b915061558e8361587e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156155c3576155c2615986565b5b828201905092915050565b60006155d98261587e565b91506155e48361587e565b9250826155f4576155f36159b5565b5b828204905092915050565b6000808291508390505b60018511156156495780860481111561562557615624615986565b5b60018516156156345780820291505b808102905061564285615a24565b9450615609565b94509492505050565b600061565d8261587e565b91506156688361587e565b92506156957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461569d565b905092915050565b6000826156ad5760019050615769565b816156bb5760009050615769565b81600181146156d157600281146156db5761570a565b6001915050615769565b60ff8411156156ed576156ec615986565b5b8360020a91508482111561570457615703615986565b5b50615769565b5060208310610133831016604e8410600b841016171561573f5782820a90508381111561573a57615739615986565b5b615769565b61574c84848460016155ff565b9250905081840481111561576357615762615986565b5b81810290505b9392505050565b600061577b8261587e565b91506157868361587e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156157bf576157be615986565b5b828202905092915050565b60006157d58261587e565b91506157e08361587e565b9250828210156157f3576157f2615986565b5b828203905092915050565b60006158098261585e565b9050919050565b60008115159050919050565b6000819050919050565b6000615831826157fe565b9050919050565b6000819050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600064ffffffffff82169050919050565b600060ff82169050919050565b60006158b1826158b8565b9050919050565b60006158c38261585e565b9050919050565b82818337600083830152505050565b60005b838110156158f75780820151818401526020810190506158dc565b83811115615906576000848401525b50505050565b60006159178261587e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561594a57615949615986565b5b600182019050919050565b60006159608261587e565b915061596b8361587e565b92508261597b5761597a6159b5565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b60008160e01c9050919050565b600060443d1015615a4e57615af1565b60046000803e615a5f600051615a31565b6308c379a08114615a705750615af1565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715615a9c57505050615af1565b808201805167ffffffffffffffff811115615abb575050505050615af1565b8060208301013d8501811115615ad657505050505050615af1565b615adf82615a13565b60208401016040528296505050505050505b90565b615afd816157fe565b8114615b0857600080fd5b50565b615b1481615810565b8114615b1f57600080fd5b50565b615b2b8161581c565b8114615b3657600080fd5b50565b615b4281615826565b8114615b4d57600080fd5b50565b60048110615b5d57600080fd5b50565b615b6981615838565b8114615b7457600080fd5b50565b615b8081615842565b8114615b8b57600080fd5b50565b615b978161587e565b8114615ba257600080fd5b50565b615bae81615888565b8114615bb957600080fd5b50565b615bc581615899565b8114615bd057600080fd5b5056fe4647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f4d616b65723a20696e76616c696420726f75746520696e6465784647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f436f6d706f756e643a20696e76616c696420726f75746520696e646578436f6e6e65637447656c61746f446174614d616b6572546f4d616b65723a205661756c742041204964206973206e6f742076616c69644647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f416176653a20696e76616c696420726f75746520696e646578436f6e6e65637447656c61746f446174614d616b6572546f4d616b65723a205661756c742041206e6f74206f776e656420627920647361a26469706673582212204952999ee19e3964344d8c916c4c7f1106bc2bf1ee1750ea5bea24fa800d42f164736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "connectorID()": {
        "details": "Connector Details"
      },
      "getDataAndCastFromMaker(uint256,address,uint256,string)": {
        "details": "payable to be compatible in conjunction with DSA.cast payable target",
        "params": {
          "_colToken": "The ETH-A collateral token.",
          "_makerDestColType": "Only for Maker: colType of the new vault: e.g.ETH-B",
          "_makerDestVaultId": "Only for Maker: e.g. ETH-B vault of the client.",
          "_vaultAId": "Id of the unsafe vault of the client of Vault A Collateral."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getDataAndCastFromMaker(uint256,address,uint256,string)": {
        "notice": "Entry Point for DSA.cast DebtBridge from e.g ETH-A to ETH-B"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
