{
  "address": "0x11028592f0a4f4E7e0C9936464e621584eb5070e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "__id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_oracleAggregator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__instaFeeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__connectGelatoDebtBridgeFee",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OK",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connectGelatoDataFromMakerAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connectorID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultAId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vaultBId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_colType",
          "type": "string"
        }
      ],
      "name": "getDataAndCastMakerToMaker",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instaFeeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_dsa",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        },
        {
          "internalType": "enum DataFlow",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "termsOk",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x65f70192b80aebbbefb3f603d4ef82c8dc3c3ec8646f2faf29863e1b18047465",
  "receipt": {
    "to": null,
    "from": "0xF953c3d475dc0a9877329F71e2CE3d2519a519A2",
    "contractAddress": "0x11028592f0a4f4E7e0C9936464e621584eb5070e",
    "transactionIndex": 85,
    "gasUsed": "2821886",
    "logsBloom": "0x
    "blockHash": "0x78f581536200a4b54c0001ff6db8783114c291eb69460afe626494c12aec42db",
    "transactionHash": "0x65f70192b80aebbbefb3f603d4ef82c8dc3c3ec8646f2faf29863e1b18047465",
    "logs": [],
    "blockNumber": 11886683,
    "cumulativeGasUsed": "7786394",
    "status": 1,
    "byzantium": true
  },
  "args": [
    85,
    "0x64f31D46C52bBDe223D863B11dAb9327aB1414E9",
    "0x0c159985E905ea1A3dA7305D70583Dd618862cf4",
    "0x9B6eeB49390626Dec7B3785D38879746923B308E"
  ],
  "solcInputHash": "4b220f9f5ace9500863671bb012c293f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracleAggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__instaFeeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__connectGelatoDebtBridgeFee\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OK\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectGelatoDataFromMakerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultAId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vaultBId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_colType\",\"type\":\"string\"}],\"name\":\"getDataAndCastMakerToMaker\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dsa\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"enum DataFlow\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"termsOk\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"connectorID()\":{\"details\":\"Connector Details\"},\"getDataAndCastMakerToMaker(uint256,uint256,string)\":{\"details\":\"payable to be compatible in conjunction with DSA.cast payable target\",\"params\":{\"_colType\":\"colType of the new vault. example : ETH-B, ETH-A.\",\"_vaultAId\":\"Id of the unsafe vault of the client of Vault A Collateral.\",\"_vaultBId\":\"Id of the vault B Collateral of the client.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getDataAndCastMakerToMaker(uint256,uint256,string)\":{\"notice\":\"Entry Point for DSA.cast DebtBridge from e.g ETH-A to ETH-B\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/Instadapp/connectors/debt_bridge/from_maker/ConnectGelatoDataMakerToMaker.sol\":\"ConnectGelatoDataMakerToMaker\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/core/contracts/gelato_conditions/IGelatoCondition.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n\\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\\n    /// @dev Be careful only to encode a Task's condition.data as is and not with the\\n    ///  \\\"ok\\\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\\n    ///  source of Task identification.\\n    /// @param _conditionData This is the Condition.data field developers must encode their\\n    ///  Condition's specific parameters in.\\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\\n    function ok(uint256 _taskReceiptId, bytes calldata _conditionData, uint256 _cycleId)\\n        external\\n        view\\n        returns(string memory);\\n}\",\"keccak256\":\"0xd07607af93227ec5f8c2f5401289937b98c298f0d2398c1ba7410f82a6253964\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {IGelatoProviderModule} from \\\"../../gelato_provider_modules/IGelatoProviderModule.sol\\\";\\nimport {IGelatoCondition} from \\\"../../gelato_conditions/IGelatoCondition.sol\\\";\\n\\nstruct Provider {\\n    address addr;  //  if msg.sender == provider => self-Provider\\n    IGelatoProviderModule module;  //  can be IGelatoProviderModule(0) for self-Providers\\n}\\n\\nstruct Condition {\\n    IGelatoCondition inst;  // can be AddressZero for self-conditional Actions\\n    bytes data;  // can be bytes32(0) for self-conditional Actions\\n}\\n\\nenum Operation { Call, Delegatecall }\\n\\nenum DataFlow { None, In, Out, InAndOut }\\n\\nstruct Action {\\n    address addr;\\n    bytes data;\\n    Operation operation;\\n    DataFlow dataFlow;\\n    uint256 value;\\n    bool termsOkCheck;\\n}\\n\\nstruct Task {\\n    Condition[] conditions;  // optional\\n    Action[] actions;\\n    uint256 selfProviderGasLimit;  // optional: 0 defaults to gelatoMaxGas\\n    uint256 selfProviderGasPriceCeil;  // optional: 0 defaults to NO_CEIL\\n}\\n\\nstruct TaskReceipt {\\n    uint256 id;\\n    address userProxy;\\n    Provider provider;\\n    uint256 index;\\n    Task[] tasks;\\n    uint256 expiryDate;\\n    uint256 cycleId;  // auto-filled by GelatoCore. 0 for non-cyclic/chained tasks\\n    uint256 submissionsLeft;\\n}\\n\\ninterface IGelatoCore {\\n    event LogTaskSubmitted(\\n        uint256 indexed taskReceiptId,\\n        bytes32 indexed taskReceiptHash,\\n        TaskReceipt taskReceipt\\n    );\\n\\n    event LogExecSuccess(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorSuccessFee,\\n        uint256 sysAdminSuccessFee\\n    );\\n    event LogCanExecFailed(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        string reason\\n    );\\n    event LogExecReverted(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorRefund,\\n        string reason\\n    );\\n\\n    event LogTaskCancelled(uint256 indexed taskReceiptId, address indexed cancellor);\\n\\n    /// @notice API to query whether Task can be submitted successfully.\\n    /// @dev In submitTask the msg.sender must be the same as _userProxy here.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _userProxy The userProxy from which the task will be submitted.\\n    /// @param _task Selected provider, conditions, actions, expiry date of the task\\n    function canSubmitTask(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice API to submit a single Task.\\n    /// @dev You can let users submit multiple tasks at once by batching calls to this.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task A Gelato Task object: provider, conditions, actions.\\n    /// @param _expiryDate From then on the task cannot be executed. 0 for infinity.\\n    function submitTask(\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _cycles How many full cycles will be submitted\\n    function submitTaskCycle(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _cycles\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @dev CAUTION: _sumOfRequestedTaskSubmits does not mean the number of cycles.\\n    /// @dev If _sumOfRequestedTaskSubmits = 1 && _tasks.length = 2, only the first task\\n    ///  would be submitted, but not the second\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _sumOfRequestedTaskSubmits The TOTAL number of Task auto-submits\\n    ///  that should have occured once the cycle is complete:\\n    ///  _sumOfRequestedTaskSubmits = 0 => One Task will resubmit the next Task infinitly\\n    ///  _sumOfRequestedTaskSubmits = 1 => One Task will resubmit no other task\\n    ///  _sumOfRequestedTaskSubmits = 2 => One Task will resubmit 1 other task\\n    ///  ...\\n    function submitTaskChain(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _sumOfRequestedTaskSubmits\\n    )\\n        external;\\n\\n    // ================  Exec Suite =========================\\n    /// @notice Off-chain API for executors to check, if a TaskReceipt is executable\\n    /// @dev GelatoCore checks this during execution, in order to safeguard the Conditions\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @param _gasLimit Task.selfProviderGasLimit is used for SelfProviders. All other\\n    ///  Providers must use gelatoMaxGas. If the _gasLimit is used by an Executor and the\\n    ///  tx reverts, a refund is paid by the Provider and the TaskReceipt is annulated.\\n    /// @param _execTxGasPrice Must be used by Executors. Gas Price fed by gelatoCore's\\n    ///  Gas Price Oracle. Executors can query the current gelatoGasPrice from events.\\n    function canExec(TaskReceipt calldata _TR, uint256 _gasLimit, uint256 _execTxGasPrice)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Executors call this when Conditions allow it to execute submitted Tasks.\\n    /// @dev Executors get rewarded for successful Execution. The Task remains open until\\n    ///   successfully executed, or when the execution failed, despite of gelatoMaxGas usage.\\n    ///   In the latter case Executors are refunded by the Task Provider.\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function exec(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel task\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function cancelTask(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel multiple tasks at once\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _taskReceipts TaskReceipts: id, userProxy, Task.\\n    function multiCancelTasks(TaskReceipt[] calldata _taskReceipts) external;\\n\\n    /// @notice Compute hash of task receipt\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @return hash of taskReceipt\\n    function hashTaskReceipt(TaskReceipt calldata _TR) external pure returns(bytes32);\\n\\n    // ================  Getters =========================\\n    /// @notice Returns the taskReceiptId of the last TaskReceipt submitted\\n    /// @return currentId currentId, last TaskReceiptId submitted\\n    function currentTaskReceiptId() external view returns(uint256);\\n\\n    /// @notice Returns computed taskReceipt hash, used to check for taskReceipt validity\\n    /// @param _taskReceiptId Id of taskReceipt emitted in submission event\\n    /// @return hash of taskReceipt\\n    function taskReceiptHash(uint256 _taskReceiptId) external view returns(bytes32);\\n}\\n\",\"keccak256\":\"0x890ea139bf550691f2b9e65bca4f7c0bcf2eb9b8a4564db8c5b42d2912f8adec\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_provider_modules/IGelatoProviderModule.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {Action, Task} from \\\"../gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\ninterface IGelatoProviderModule {\\n\\n    /// @notice Check if provider agrees to pay for inputted task receipt\\n    /// @dev Enables arbitrary checks by provider\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @return \\\"OK\\\" if provider agrees\\n    function isProvided(address _userProxy, address _provider, Task calldata _task)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Convert action specific payload into proxy specific payload\\n    /// @dev Encoded multiple actions into a multisend\\n    /// @param _taskReceiptId Unique ID of Gelato Task to be executed.\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @param _cycleId For Tasks that form part of a cycle/chain.\\n    /// @return Encoded payload that will be used for low-level .call on user proxy\\n    /// @return checkReturndata if true, fwd returndata from userProxy.call to ProviderModule\\n    function execPayload(\\n        uint256 _taskReceiptId,\\n        address _userProxy,\\n        address _provider,\\n        Task calldata _task,\\n        uint256 _cycleId\\n    )\\n        external\\n        view\\n        returns(bytes memory, bool checkReturndata);\\n\\n    /// @notice Called by GelatoCore.exec to verifiy that no revert happend on userProxy\\n    /// @dev If a caught revert is detected, this fn should revert with the detected error\\n    /// @param _proxyReturndata Data from GelatoCore._exec.userProxy.call(execPayload)\\n    function execRevertCheck(bytes calldata _proxyReturndata) external pure;\\n}\\n\",\"keccak256\":\"0x8d08ceddbc4e686d070e916d2bcffc69c5a640b56866bc2cef0256b564eb14dc\",\"license\":\"UNLICENSED\"},\"contracts/constants/CAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// Aave Lending Pool Addresses Provider\\naddress constant LENDING_POOL_ADDRESSES_PROVIDER = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;\\naddress constant CHAINLINK_ETH_FEED = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\\naddress constant AAVE_PROTOCOL_DATA_PROVIDER = 0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d;\\n\\naddress constant LENDING_POOL_CORE_V1 = 0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3;\\n\",\"keccak256\":\"0xe5cee3f4ac1d6baf32549b6e18556d6c27fb2f20fd1ec2fc687de0a46d5be42a\",\"license\":\"UNLICENSED\"},\"contracts/constants/CCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\naddress constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\\n\",\"keccak256\":\"0x7894ca47cf772ae6f312893382269e76775ea92787fba1eddd53e73a1104155e\",\"license\":\"UNLICENSED\"},\"contracts/constants/CDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nenum PROTOCOL {AAVE, MAKER, COMPOUND, NONE}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2519000), 3140500, 3971000, 4345000];\\n}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2028307), 2626711, 2944065, 3698800];\\n}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2358534), 2956937, 3381960, 4029400];\\n}\\n\\nuint256 constant FAST_TX_FEE = 30;\\nuint256 constant VAULT_CREATION_COST = 200000;\\nuint256 constant MAX_INSTA_FEE = 3e15;\\n\",\"keccak256\":\"0x5cb259ff9d661ebd3beb9d56e49ffb7dd5ff6a4c358c8acd913da52f5b99124b\",\"license\":\"UNLICENSED\"},\"contracts/constants/CGelato.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IGelatoGasPriceOracle\\n} from \\\"../interfaces/gelato/IGelatoGasPriceOracle.sol\\\";\\n\\nIGelatoGasPriceOracle constant GELATO_GAS_PRICE_ORACLE = IGelatoGasPriceOracle(\\n    0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C\\n);\\n\\naddress constant GELATO_EXECUTOR_MODULE = 0x98edc8067Cc671BCAE82D36dCC609C3E4e078AC8;\\n\\naddress constant CONDITION_MAKER_VAULT_UNSAFE_OSM = 0xDF3CDd10e646e4155723a3bC5b1191741DD90333;\\n\",\"keccak256\":\"0xaec344402c244a2c1f78166a66d5424fab2dc004e11bc851066fb6d5bbfc5d73\",\"license\":\"UNLICENSED\"},\"contracts/constants/CInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// InstaDapp\\naddress constant INSTA_MEMORY = 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F;\\n\\n// Connectors\\naddress constant CONNECT_MAKER = 0xac02030d8a8F49eD04b2f52C394D3F901A10F8A9;\\naddress constant CONNECT_COMPOUND = 0x15FdD1e902cAC70786fe7D31013B1a806764B5a2;\\naddress constant INSTA_POOL_V2 = 0xeB4bf86589f808f90EEC8e964dBF16Bd4D284905;\\naddress constant CONNECT_AAVE_V2 = 0xBF6E4331ffd02F7043e62788FD272aeFc712f5ee;\\naddress constant CONNECT_DYDX = 0x6AF6C791c869DfA65f8A2fa042fA47D1535Bef25;\\naddress constant CONNECT_BASIC = 0xe5398f279175962E56fE4c5E0b62dc7208EF36c6;\\naddress constant CONNECT_FEE = 0xB99152F8073033B318C1Bfbfaaa582029e982CE9;\\n\\n// Insta Pool\\naddress constant INSTA_POOL_RESOLVER = 0xa004a5afBa04b74037E9E52bA1f7eb02b5E61509;\\nuint256 constant ROUTE_1_TOLERANCE = 1005e15;\\n\\n// Insta Mapping\\naddress constant INSTA_MAPPING = 0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88;\\n\\naddress constant INSTA_MAKER_RESOLVER = 0x0A7008B38E7015F8C36A49eEbc32513ECA8801E5;\\n\",\"keccak256\":\"0x0a6f769e4d928a6286024c823696c481fbeb75c85bd8648b450a18ff3fc0451d\",\"license\":\"UNLICENSED\"},\"contracts/constants/CMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\naddress constant MCD_MANAGER = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\\naddress constant JUG = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\\n\",\"keccak256\":\"0xba2dab3a9cd1c7edd900705917de16d2c9c85edc35c03a2e3535570814ecb067\",\"license\":\"UNLICENSED\"},\"contracts/constants/CTokens.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// ETH\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\naddress constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n// USD\\naddress constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\",\"keccak256\":\"0x737e5e061f0a86bb43c375e78caada7211726ed0786151e719d503e6b9b60d59\",\"license\":\"UNLICENSED\"},\"contracts/contracts/Instadapp/connectors/base/BDebtBridgeFromMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {GelatoBytes} from \\\"../../../../lib/GelatoBytes.sol\\\";\\nimport {\\n    DataFlow\\n} from \\\"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\\\";\\nimport {\\n    _isVaultOwner,\\n    _getMakerVaultDebt\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\nimport {\\n    AccountInterface,\\n    ConnectorInterface\\n} from \\\"../../../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\n\\nabstract contract BDebtBridgeFromMaker is ConnectorInterface {\\n    using GelatoBytes for bytes;\\n\\n    string public constant OK = \\\"OK\\\";\\n    uint256 internal immutable _id;\\n    address public immutable oracleAggregator;\\n    address public immutable instaFeeCollector;\\n    address public immutable connectGelatoDataFromMakerAddr;\\n    address internal immutable _connectGelatoDebtBridgeFee;\\n\\n    constructor(\\n        uint256 __id,\\n        address _oracleAggregator,\\n        address __instaFeeCollector,\\n        address __connectGelatoDebtBridgeFee\\n    ) {\\n        _id = __id;\\n        oracleAggregator = _oracleAggregator;\\n        instaFeeCollector = __instaFeeCollector;\\n        _connectGelatoDebtBridgeFee = __connectGelatoDebtBridgeFee;\\n        connectGelatoDataFromMakerAddr = address(this);\\n    }\\n\\n    /// @dev Connector Details\\n    function connectorID()\\n        external\\n        view\\n        override\\n        returns (uint256 _type, uint256 id)\\n    {\\n        (_type, id) = (1, _id); // Should put specific value.\\n    }\\n\\n    // ====== ACTION TERMS CHECK ==========\\n    // Overriding IGelatoAction's function (optional)\\n    function termsOk(\\n        uint256, // taskReceipId\\n        address _dsa,\\n        bytes calldata _actionData,\\n        DataFlow,\\n        uint256, // value\\n        uint256 // cycleId\\n    ) public view returns (string memory) {\\n        uint256 vaultId = abi.decode(_actionData[4:36], (uint256));\\n\\n        if (vaultId == 0)\\n            return\\n                string(\\n                    abi.encodePacked(this.name(), \\\": Vault Id is not valid\\\")\\n                );\\n        if (!_isVaultOwner(vaultId, _dsa))\\n            return\\n                string(\\n                    abi.encodePacked(this.name(), \\\": Vault not owned by dsa\\\")\\n                );\\n        return OK;\\n    }\\n\\n    function _cast(address[] memory targets, bytes[] memory datas) internal {\\n        // Instapool V2 / FlashLoan call\\n        bytes memory castData =\\n            abi.encodeWithSelector(\\n                AccountInterface.cast.selector,\\n                targets,\\n                datas,\\n                msg.sender // msg.sender == GelatoCore\\n            );\\n\\n        (bool success, bytes memory returndata) =\\n            address(this).delegatecall(castData);\\n        if (!success) {\\n            returndata.revertWithError(\\n                string(\\n                    abi.encodePacked(\\n                        ConnectorInterface(connectGelatoDataFromMakerAddr)\\n                            .name(),\\n                        \\\"._cast:\\\"\\n                    )\\n                )\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfb5e77de8cf92667fc52c1253c8cf1a4b7441a1df81a12695a77bc16d9ad7b08\",\"license\":\"UNLICENSED\"},\"contracts/contracts/Instadapp/connectors/debt_bridge/from_maker/ConnectGelatoDataMakerToMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IConnectInstaPoolV2\\n} from \\\"../../../../../interfaces/InstaDapp/connectors/IConnectInstaPoolV2.sol\\\";\\nimport {DAI, ETH} from \\\"../../../../../constants/CTokens.sol\\\";\\nimport {\\n    CONNECT_MAKER,\\n    INSTA_POOL_V2,\\n    CONNECT_BASIC,\\n    CONNECT_FEE\\n} from \\\"../../../../../constants/CInstaDapp.sol\\\";\\nimport {\\n    _getMakerVaultDebt,\\n    _getMakerVaultCollateralBalance,\\n    _isVaultOwner\\n} from \\\"../../../../../functions/dapps/FMaker.sol\\\";\\nimport {\\n    _encodeFlashPayback\\n} from \\\"../../../../../functions/InstaDapp/connectors/FInstaPoolV2.sol\\\";\\nimport {\\n    _encodePaybackMakerVault,\\n    _encodedWithdrawMakerVault,\\n    _encodeOpenMakerVault,\\n    _encodedDepositMakerVault,\\n    _encodeBorrowMakerVault\\n} from \\\"../../../../../functions/InstaDapp/connectors/FConnectMaker.sol\\\";\\nimport {\\n    _encodeBasicWithdraw\\n} from \\\"../../../../../functions/InstaDapp/connectors/FConnectBasic.sol\\\";\\nimport {\\n    _encodeCalculateFee\\n} from \\\"../../../../../functions/InstaDapp/connectors/FConnectDebtBridgeFee.sol\\\";\\nimport {\\n    _getGelatoExecutorFees\\n} from \\\"../../../../../functions/gelato/FGelato.sol\\\";\\nimport {\\n    _getFlashLoanRoute,\\n    _getGasCostMakerToMaker,\\n    _getRealisedDebt\\n} from \\\"../../../../../functions/gelato/FGelatoDebtBridge.sol\\\";\\nimport {\\n    IInstaFeeCollector\\n} from \\\"../../../../../interfaces/InstaDapp/IInstaFeeCollector.sol\\\";\\nimport {BDebtBridgeFromMaker} from \\\"../../base/BDebtBridgeFromMaker.sol\\\";\\nimport {\\n    IOracleAggregator\\n} from \\\"../../../../../interfaces/gelato/IOracleAggregator.sol\\\";\\nimport {_convertTo18} from \\\"../../../../../vendor/Convert.sol\\\";\\nimport {GELATO_EXECUTOR_MODULE} from \\\"../../../../../constants/CGelato.sol\\\";\\n\\ncontract ConnectGelatoDataMakerToMaker is BDebtBridgeFromMaker {\\n    // solhint-disable const-name-snakecase\\n    string public constant override name = \\\"ConnectGelatoDataMakerToMaker-v3.0\\\";\\n\\n    // solhint-disable no-empty-blocks\\n    constructor(\\n        uint256 __id,\\n        address _oracleAggregator,\\n        address __instaFeeCollector,\\n        address __connectGelatoDebtBridgeFee\\n    )\\n        BDebtBridgeFromMaker(\\n            __id,\\n            _oracleAggregator,\\n            __instaFeeCollector,\\n            __connectGelatoDebtBridgeFee\\n        )\\n    {}\\n\\n    /// @notice Entry Point for DSA.cast DebtBridge from e.g ETH-A to ETH-B\\n    /// @dev payable to be compatible in conjunction with DSA.cast payable target\\n    /// @param _vaultAId Id of the unsafe vault of the client of Vault A Collateral.\\n    /// @param _vaultBId Id of the vault B Collateral of the client.\\n    /// @param _colType colType of the new vault. example : ETH-B, ETH-A.\\n    function getDataAndCastMakerToMaker(\\n        uint256 _vaultAId,\\n        uint256 _vaultBId,\\n        string calldata _colType\\n    ) external payable {\\n        (address[] memory targets, bytes[] memory datas) =\\n            _dataMakerToMaker(_vaultAId, _vaultBId, _colType);\\n\\n        _cast(targets, datas);\\n    }\\n\\n    /* solhint-disable function-max-lines */\\n\\n    function _dataMakerToMaker(\\n        uint256 _vaultAId,\\n        uint256 _vaultBId,\\n        string calldata _colType\\n    ) internal view returns (address[] memory targets, bytes[] memory datas) {\\n        targets = new address[](1);\\n        targets[0] = INSTA_POOL_V2;\\n\\n        _vaultBId = _isVaultOwner(_vaultBId, address(this)) ? _vaultBId : 0;\\n\\n        uint256 daiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_vaultAId));\\n        uint256 wColToWithdrawFromMaker =\\n            _getMakerVaultCollateralBalance(_vaultAId);\\n\\n        uint256 route = _getFlashLoanRoute(DAI, _vaultAId, daiToBorrow);\\n\\n        (uint256 gasFeesPaidFromDebt, uint256 decimals) =\\n            IOracleAggregator(oracleAggregator).getExpectedReturnAmount(\\n                _getGelatoExecutorFees(\\n                    _getGasCostMakerToMaker(_vaultBId == 0, route)\\n                ),\\n                ETH,\\n                DAI\\n            );\\n\\n        gasFeesPaidFromDebt = _convertTo18(decimals, gasFeesPaidFromDebt);\\n\\n        (address[] memory _targets, bytes[] memory _datas) =\\n            _vaultBId == 0\\n                ? _spellsMakerToNewMakerVault(\\n                    _vaultAId,\\n                    _colType,\\n                    daiToBorrow,\\n                    wColToWithdrawFromMaker,\\n                    gasFeesPaidFromDebt\\n                )\\n                : _spellsMakerToMaker(\\n                    _vaultAId,\\n                    _vaultBId,\\n                    daiToBorrow,\\n                    wColToWithdrawFromMaker,\\n                    gasFeesPaidFromDebt\\n                );\\n\\n        datas = new bytes[](1);\\n        datas[0] = abi.encodeWithSelector(\\n            IConnectInstaPoolV2.flashBorrowAndCast.selector,\\n            DAI,\\n            daiToBorrow,\\n            route,\\n            abi.encode(_targets, _datas)\\n        );\\n    }\\n\\n    function _spellsMakerToNewMakerVault(\\n        uint256 _vaultAId,\\n        string calldata _colType,\\n        uint256 _daiDebtAmt,\\n        uint256 _colToWithdrawFromMaker,\\n        uint256 _gasFeesPaidFromDebt\\n    ) internal view returns (address[] memory targets, bytes[] memory datas) {\\n        targets = new address[](9);\\n        targets[0] = CONNECT_MAKER; // payback\\n        targets[1] = CONNECT_MAKER; // withdraw\\n        targets[2] = _connectGelatoDebtBridgeFee; // calculate fee\\n        targets[3] = CONNECT_MAKER; // open new B vault\\n        targets[4] = CONNECT_MAKER; // deposit\\n        targets[5] = CONNECT_MAKER; // borrow\\n        targets[6] = CONNECT_BASIC; // user pay fee to fee collector\\n        targets[7] = CONNECT_BASIC; // user pay fast transaction fee to executor\\n        targets[8] = INSTA_POOL_V2; // flashPayback\\n\\n        datas = new bytes[](9);\\n        datas[0] = _encodePaybackMakerVault(\\n            _vaultAId,\\n            type(uint256).max,\\n            0,\\n            600\\n        );\\n        datas[1] = _encodedWithdrawMakerVault(\\n            _vaultAId,\\n            type(uint256).max,\\n            0,\\n            0\\n        );\\n        datas[2] = _encodeCalculateFee(\\n            0,\\n            _gasFeesPaidFromDebt,\\n            IInstaFeeCollector(instaFeeCollector).fee(),\\n            600,\\n            600,\\n            601\\n        );\\n        datas[3] = _encodeOpenMakerVault(_colType);\\n        datas[4] = _encodedDepositMakerVault(0, _colToWithdrawFromMaker, 0, 0);\\n        datas[5] = _encodeBorrowMakerVault(0, 0, 600, 0);\\n        datas[6] = _encodeBasicWithdraw(\\n            DAI,\\n            0,\\n            IInstaFeeCollector(instaFeeCollector).feeCollector(),\\n            601,\\n            0\\n        );\\n        datas[7] = _encodeBasicWithdraw(\\n            DAI,\\n            _gasFeesPaidFromDebt,\\n            payable(GELATO_EXECUTOR_MODULE),\\n            0,\\n            0\\n        );\\n        datas[8] = _encodeFlashPayback(DAI, _daiDebtAmt, 0, 0);\\n    }\\n\\n    function _spellsMakerToMaker(\\n        uint256 _vaultAId,\\n        uint256 _vaultBId,\\n        uint256 _daiDebtAmt,\\n        uint256 _colToWithdrawFromMaker,\\n        uint256 _gasFeesPaidFromDebt\\n    ) internal view returns (address[] memory targets, bytes[] memory datas) {\\n        targets = new address[](8);\\n        targets[0] = CONNECT_MAKER; // payback\\n        targets[1] = CONNECT_MAKER; // withdraw\\n        targets[2] = _connectGelatoDebtBridgeFee; // calculate fee\\n        targets[3] = CONNECT_MAKER; // deposit\\n        targets[4] = CONNECT_MAKER; // borrow\\n        targets[5] = CONNECT_BASIC; // pay fee to instadapp fee collector\\n        targets[6] = CONNECT_BASIC; // pay fast transaction fee to gelato executor\\n        targets[7] = INSTA_POOL_V2; // flashPayback\\n\\n        datas = new bytes[](8);\\n        datas[0] = _encodePaybackMakerVault(\\n            _vaultAId,\\n            type(uint256).max,\\n            0,\\n            600\\n        );\\n        datas[1] = _encodedWithdrawMakerVault(\\n            _vaultAId,\\n            type(uint256).max,\\n            0,\\n            0\\n        );\\n        datas[2] = _encodeCalculateFee(\\n            0,\\n            _gasFeesPaidFromDebt,\\n            IInstaFeeCollector(instaFeeCollector).fee(),\\n            600,\\n            600,\\n            601\\n        );\\n        datas[3] = _encodedDepositMakerVault(\\n            _vaultBId,\\n            _colToWithdrawFromMaker,\\n            0,\\n            0\\n        );\\n        datas[4] = _encodeBorrowMakerVault(_vaultBId, 0, 600, 0);\\n        datas[5] = _encodeBasicWithdraw(\\n            DAI,\\n            0,\\n            IInstaFeeCollector(instaFeeCollector).feeCollector(),\\n            601,\\n            0\\n        );\\n        datas[6] = _encodeBasicWithdraw(\\n            DAI,\\n            _gasFeesPaidFromDebt,\\n            payable(GELATO_EXECUTOR_MODULE),\\n            0,\\n            0\\n        );\\n        datas[7] = _encodeFlashPayback(DAI, _daiDebtAmt, 0, 0);\\n    }\\n\\n    /* solhint-enable function-max-lines */\\n}\\n\",\"keccak256\":\"0x1827547fbdc9358ad32ef18022d825e8a766b6fa07523993b6d774875fb36e1a\",\"license\":\"UNLICENSED\"},\"contracts/functions/InstaDapp/connectors/FConnectBasic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IConnectBasic\\n} from \\\"../../../interfaces/InstaDapp/connectors/IConnectBasic.sol\\\";\\n\\nfunction _encodeBasicWithdraw(\\n    address _erc20,\\n    uint256 _tokenAmt,\\n    address payable _to,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectBasic.withdraw.selector,\\n            _erc20,\\n            _tokenAmt,\\n            _to,\\n            _getId,\\n            _setId\\n        );\\n}\\n\",\"keccak256\":\"0x6950c59a31a802d52f39a0b243fc9f626f37b091c3c2b449ee2e10c561e27aa8\",\"license\":\"UNLICENSED\"},\"contracts/functions/InstaDapp/connectors/FConnectDebtBridgeFee.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IConnectDebtBridgeFee\\n} from \\\"../../../interfaces/InstaDapp/connectors/IConnectDebtBridgeFee.sol\\\";\\n\\nfunction _encodeCalculateFee(\\n    uint256 _amount,\\n    uint256 _ftf,\\n    uint256 _fee,\\n    uint256 _getId,\\n    uint256 _setId,\\n    uint256 _setIdFee\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectDebtBridgeFee.calculateFee.selector,\\n            _amount,\\n            _ftf,\\n            _fee,\\n            _getId,\\n            _setId,\\n            _setIdFee\\n        );\\n}\\n\",\"keccak256\":\"0x145f1a4b37d13161488750817919f24ad0678794d16eeef0f3464ddc746d6f0e\",\"license\":\"UNLICENSED\"},\"contracts/functions/InstaDapp/connectors/FConnectMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IConnectMaker\\n} from \\\"../../../interfaces/InstaDapp/connectors/IConnectMaker.sol\\\";\\n\\nfunction _encodeOpenMakerVault(string memory _colType)\\n    pure\\n    returns (bytes memory)\\n{\\n    return abi.encodeWithSelector(IConnectMaker.open.selector, _colType);\\n}\\n\\nfunction _encodeBorrowMakerVault(\\n    uint256 _vaultId,\\n    uint256 _amt,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectMaker.borrow.selector,\\n            _vaultId,\\n            _amt,\\n            _getId,\\n            _setId\\n        );\\n}\\n\\nfunction _encodedDepositMakerVault(\\n    uint256 _vaultId,\\n    uint256 _amt,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectMaker.deposit.selector,\\n            _vaultId,\\n            _amt,\\n            _getId,\\n            _setId\\n        );\\n}\\n\\nfunction _encodePaybackMakerVault(\\n    uint256 _vaultId,\\n    uint256 _amt,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectMaker.payback.selector,\\n            _vaultId,\\n            _amt,\\n            _getId,\\n            _setId\\n        );\\n}\\n\\nfunction _encodedWithdrawMakerVault(\\n    uint256 _vaultId,\\n    uint256 _amt,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectMaker.withdraw.selector,\\n            _vaultId,\\n            _amt,\\n            _getId,\\n            _setId\\n        );\\n}\\n\",\"keccak256\":\"0x43c0f2196539f848c57f3abfeb55dd2a7f25c6348ac63b6730cbdbb58230cd76\",\"license\":\"UNLICENSED\"},\"contracts/functions/InstaDapp/connectors/FInstaPoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IConnectInstaPoolV2\\n} from \\\"../../../interfaces/InstaDapp/connectors/IConnectInstaPoolV2.sol\\\";\\n\\nfunction _encodeFlashPayback(\\n    address _token,\\n    uint256 _amt,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectInstaPoolV2.flashPayback.selector,\\n            _token,\\n            _amt,\\n            _getId,\\n            _setId\\n        );\\n}\\n\",\"keccak256\":\"0xc5f20940ac3ce5cc7eb5fed38d09eb701a940331d7eb1e9c83fcea05632c704b\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IAaveProtocolDataProvider\\n} from \\\"../../interfaces/dapps/Aave/IAaveProtocolDataProvider.sol\\\";\\nimport {\\n    ILendingPoolAddressesProvider\\n} from \\\"../../interfaces/dapps/Aave/ILendingPoolAddressesProvider.sol\\\";\\nimport {\\n    ChainLinkInterface\\n} from \\\"../../interfaces/dapps/Aave/ChainLinkInterface.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/dapps/Aave/ILendingPool.sol\\\";\\nimport {WETH, ETH} from \\\"../../constants/CTokens.sol\\\";\\nimport {AaveUserData} from \\\"../../structs/SAave.sol\\\";\\nimport {\\n    LENDING_POOL_ADDRESSES_PROVIDER,\\n    CHAINLINK_ETH_FEED,\\n    AAVE_PROTOCOL_DATA_PROVIDER,\\n    LENDING_POOL_CORE_V1\\n} from \\\"../../constants/CAave.sol\\\";\\nimport {ETH, WETH} from \\\"../../constants/CTokens.sol\\\";\\nimport {IERC20} from \\\"../../interfaces/dapps/IERC20.sol\\\";\\n\\nfunction _getEtherPrice() view returns (uint256 ethPrice) {\\n    ethPrice = uint256(ChainLinkInterface(CHAINLINK_ETH_FEED).latestAnswer());\\n}\\n\\nfunction _getUserData(address user)\\n    view\\n    returns (AaveUserData memory userData)\\n{\\n    (\\n        uint256 totalCollateralETH,\\n        uint256 totalDebtETH,\\n        uint256 availableBorrowsETH,\\n        uint256 currentLiquidationThreshold,\\n        uint256 ltv,\\n        uint256 healthFactor\\n    ) =\\n        ILendingPool(\\n            ILendingPoolAddressesProvider(LENDING_POOL_ADDRESSES_PROVIDER)\\n                .getLendingPool()\\n        )\\n            .getUserAccountData(user);\\n\\n    userData = AaveUserData(\\n        totalCollateralETH,\\n        totalDebtETH,\\n        availableBorrowsETH,\\n        currentLiquidationThreshold,\\n        ltv,\\n        healthFactor,\\n        _getEtherPrice()\\n    );\\n}\\n\\nfunction _getAssetLiquidationThreshold(address _token)\\n    view\\n    returns (uint256 liquidationThreshold)\\n{\\n    (, , liquidationThreshold, , , , , , , ) = IAaveProtocolDataProvider(\\n        AAVE_PROTOCOL_DATA_PROVIDER\\n    )\\n        .getReserveConfigurationData(_getTokenAddr(_token));\\n}\\n\\nfunction _getTokenAddr(address _token) pure returns (address) {\\n    return _token == ETH ? WETH : _token;\\n}\\n\\nfunction _getTokenLiquidity(address _token) view returns (uint256) {\\n    return\\n        IERC20(_token).balanceOf(\\n            ILendingPool(\\n                ILendingPoolAddressesProvider(LENDING_POOL_ADDRESSES_PROVIDER)\\n                    .getLendingPool()\\n            )\\n                .getReserveData(_token)\\n                .aTokenAddress\\n        );\\n}\\n\\nfunction _isAaveUnderlyingLiquid(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (bool)\\n{\\n    return _getTokenLiquidity(_debtToken) > _debtAmt;\\n}\\n\\nfunction _isAaveUnderlyingLiquidV1(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (bool)\\n{\\n    return IERC20(_debtToken).balanceOf(LENDING_POOL_CORE_V1) > _debtAmt;\\n}\\n\",\"keccak256\":\"0x1e3f5721df597ace0d0e7ea70194f17a6d6416fae4aef3838e4e1c0533c31117\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {INSTA_MAPPING} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {COMPTROLLER} from \\\"../../constants/CCompound.sol\\\";\\nimport {InstaMapping} from \\\"../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {ICToken} from \\\"../../interfaces/dapps/Compound/ICToken.sol\\\";\\nimport {IComptroller} from \\\"../../interfaces/dapps/Compound/IComptroller.sol\\\";\\nimport {IPriceOracle} from \\\"../../interfaces/dapps/Compound/IPriceOracle.sol\\\";\\n\\nfunction _getCToken(address _token) view returns (address) {\\n    return InstaMapping(INSTA_MAPPING).cTokenMapping(_token);\\n}\\n\\nfunction _wouldCompoundAccountBeLiquid(\\n    address _dsa,\\n    address _cColToken,\\n    uint256 _colAmt,\\n    address _cDebtToken,\\n    uint256 _debtAmt\\n) view returns (bool) {\\n    IComptroller comptroller = IComptroller(COMPTROLLER);\\n    IPriceOracle priceOracle = IPriceOracle(comptroller.oracle());\\n\\n    (, uint256 collateralFactor, ) = comptroller.markets(_cColToken);\\n    (uint256 error, uint256 liquidity, uint256 shortfall) =\\n        comptroller.getAccountLiquidity(_dsa);\\n\\n    require(error == 0, \\\"Get Account Liquidity function failed.\\\");\\n\\n    return\\n        mulScalarTruncateAddUInt(\\n            mul_expScale(collateralFactor, _colAmt),\\n            priceOracle.getUnderlyingPrice(ICToken(_cColToken)),\\n            liquidity\\n        ) >\\n        mulScalarTruncateAddUInt(\\n            _debtAmt,\\n            priceOracle.getUnderlyingPrice(ICToken(_cDebtToken)),\\n            shortfall\\n        );\\n}\\n\\nfunction _isCompoundUnderlyingLiquidity(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (bool)\\n{\\n    return ICToken(_getCToken(_debtToken)).getCash() > _debtAmt;\\n}\\n\\n// Compound Math Function\\n\\nfunction mulScalarTruncateAddUInt(\\n    uint256 _a,\\n    uint256 _b,\\n    uint256 _addend\\n) pure returns (uint256) {\\n    return mul_expScale(_a, _b) + _addend;\\n}\\n\\nfunction mul_expScale(uint256 _a, uint256 _b) pure returns (uint256) {\\n    return (_a * _b) / 1e18;\\n}\\n\\n// Compound Math Function\\n\",\"keccak256\":\"0xf8e3136bb9aa509dd01ac64ef34782be51c8bddb032c41719bdc8d43eb20de4d\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {MCD_MANAGER} from \\\"../../constants/CMaker.sol\\\";\\nimport {INSTA_MAPPING} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {\\n    ITokenJoinInterface\\n} from \\\"../../interfaces/dapps/Maker/ITokenJoinInterface.sol\\\";\\nimport {IMcdManager} from \\\"../../interfaces/dapps/Maker/IMcdManager.sol\\\";\\nimport {InstaMapping} from \\\"../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {IVat} from \\\"../../interfaces/dapps/Maker/IVat.sol\\\";\\nimport {RAY, add, sub, mul} from \\\"../../vendor/DSMath.sol\\\";\\nimport {_stringToBytes32, _convertTo18} from \\\"../../vendor/Convert.sol\\\";\\n\\nfunction _getMakerVaultDebt(uint256 _vaultId) view returns (uint256 wad) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, , , ) = vat.ilks(ilk);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n    uint256 dai = vat.dai(urn);\\n\\n    uint256 rad = sub(mul(art, rate), dai);\\n    wad = rad / RAY;\\n\\n    wad = mul(wad, RAY) < rad ? wad + 1 : wad;\\n}\\n\\nfunction _getMakerRawVaultDebt(uint256 _vaultId) view returns (uint256 tab) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, , , ) = vat.ilks(ilk);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n\\n    uint256 rad = mul(art, rate);\\n\\n    tab = rad / RAY;\\n    tab = mul(tab, RAY) < rad ? tab + 1 : tab;\\n}\\n\\nfunction _getMakerVaultCollateralBalance(uint256 _vaultId)\\n    view\\n    returns (uint256)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    IVat vat = IVat(manager.vat());\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    (uint256 ink, ) = vat.urns(ilk, urn);\\n\\n    return ink;\\n}\\n\\nfunction _vaultWillBeSafe(\\n    uint256 _vaultId,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    require(_vaultId != 0, \\\"_vaultWillBeSafe: invalid vault id.\\\");\\n\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n\\n    ITokenJoinInterface tokenJoinContract =\\n        ITokenJoinInterface(InstaMapping(INSTA_MAPPING).gemJoinMapping(ilk));\\n\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, uint256 spot, , ) = vat.ilks(ilk);\\n    (uint256 ink, uint256 art) = vat.urns(ilk, urn);\\n    uint256 dai = vat.dai(urn);\\n\\n    uint256 dink = _convertTo18(tokenJoinContract.dec(), _colAmt);\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n\\n    ink = add(ink, dink);\\n    art = add(art, dart);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab <= mul(ink, spot);\\n}\\n\\nfunction _newVaultWillBeSafe(\\n    string memory _colType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (, uint256 rate, uint256 spot, , ) = vat.ilks(ilk);\\n\\n    ITokenJoinInterface tokenJoinContract =\\n        ITokenJoinInterface(InstaMapping(INSTA_MAPPING).gemJoinMapping(ilk));\\n\\n    uint256 ink = _convertTo18(tokenJoinContract.dec(), _colAmt);\\n    uint256 art = _getDebtAmt(_daiDebtAmt, 0, rate);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab <= mul(ink, spot);\\n}\\n\\nfunction _debtCeilingIsReachedNewVault(\\n    string memory _colType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (uint256 Art, uint256 rate, , uint256 line, ) = vat.ilks(ilk);\\n    uint256 Line = vat.Line();\\n    uint256 debt = vat.debt();\\n\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, 0, rate);\\n    uint256 dtab = mul(rate, dart);\\n\\n    debt = add(debt, dtab);\\n    Art = add(Art, dart);\\n\\n    return mul(Art, rate) > line || debt > Line;\\n}\\n\\nfunction _debtCeilingIsReached(uint256 _vaultId, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n\\n    (uint256 Art, uint256 rate, , uint256 line, ) = vat.ilks(ilk);\\n    uint256 dai = vat.dai(urn);\\n    uint256 Line = vat.Line();\\n    uint256 debt = vat.debt();\\n\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n    uint256 dtab = mul(rate, dart);\\n\\n    debt = add(debt, dtab);\\n    Art = add(Art, dart);\\n\\n    return mul(Art, rate) > line || debt > Line;\\n}\\n\\nfunction _debtIsDustNewVault(string memory _colType, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (, uint256 rate, , , uint256 dust) = vat.ilks(ilk);\\n    uint256 art = _getDebtAmt(_daiDebtAmt, 0, rate);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab < dust;\\n}\\n\\nfunction _debtIsDust(uint256 _vaultId, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n    (, uint256 rate, , , uint256 dust) = vat.ilks(ilk);\\n\\n    uint256 dai = vat.dai(urn);\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n    art = add(art, dart);\\n    uint256 tab = mul(rate, art);\\n\\n    return tab < dust;\\n}\\n\\nfunction _getVaultData(IMcdManager _manager, uint256 _vault)\\n    view\\n    returns (bytes32 ilk, address urn)\\n{\\n    ilk = _manager.ilks(_vault);\\n    urn = _manager.urns(_vault);\\n}\\n\\nfunction _getDebtAmt(\\n    uint256 _amt,\\n    uint256 _dai,\\n    uint256 _rate\\n) pure returns (uint256 dart) {\\n    dart = sub(mul(_amt, RAY), _dai) / _rate;\\n    dart = mul(dart, _rate) < mul(_amt, RAY) ? dart + 1 : dart;\\n}\\n\\nfunction _isVaultOwner(uint256 _vaultId, address _owner) view returns (bool) {\\n    if (_vaultId == 0) return false;\\n\\n    try IMcdManager(MCD_MANAGER).owns(_vaultId) returns (address owner) {\\n        return _owner == owner;\\n    } catch Error(string memory error) {\\n        revert(string(abi.encodePacked(\\\"FMaker._isVaultOwner:\\\", error)));\\n    } catch {\\n        revert(\\\"FMaker._isVaultOwner:undefined\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9a36cfb605947e1c73e96b95be4e34d2c913f23386d86be1923b34f3511a772a\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/FGelato.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {GELATO_GAS_PRICE_ORACLE} from \\\"../../constants/CGelato.sol\\\";\\nimport {mul} from \\\"../../vendor/DSMath.sol\\\";\\n\\nfunction _getGelatoGasPrice() view returns (uint256) {\\n    int256 oracleGasPrice = GELATO_GAS_PRICE_ORACLE.latestAnswer();\\n    if (oracleGasPrice <= 0) revert(\\\"_getGelatoGasPrice:0orBelow\\\");\\n    return uint256(oracleGasPrice);\\n}\\n\\nfunction _getGelatoExecutorFees(uint256 _gas) view returns (uint256) {\\n    return mul(_gas, _getGelatoGasPrice());\\n}\\n\",\"keccak256\":\"0x465e09df3c9d5dba7468a625f98bf3a543eaab1eeb0caf35436bf42722dd17e8\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/FGelatoDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {wmul, wdiv} from \\\"../../vendor/DSMath.sol\\\";\\nimport {\\n    INSTA_POOL_RESOLVER,\\n    ROUTE_1_TOLERANCE\\n} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {DebtBridgeInputData} from \\\"../../structs/SDebtBridge.sol\\\";\\nimport {\\n    _canDoMakerToAaveDebtBridge,\\n    _canDoMakerToMakerDebtBridge,\\n    _canDoMakerToCompoundDebtBridge\\n} from \\\"./conditions/FCanDoRefinance.sol\\\";\\nimport {\\n    PROTOCOL,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE,\\n    FAST_TX_FEE,\\n    VAULT_CREATION_COST\\n} from \\\"../../constants/CDebtBridge.sol\\\";\\nimport {\\n    IInstaPoolResolver\\n} from \\\"../../interfaces/InstaDapp/resolvers/IInstaPoolResolver.sol\\\";\\nimport {_getMakerVaultDebt, _debtCeilingIsReached} from \\\"../dapps/FMaker.sol\\\";\\nimport {_isAaveUnderlyingLiquidV1} from \\\"../dapps/FAave.sol\\\";\\nimport {_isCompoundUnderlyingLiquidity} from \\\"../dapps/FCompound.sol\\\";\\nimport {_getGelatoExecutorFees} from \\\"./FGelato.sol\\\";\\nimport {DAI, ETH} from \\\"../../constants/CTokens.sol\\\";\\nimport {IOracleAggregator} from \\\"../../interfaces/gelato/IOracleAggregator.sol\\\";\\nimport {_convertTo18} from \\\"../../vendor/Convert.sol\\\";\\n\\nfunction _getFlashLoanRoute(\\n    address _debtToken,\\n    uint256 _vaultId,\\n    uint256 _debtAmt\\n) view returns (uint256) {\\n    IInstaPoolResolver.RouteData memory rData =\\n        IInstaPoolResolver(INSTA_POOL_RESOLVER).getTokenLimit(_debtToken);\\n\\n    if (rData.dydx > _debtAmt) return 0;\\n\\n    if (rData.maker > _debtAmt && !_debtCeilingIsReached(_vaultId, _debtAmt))\\n        return 1;\\n    if (\\n        rData.compound > _debtAmt &&\\n        _isCompoundUnderlyingLiquidity(_debtToken, _debtAmt)\\n    ) return 2;\\n    if (\\n        rData.aave > _debtAmt && _isAaveUnderlyingLiquidV1(_debtToken, _debtAmt)\\n    ) return 3;\\n    revert(\\\"FGelatoDebtBridge._getFlashLoanRoute: illiquid\\\");\\n}\\n\\nfunction _getDebtBridgeRoute(DebtBridgeInputData memory _data)\\n    view\\n    returns (PROTOCOL)\\n{\\n    if (_canDoMakerToAaveDebtBridge(_data)) return PROTOCOL.AAVE;\\n    else if (_canDoMakerToMakerDebtBridge(_data)) return PROTOCOL.MAKER;\\n    else if (_canDoMakerToCompoundDebtBridge(_data)) return PROTOCOL.COMPOUND;\\n    return PROTOCOL.NONE;\\n}\\n\\nfunction _getGasCostMakerToMaker(bool _newVault, uint256 _route)\\n    pure\\n    returns (uint256)\\n{\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToMaker: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            _newVault\\n                ? GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()[_route] +\\n                    VAULT_CREATION_COST\\n                : GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()[_route]\\n        );\\n}\\n\\nfunction _getGasCostMakerToCompound(uint256 _route) pure returns (uint256) {\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToCompound: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND()[_route]\\n        );\\n}\\n\\nfunction _getGasCostMakerToAave(uint256 _route) pure returns (uint256) {\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToAave: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE()[_route]\\n        );\\n}\\n\\nfunction _getGasCostPremium(uint256 _rawGasCost) pure returns (uint256) {\\n    return (_rawGasCost * (100 + FAST_TX_FEE)) / 100;\\n}\\n\\nfunction _getRealisedDebt(uint256 _debtToMove) pure returns (uint256) {\\n    return wmul(_debtToMove, ROUTE_1_TOLERANCE);\\n}\\n\\nfunction _checkRouteIndex(uint256 _route, string memory _revertMsg) pure {\\n    require(_route <= 4, _revertMsg);\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToAave(\\n    uint256 _fromVaultId,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToAave(\\n                _getFlashLoanRoute(DAI, _fromVaultId, wDaiToBorrow)\\n            ),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToCompound(\\n    uint256 _fromVaultId,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToCompound(\\n                _getFlashLoanRoute(DAI, _fromVaultId, wDaiToBorrow)\\n            ),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToMaker(\\n    uint256 _fromVaultId,\\n    bool _newVault,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToMaker(\\n                _newVault,\\n                _getFlashLoanRoute(DAI, _fromVaultId, wDaiToBorrow)\\n            ),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrow(\\n    uint256 _wDaiToBorrow,\\n    uint256 _gasCost,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    (uint256 gasCostInDAI, uint256 decimals) =\\n        IOracleAggregator(_oracleAggregator).getExpectedReturnAmount(\\n            _getGelatoExecutorFees(_gasCost),\\n            ETH,\\n            DAI\\n        );\\n\\n    gasCostInDAI = _convertTo18(decimals, gasCostInDAI);\\n\\n    return _wDaiToBorrow + gasCostInDAI + wmul(_wDaiToBorrow, _fees);\\n}\\n\",\"keccak256\":\"0x05509367c887e2c49b54131c332d387cf76c388db1c7a83bbce8bc2826d5f017\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/FCanDoRefinance.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {_isAaveLiquid} from \\\"./aave/FAaveHasLiquidity.sol\\\";\\nimport {_aavePositionWillBeSafe} from \\\"./aave/FAavePositionWillBeSafe.sol\\\";\\nimport {_isDebtAmtDust} from \\\"./maker/FIsDebtAmtDust.sol\\\";\\nimport {_isDebtCeilingReached} from \\\"./maker/FDebtCeilingIsReached.sol\\\";\\nimport {_destVaultWillBeSafe} from \\\"./maker/FDestVaultWillBeSafe.sol\\\";\\nimport {_cTokenHasLiquidity} from \\\"./compound/FCompoundHasLiquidity.sol\\\";\\nimport {\\n    _compoundPositionWillBeSafe\\n} from \\\"./compound/FCompoundPositionWillBeSafe.sol\\\";\\nimport {DebtBridgeInputData} from \\\"../../../structs/SDebtBridge.sol\\\";\\nimport {DAI} from \\\"../../../constants/CTokens.sol\\\";\\nimport {\\n    _getMaxAmtToBorrow,\\n    _getGasCostMakerToAave,\\n    _getGasCostMakerToCompound,\\n    _getGasCostMakerToMaker\\n} from \\\"../FGelatoDebtBridge.sol\\\";\\n\\nfunction _canDoMakerToAaveDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    uint256 maxBorToAavePos =\\n        _getMaxAmtToBorrow(\\n            _data.debtAmt,\\n            _getGasCostMakerToAave(_data.flashRoute),\\n            _data.fees,\\n            _data.oracleAggregator\\n        );\\n    return\\n        _isAaveLiquid(DAI, maxBorToAavePos) &&\\n        _aavePositionWillBeSafe(\\n            _data.dsa,\\n            _data.colAmt,\\n            _data.colToken,\\n            maxBorToAavePos,\\n            _data.oracleAggregator\\n        );\\n}\\n\\nfunction _canDoMakerToMakerDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    uint256 maxBorToMakerPos =\\n        _getMaxAmtToBorrow(\\n            _data.debtAmt,\\n            _getGasCostMakerToMaker(\\n                _data.makerDestVaultId == 0,\\n                _data.flashRoute\\n            ),\\n            _data.fees,\\n            _data.oracleAggregator\\n        );\\n    return\\n        !_isDebtAmtDust(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            maxBorToMakerPos\\n        ) &&\\n        !_isDebtCeilingReached(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            maxBorToMakerPos\\n        ) &&\\n        _destVaultWillBeSafe(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            _data.colAmt,\\n            maxBorToMakerPos\\n        );\\n}\\n\\nfunction _canDoMakerToCompoundDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    uint256 maxBorToCompPos =\\n        _getMaxAmtToBorrow(\\n            _data.debtAmt,\\n            _getGasCostMakerToCompound(_data.flashRoute),\\n            _data.fees,\\n            _data.oracleAggregator\\n        );\\n\\n    return\\n        _cTokenHasLiquidity(\\n            DAI,\\n            _data.flashRoute == 2\\n                ? _data.debtAmt + maxBorToCompPos\\n                : maxBorToCompPos\\n        ) &&\\n        _compoundPositionWillBeSafe(\\n            _data.dsa,\\n            _data.colToken,\\n            _data.colAmt,\\n            DAI,\\n            maxBorToCompPos\\n        );\\n}\\n\",\"keccak256\":\"0x940ab3420371ffa1889dc90defcc71755b8a7c3785d63a40d83ec42466b18c26\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/aave/FAaveHasLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {_isAaveUnderlyingLiquid} from \\\"../../../dapps/FAave.sol\\\";\\n\\nfunction _isAaveLiquid(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (bool)\\n{\\n    return _isAaveUnderlyingLiquid(_debtToken, _debtAmt);\\n}\\n\",\"keccak256\":\"0xa432626269bd7797e98c1e6a9cdf507ce59df5d545611841d556588eaf68b332\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/aave/FAavePositionWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _getUserData,\\n    _getAssetLiquidationThreshold\\n} from \\\"../../../../functions/dapps/FAave.sol\\\";\\nimport {AaveUserData} from \\\"../../../../structs/SAave.sol\\\";\\nimport {GelatoBytes} from \\\"../../../../lib/GelatoBytes.sol\\\";\\nimport {wdiv, wmul, mul} from \\\"../../../../vendor/DSMath.sol\\\";\\nimport {\\n    IOracleAggregator\\n} from \\\"../../../../interfaces/gelato/IOracleAggregator.sol\\\";\\nimport {ETH, DAI} from \\\"../../../../constants/CTokens.sol\\\";\\nimport {_convertTo18} from \\\"../../../../vendor/Convert.sol\\\";\\n\\nfunction _aavePositionWillBeSafe(\\n    address _dsa,\\n    uint256 _colAmt,\\n    address _colToken,\\n    uint256 _debtAmt,\\n    address _oracleAggregator\\n) view returns (bool) {\\n    uint256 _colAmtInETH;\\n    uint256 _decimals;\\n    IOracleAggregator oracleAggregator = IOracleAggregator(_oracleAggregator);\\n\\n    AaveUserData memory userData = _getUserData(_dsa);\\n\\n    if (_colToken == ETH) _colAmtInETH = _colAmt;\\n    else {\\n        (_colAmtInETH, _decimals) = oracleAggregator.getExpectedReturnAmount(\\n            _colAmt,\\n            _colToken,\\n            ETH\\n        );\\n\\n        _colAmtInETH = _convertTo18(_decimals, _colAmtInETH);\\n    }\\n\\n    (_debtAmt, _decimals) = oracleAggregator.getExpectedReturnAmount(\\n        _debtAmt,\\n        DAI,\\n        ETH\\n    );\\n    _debtAmt = _convertTo18(_decimals, _debtAmt);\\n\\n    //\\n    //                  __\\n    //                  \\\\\\n    //                  /__ (Collateral)i in ETH x (Liquidation Threshold)i\\n    //  HealthFactor =  _________________________________________________\\n    //\\n    //                  Total Borrows in ETH + Total Fees in ETH\\n    //\\n\\n    return\\n        wdiv(\\n            (\\n                (mul(\\n                    userData.currentLiquidationThreshold,\\n                    userData.totalCollateralETH\\n                ) + mul(_colAmtInETH, _getAssetLiquidationThreshold(_colToken)))\\n            ) / 1e4,\\n            userData.totalBorrowsETH + _debtAmt\\n        ) > 1e18;\\n}\\n\",\"keccak256\":\"0x96331066dfa643fef3ebd213c5286b84e2e2a65e796507194cea39f49f4665ac\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/compound/FCompoundHasLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {_isCompoundUnderlyingLiquidity} from \\\"../../../dapps/FCompound.sol\\\";\\n\\nfunction _cTokenHasLiquidity(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (bool)\\n{\\n    return _isCompoundUnderlyingLiquidity(_debtToken, _debtAmt);\\n}\\n\",\"keccak256\":\"0xed55f82047f078ec5436b06e366aa4a2a32af22a17c308d7ea15c12b1a79d603\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/compound/FCompoundPositionWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {DAI} from \\\"../../../../constants/CTokens.sol\\\";\\nimport {\\n    _getCToken,\\n    _wouldCompoundAccountBeLiquid\\n} from \\\"../../../dapps/FCompound.sol\\\";\\n\\nfunction _compoundPositionWillBeSafe(\\n    address _dsa,\\n    address _colToken,\\n    uint256 _colAmt,\\n    address _debtToken,\\n    uint256 _debtAmt\\n) view returns (bool) {\\n    return\\n        _wouldCompoundAccountBeLiquid(\\n            _dsa,\\n            _getCToken(_colToken),\\n            _colAmt,\\n            _getCToken(_debtToken),\\n            _debtAmt\\n        );\\n}\\n\",\"keccak256\":\"0x6e7b6eee8536fdddeee298ba44ccad262605fb9f9195842c5ddb45b56290b7a3\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FDebtCeilingIsReached.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _debtCeilingIsReachedNewVault,\\n    _debtCeilingIsReached,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isDebtCeilingReached(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return\\n        _debtCeilingIsReachedExplicit(_destVaultId, _destColType, _daiDebtAmt);\\n}\\n\\nfunction _debtCeilingIsReachedExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _debtCeilingIsReachedNewVault(_destColType, _daiDebtAmt)\\n            : _debtCeilingIsReached(_destVaultId, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x63d4ac5ebf15e2b820f5f8bacbd7856942c56e3f4c758ac72e2c23122f0bb6ad\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FDestVaultWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _vaultWillBeSafe,\\n    _newVaultWillBeSafe,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _destVaultWillBeSafe(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return\\n        _destVaultWillBeSafeExplicit(\\n            _destVaultId,\\n            _destColType,\\n            _colAmt,\\n            _daiDebtAmt\\n        );\\n}\\n\\nfunction _destVaultWillBeSafeExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _newVaultWillBeSafe(_destColType, _colAmt, _daiDebtAmt)\\n            : _vaultWillBeSafe(_destVaultId, _colAmt, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x02d7a4a2ce335b250eb1cbd445f9d76f90d5a183a86b715c0cf943022393dfb4\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FIsDebtAmtDust.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _debtIsDustNewVault,\\n    _debtIsDust,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isDebtAmtDust(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return _isDebtAmtDustExplicit(_destVaultId, _destColType, _daiDebtAmt);\\n}\\n\\nfunction _isDebtAmtDustExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _debtIsDustNewVault(_destColType, _daiDebtAmt)\\n            : _debtIsDust(_destVaultId, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x3fe2e42cc5cf8221731e7f4dd926e973024eb3efab57b4c4568e45ce70765a20\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/IInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n/// @notice Interface InstaDapp Index\\ninterface IndexInterface {\\n    function connectors(uint256 version) external view returns (address);\\n\\n    function list() external view returns (address);\\n}\\n\\n/// @notice Interface InstaDapp List\\ninterface ListInterface {\\n    function accountID(address _account) external view returns (uint64);\\n}\\n\\n/// @notice Interface InstaDapp InstaMemory\\ninterface MemoryInterface {\\n    function setUint(uint256 _id, uint256 _val) external;\\n\\n    function getUint(uint256 _id) external returns (uint256);\\n}\\n\\n/// @notice Interface InstaDapp Defi Smart Account wallet\\ninterface AccountInterface {\\n    function cast(\\n        address[] calldata _targets,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external payable returns (bytes32[] memory responses);\\n\\n    function version() external view returns (uint256);\\n\\n    function isAuth(address user) external view returns (bool);\\n\\n    function shield() external view returns (bool);\\n}\\n\\ninterface ConnectorInterface {\\n    function connectorID() external view returns (uint256 _type, uint256 _id);\\n\\n    function name() external view returns (string memory);\\n}\\n\\ninterface InstaMapping {\\n    function gemJoinMapping(bytes32) external view returns (address);\\n\\n    function cTokenMapping(address) external view returns (address);\\n}\\n\",\"keccak256\":\"0xe0675f18c98f99ac30d284feec4a1de5feb5f85c8d16c1a9e5cddd739dfb34c7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/IInstaFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IInstaFeeCollector {\\n    function setFeeCollector(address payable _feeCollector) external;\\n\\n    function setFee(uint256 _fee) external;\\n\\n    function fee() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address payable);\\n}\\n\",\"keccak256\":\"0xdb768ade8f511ae26c9de55b9373ad8b4eb8c99ab07a4bf097bfc8f25daa35b6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/connectors/IConnectBasic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IConnectBasic {\\n    function withdraw(\\n        address _erc20,\\n        uint256 _tokenAmt,\\n        address payable _to,\\n        uint256 _getId,\\n        uint256 _setId\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x86285eb2bd902dcc855ccdef25066b508860fdfe5e70c3c5dd3e25bf78e43286\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/connectors/IConnectDebtBridgeFee.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IConnectDebtBridgeFee {\\n    function calculateFee(\\n        uint256 _amount,\\n        uint256 _ftf,\\n        uint256 _fee,\\n        uint256 _getId,\\n        uint256 _setId,\\n        uint256 _setIdFee\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x3c8723204678c41bef4d44962a39394048cd2fad2ff4def7f1590e7684b1f5eb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/connectors/IConnectInstaPoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IConnectInstaPoolV2 {\\n    function flashBorrowAndCast(\\n        address token,\\n        uint256 amt,\\n        uint256 route,\\n        bytes memory data\\n    ) external payable;\\n\\n    function flashPayback(\\n        address token,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa04efafbfb4633a749d6d176a93eb3cce0372db148fc8bd7683d66c0e7114b10\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/connectors/IConnectMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IConnectMaker {\\n    function payback(\\n        uint256 vault,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable;\\n\\n    function borrow(\\n        uint256 vault,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable;\\n\\n    function open(string calldata colType)\\n        external\\n        payable\\n        returns (uint256 vault);\\n\\n    function withdraw(\\n        uint256 vault,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable;\\n\\n    function deposit(\\n        uint256 vault,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x897c528456494fcef3ce3ab0fbfda4ede59c54518ccde0228c7729555dd59bc5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/resolvers/IInstaPoolResolver.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity 0.8.0;\\n\\ninterface IInstaPoolResolver {\\n    struct RouteData {\\n        uint256 dydx;\\n        uint256 maker;\\n        uint256 compound;\\n        uint256 aave;\\n    }\\n\\n    function getTokenLimit(address token)\\n        external\\n        view\\n        returns (RouteData memory);\\n}\\n\",\"keccak256\":\"0xd1e148a8c7d84f528397ac90a23160bfa04df6ad1ec990a2447ddb5ae069dac0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ChainLinkInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ChainLinkInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa28e7bfd15b9353039c764d8203adc9fc066a32db1da3351f10eed6af70c57ad\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/IAaveProtocolDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IAaveProtocolDataProvider {\\n    function getUserReserveData(address asset, address user)\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n}\\n\",\"keccak256\":\"0x8444e5bce4ff4a8715f095a931605e9765bffe3cb206bdf33f4e849cfab85735\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ReserveData} from \\\"../../../structs/SAave.sol\\\";\\n\\ninterface ILendingPool {\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (ReserveData memory);\\n\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function getReservesList() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x1215c59b3edc74953de7c551ee7de24aa00bebf0529f523dea6c99cb1faf5c1b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ILendingPoolAddressesProvider {\\n    function getLendingPool() external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4966d8f93cd89d770c8c5255aa0c266cb7df36adba5b195d0fd5d97960df8f02\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ICToken {\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCash() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x47be032b0dfd57cc06f58eb23c9cb8ec5aeaaee4abd3f620bd0260349e2251c5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ICToken} from \\\"./ICToken.sol\\\";\\n\\ninterface IComptroller {\\n    function getAssetsIn(address account)\\n        external\\n        view\\n        returns (ICToken[] memory);\\n\\n    function oracle() external view returns (address);\\n\\n    function markets(address cToken)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isComped\\n        );\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x5fc09e4cd7cb8f5939269e6232b859a80949a49b03a2d798feba5717225db327\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ICToken} from \\\"./ICToken.sol\\\";\\n\\ninterface IPriceOracle {\\n    function getUnderlyingPrice(ICToken cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa6042bacdf286c327a2fcaa322cbbaa85b6f1407b772f2b5785b58917f6695e9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd0fbf10a1342de2706ae8dd1881ffe09c7bc1f7a3ee93b39a3b5c4acebf24487\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/IMcdManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IMcdManager {\\n    function ilks(uint256) external view returns (bytes32);\\n\\n    function urns(uint256) external view returns (address);\\n\\n    function vat() external view returns (address);\\n\\n    function owns(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x600c309dbdb47e7fb5b5b135e174c5af0fd80a583cc92e9db15868626ea13944\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/ITokenJoinInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ITokenJoinInterface {\\n    function dec() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a73dd7b495b10a6405595d2a72749940cbe62610ea1b4d7ec02f815bf4ed4d6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/IVat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IVat {\\n    function ilks(bytes32)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function dai(address) external view returns (uint256);\\n\\n    function urns(bytes32, address) external view returns (uint256, uint256);\\n\\n    function debt() external view returns (uint256);\\n\\n    // solhint-disable-next-line\\n    function Line() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x562456d1f66878e0dacc113383383c2eb3d4edcb76c9e0ecc04251895f5a453d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/gelato/IGelatoGasPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IGelatoGasPriceOracle {\\n    function latestAnswer() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x5d16f3187c98a910aeb6309f4b5a705237806fba133c7174713a9df7f482cbcb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/gelato/IOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IOracleAggregator {\\n    function getExpectedReturnAmount(\\n        uint256 amountIn,\\n        address inToken,\\n        address outToken\\n    ) external view returns (uint256 returnAmount, uint256 outTokenDecimals);\\n}\\n\",\"keccak256\":\"0xde61cf48c28a17f34bba0327a79af354cff3b92fdbcbe76ea5e0d6b804210b47\",\"license\":\"UNLICENSED\"},\"contracts/lib/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2456950f3849af7457015c291b9a45271ca3497d1c870361878d0f35de41080\",\"license\":\"UNLICENSED\"},\"contracts/structs/SAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// ////////// LendingPool /////////////////\\nstruct AaveUserData {\\n    uint256 totalCollateralETH;\\n    uint256 totalBorrowsETH;\\n    uint256 availableBorrowsETH;\\n    uint256 currentLiquidationThreshold;\\n    uint256 ltv;\\n    uint256 healthFactor;\\n    uint256 ethPriceInUsd;\\n}\\n\\nstruct ReserveConfigurationMap {\\n    uint256 data;\\n}\\n\\nstruct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n}\\n\",\"keccak256\":\"0x10956f70b043a4fdcaa69ceb6d286301ce8da849c0ccd5f5bc83690dab63f843\",\"license\":\"UNLICENSED\"},\"contracts/structs/SDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nstruct DebtBridgeInputData {\\n    address dsa;\\n    uint256 colAmt;\\n    address colToken;\\n    uint256 debtAmt;\\n    address oracleAggregator;\\n    uint256 makerDestVaultId;\\n    string makerDestColType;\\n    uint256 fees;\\n    uint256 flashRoute;\\n}\\n\",\"keccak256\":\"0xec7b95278e03209f89a8c95b53b15d1c3faad51fd733b1f1b3d4d1a36ebd3bdd\",\"license\":\"UNLICENSED\"},\"contracts/vendor/Convert.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {mul as _mul} from \\\"./DSMath.sol\\\";\\n\\nfunction _stringToBytes32(string memory str) pure returns (bytes32 result) {\\n    require(bytes(str).length != 0, \\\"string-empty\\\");\\n    assembly {\\n        result := mload(add(str, 32))\\n    }\\n}\\n\\nfunction _convertTo18(uint256 _dec, uint256 _amt) pure returns (uint256 amt) {\\n    amt = _mul(_amt, 10**(18 - _dec));\\n}\\n\",\"keccak256\":\"0xba31db6ad3b69599bc5a6d8dc27f39fa6795f671af2f69fcd747983c01b799ce\",\"license\":\"UNLICENSED\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: AGPL-3.0-or-later\\\"\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.0;\\n\\nfunction add(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n}\\n\\nfunction sub(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n}\\n\\nfunction mul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n}\\n\\nfunction min(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction max(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nfunction imin(int256 x, int256 y) pure returns (int256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction imax(int256 x, int256 y) pure returns (int256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nuint256 constant WAD = 10**18;\\nuint256 constant RAY = 10**27;\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), WAD / 2) / WAD;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction rmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), RAY / 2) / RAY;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, WAD), y / 2) / y;\\n}\\n\\n//rounds to zero if x*y < RAY / 2\\nfunction rdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, RAY), y / 2) / y;\\n}\\n\\n// This famous algorithm is called \\\"exponentiation by squaring\\\"\\n// and calculates x^n with x as fixed-point and n as regular unsigned.\\n//\\n// It's O(log n), instead of O(n) for naive repeated multiplication.\\n//\\n// These facts are why it works:\\n//\\n//  If n is even, then x^n = (x^2)^(n/2).\\n//  If n is odd,  then x^n = x * x^(n-1),\\n//   and applying the equation for even x gives\\n//    x^n = x * (x^2)^((n-1) / 2).\\n//\\n//  Also, EVM division is flooring and\\n//    floor[(n-1) / 2] = floor[n / 2].\\n//\\nfunction rpow(uint256 x, uint256 n) pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n        x = rmul(x, x);\\n\\n        if (n % 2 != 0) {\\n            z = rmul(z, x);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d7cc87f9c74e3c8d9cfe196e0bdd657f2c4c0fbb588db8cb941066e859ed60a\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b506040516200336d3803806200336d833981016040819052620000359162000089565b6080939093526001600160601b0319606092831b811660a05290821b811660c05291811b9091166101005230901b60e052620000dc565b80516001600160a01b03811681146200008457600080fd5b919050565b600080600080608085870312156200009f578384fd5b84519350620000b1602086016200006c565b9250620000c1604086016200006c565b9150620000d1606086016200006c565b905092959194509250565b60805160a05160601c60c05160601c60e05160601c6101005160601c61320f6200015e60003960008181610feb015261164901526000818161018201526107700152600081816101ef0152818161129d015281816113f5015281816119510152611ad10152600081816101cb01526104b801526000610234015261320f6000f3fe60806040526004361061007b5760003560e01c8063bc95af311161004e578063bc95af31146100f7578063d48fe2801461010c578063eb15f78114610121578063eb9e7126146101445761007b565b806306fdde031461008057806308b0e9ce146100ab5780631263c73c146100cd5780638dffe3f4146100e2575b600080fd5b34801561008c57600080fd5b50610095610164565b6040516100a29190612cc8565b60405180910390f35b3480156100b757600080fd5b506100c0610180565b6040516100a29190612ba1565b6100e06100db3660046128af565b6101a4565b005b3480156100ee57600080fd5b506100c06101c9565b34801561010357600080fd5b506100c06101ed565b34801561011857600080fd5b50610095610211565b34801561012d57600080fd5b5061013661022f565b6040516100a2929190612e41565b34801561015057600080fd5b5061009561015f366004612805565b610256565b6040518060600160405280602281526020016131b86022913981565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806101b3868686866103d2565b915091506101c182826106b2565b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b604051806040016040528060028152602001614f4b60f01b81525081565b6001907f000000000000000000000000000000000000000000000000000000000000000090565b6060600061026860246004888a612e92565b81019061027591906127ed565b90508061031857306001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156102b557600080fd5b505afa1580156102c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102f191908101906126e5565b6040516020016103019190612a7f565b6040516020818303038152906040529150506103c7565b6103228189610831565b6103ab57306001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561035f57600080fd5b505afa158015610373573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261039b91908101906126e5565b6040516020016103019190612ac0565b50506040805180820190915260028152614f4b60f01b60208201525b979650505050505050565b6040805160018082528183019092526060918291906020808301908036833701905050915073eb4bf86589f808f90eec8e964dbf16bd4d2849058260008151811061042d57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506104578530610831565b610462576000610464565b845b9450600061047961047488610945565b610bd1565b9050600061048688610be5565b905060006104a9736b175474e89094c44da98b954eedeac495271d0f8a85610d10565b90506000806001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016633c772b6c6104f06104eb8d1587610e4a565b610ee6565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee736b175474e89094c44da98b954eedeac495271d0f6040518463ffffffff1660e01b815260040161053893929190612e22565b604080518083038186803b15801561054f57600080fd5b505afa158015610563573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610587919061288c565b915091506105958183610ef9565b91506000808b156105b2576105ad8d8d898988610f15565b6105c0565b6105c08d8c8c8a8a89611573565b604080516001808252818301909252929450909250816020015b60608152602001906001900390816105da579050509750638d0a9b1b60e01b736b175474e89094c44da98b954eedeac495271d0f88878585604051602001610623929190612c3c565b60408051601f198184030181529082905261064394939291602401612be9565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050508860008151811061069757634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050505050505094509492505050565b600063e0e90acf60e01b8383336040516024016106d193929190612c6a565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050509050600080306001600160a01b0316836040516107219190612a01565b600060405180830381855af49150503d806000811461075c576040519150601f19603f3d011682016040523d82523d6000602084013e610761565b606091505b50915091508161082a5761082a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156107c757600080fd5b505afa1580156107db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261080391908101906126e5565b6040516020016108139190612b39565b60408051601f198184030181529190528290611c0e565b5050505050565b6000826108405750600061093f565b60405163040b0d8960e51b8152735ef30b9986345249bc32d8928b7ee64de9435e3990638161b12090610877908690600401612ca8565b60206040518083038186803b15801561088f57600080fd5b505afa9250505080156108bf575060408051601f3d908101601f191682019092526108bc918101906126b1565b60015b61092e576108cb6130bc565b806108d65750610916565b806040516020016108e79190612b64565b60408051601f198184030181529082905262461bcd60e51b825261090d91600401612cc8565b60405180910390fd5b60405162461bcd60e51b815260040161090d90612d9d565b6001600160a01b0383811691161490505b92915050565b6000735ef30b9986345249bc32d8928b7ee64de9435e3981806109688386611c7c565b915091506000836001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156109a757600080fd5b505afa1580156109bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109df91906126b1565b90506000816001600160a01b031663d9638d36856040518263ffffffff1660e01b8152600401610a0f9190612ca8565b60a06040518083038186803b158015610a2757600080fd5b505afa158015610a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5f9190612900565b5050509150506000826001600160a01b0316632424be5c86866040518363ffffffff1660e01b8152600401610a95929190612cb1565b604080518083038186803b158015610aac57600080fd5b505afa158015610ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae4919061288c565b9150506000836001600160a01b0316636c25b346866040518263ffffffff1660e01b8152600401610b159190612ba1565b60206040518083038186803b158015610b2d57600080fd5b505afa158015610b41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6591906126cd565b90506000610b7c610b768486611d83565b83611dc3565b9050610b946b033b2e3c9fd0803ce800000082612ed2565b985080610bad8a6b033b2e3c9fd0803ce8000000611d83565b10610bb85788610bc3565b610bc3896001612eba565b9a9950505050505050505050565b600061093f82670df27a2cdf448000611df1565b600080735ef30b9986345249bc32d8928b7ee64de9435e3990506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3a57600080fd5b505afa158015610c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7291906126b1565b9050600080610c818487611c7c565b915091506000836001600160a01b0316632424be5c84846040518363ffffffff1660e01b8152600401610cb5929190612cb1565b604080518083038186803b158015610ccc57600080fd5b505afa158015610ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d04919061288c565b50979650505050505050565b604051635a860c8760e01b8152600090819073a004a5afba04b74037e9e52ba1f7eb02b5e6150990635a860c8790610d4c908890600401612ba1565b60806040518083038186803b158015610d6457600080fd5b505afa158015610d78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9c9190612788565b90508281600001511115610db4576000915050610e43565b828160200151118015610dce5750610dcc8484611e2b565b155b15610ddd576001915050610e43565b828160400151118015610df55750610df5858461211c565b15610e04576002915050610e43565b828160600151118015610e1c5750610e1c85846121a0565b15610e2b576003915050610e43565b60405162461bcd60e51b815260040161090d90612dd4565b9392505050565b6000610e6e826040518060600160405280603e815260200161317a603e91396121fb565b610e4383610ea757610e7e612223565b8360048110610e9d57634e487b7160e01b600052603260045260246000fd5b6020020151610ee1565b62030d40610eb3612223565b8460048110610ed257634e487b7160e01b600052603260045260246000fd5b6020020151610ee19190612eba565b61225e565b600061093f82610ef4612281565b611d83565b6000610e4382610f0a856012613019565b610ef490600a612f2c565b6040805160088082526101208201909252606091829190602082016101008036833701905050915073ac02030d8a8f49ed04b2f52c394d3f901a10f8a982600081518110610f7357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a982600181518110610fc957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008260028151811061102b57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a98260038151811061108157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a9826004815181106110d757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073e5398f279175962e56fe4c5e0b62dc7208ef36c68260058151811061112d57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073e5398f279175962e56fe4c5e0b62dc7208ef36c68260068151811061118357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073eb4bf86589f808f90eec8e964dbf16bd4d284905826007815181106111d957634e487b7160e01b600052603260045260246000fd5b6001600160a01b039290921660209283029190910182015260408051600880825261012082019092529182015b606081526020019060019003908161120657905050905061122e876000196000610258612330565b8160008151811061124f57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506112698760001960008061238d565b8160018151811061128a57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506113386000847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156112f457600080fd5b505afa158015611308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132c91906126cd565b610258806102596123ae565b8160028151811061135957634e487b7160e01b600052603260045260246000fd5b60200260200101819052506113718685600080612411565b8160038151811061139257634e487b7160e01b600052603260045260246000fd5b60200260200101819052506113ad8660006102586000612432565b816004815181106113ce57634e487b7160e01b600052603260045260246000fd5b602002602001018190525061148e736b175474e89094c44da98b954eedeac495271d0f60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561144c57600080fd5b505afa158015611460573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148491906126b1565b6102596000612453565b816005815181106114af57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506114f0736b175474e89094c44da98b954eedeac495271d0f847398edc8067cc671bcae82d36dcc609c3e4e078ac8600080612453565b8160068151811061151157634e487b7160e01b600052603260045260246000fd5b602002602001018190525061153d736b175474e89094c44da98b954eedeac495271d0f866000806124b3565b8160078151811061155e57634e487b7160e01b600052603260045260246000fd5b60200260200101819052509550959350505050565b6040805160098082526101408201909252606091829190602082016101208036833701905050915073ac02030d8a8f49ed04b2f52c394d3f901a10f8a9826000815181106115d157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a98260018151811061162757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008260028151811061168957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a9826003815181106116df57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a98260048151811061173557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a98260058151811061178b57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073e5398f279175962e56fe4c5e0b62dc7208ef36c6826006815181106117e157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073e5398f279175962e56fe4c5e0b62dc7208ef36c68260078151811061183757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073eb4bf86589f808f90eec8e964dbf16bd4d2849058260088151811061188d57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039290921660209283029190910182015260408051600980825261014082019092529182015b60608152602001906001900390816118ba5790505090506118e2886000196000610258612330565b8160008151811061190357634e487b7160e01b600052603260045260246000fd5b602002602001018190525061191d8860001960008061238d565b8160018151811061193e57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506119a86000847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156112f457600080fd5b816002815181106119c957634e487b7160e01b600052603260045260246000fd5b6020026020010181905250611a1387878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506124d492505050565b81600381518110611a3457634e487b7160e01b600052603260045260246000fd5b6020026020010181905250611a4d600085600080612411565b81600481518110611a6e57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250611a896000806102586000612432565b81600581518110611aaa57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250611b28736b175474e89094c44da98b954eedeac495271d0f60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561144c57600080fd5b81600681518110611b4957634e487b7160e01b600052603260045260246000fd5b6020026020010181905250611b8a736b175474e89094c44da98b954eedeac495271d0f847398edc8067cc671bcae82d36dcc609c3e4e078ac8600080612453565b81600781518110611bab57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250611bd7736b175474e89094c44da98b954eedeac495271d0f866000806124b3565b81600881518110611bf857634e487b7160e01b600052603260045260246000fd5b6020026020010181905250965096945050505050565b60208251611c1c9190613060565b60041415611c6b57602082015162461bcd60e51b6001600160e01b031982161415611c5a5760448301925081836040516020016108e7929190612a1d565b816040516020016108e79190612a4c565b806040516020016108e79190612b01565b600080836001600160a01b0316632c2cb9fd846040518263ffffffff1660e01b8152600401611cab9190612ca8565b60206040518083038186803b158015611cc357600080fd5b505afa158015611cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfb91906126cd565b604051632726b07360e01b81529092506001600160a01b03851690632726b07390611d2a908690600401612ca8565b60206040518083038186803b158015611d4257600080fd5b505afa158015611d56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7a91906126b1565b90509250929050565b6000811580611da757508282611d998183612ffa565b9250611da59083612ed2565b145b61093f5760405162461bcd60e51b815260040161090d90612d0a565b600082611dd08382613019565b915081111561093f5760405162461bcd60e51b815260040161090d90612cdb565b6000670de0b6b3a7640000611e21611e098585611d83565b611e1c6002670de0b6b3a7640000612ed2565b612528565b610e439190612ed2565b600080735ef30b9986345249bc32d8928b7ee64de9435e3990506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015611e8057600080fd5b505afa158015611e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb891906126b1565b9050600080611ec78488611c7c565b915091506000806000856001600160a01b031663d9638d36866040518263ffffffff1660e01b8152600401611efc9190612ca8565b60a06040518083038186803b158015611f1457600080fd5b505afa158015611f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4c9190612900565b50935050925092506000866001600160a01b0316636c25b346866040518263ffffffff1660e01b8152600401611f829190612ba1565b60206040518083038186803b158015611f9a57600080fd5b505afa158015611fae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd291906126cd565b90506000876001600160a01b031663babe8a3f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561200f57600080fd5b505afa158015612023573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204791906126cd565b90506000886001600160a01b0316630dca59c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561208457600080fd5b505afa158015612098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120bc91906126cd565b905060006120cb8d8588612556565b905060006120d98783611d83565b90506120e58382612528565b92506120f18883612528565b9750856120fe8989611d83565b118061210957508383115b9f9e505050505050505050505050505050565b600081612128846125c2565b6001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b15801561216057600080fd5b505afa158015612174573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219891906126cd565b119392505050565b600081836001600160a01b03166370a08231733dfd23a6c5e8bbcfc9581d2e864a68feb6a076d36040518263ffffffff1660e01b81526004016121e39190612ba1565b60206040518083038186803b15801561216057600080fd5b80600483111561221e5760405162461bcd60e51b815260040161090d9190612cc8565b505050565b61222b61264c565b604051806080016040528062266fd88152602001622feb948152602001623c97b8815260200162424ca881525090505b90565b6000606461226d601e82612eba565b6122779084612ffa565b61093f9190612ed2565b60008073169e633a2d1e6c10dd91238ba11c4a708dfef37c6001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122d157600080fd5b505afa1580156122e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230991906126cd565b90506000811361232b5760405162461bcd60e51b815260040161090d90612d66565b905090565b606063d5e0da3660e01b858585856040516024016123519493929190612e4f565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050949350505050565b606063674fb1b460e01b858585856040516024016123519493929190612e4f565b606063acd2fd9360e01b8787878787876040516024016123d396959493929190612e6a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509695505050505050565b6060632505c3d960e01b858585856040516024016123519493929190612e4f565b606063111d948260e01b858585856040516024016123519493929190612e4f565b6060634bd3ab8260e01b8686868686604051602401612476959493929190612bb5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152905095945050505050565b606063213980e860e01b858585856040516024016123519493929190612c16565b606063e4dcb06b60e01b826040516024016124ef9190612cc8565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050919050565b6000826125358382612eba565b915081101561093f5760405162461bcd60e51b815260040161090d90612d38565b600081612578612572866b033b2e3c9fd0803ce8000000611d83565b85611dc3565b6125829190612ed2565b905061259a846b033b2e3c9fd0803ce8000000611d83565b6125a48284611d83565b106125af57806125ba565b6125ba816001612eba565b949350505050565b60405163104b29e960e01b815260009073e81f70cc7c0d46e12d70efc60607f16bbd617e889063104b29e9906125fc908590600401612ba1565b60206040518083038186803b15801561261457600080fd5b505afa158015612628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093f91906126b1565b60405180608001604052806004906020820280368337509192915050565b60008083601f84011261267b578182fd5b50813567ffffffffffffffff811115612692578182fd5b6020830191508360208285010111156126aa57600080fd5b9250929050565b6000602082840312156126c2578081fd5b8151610e4381613161565b6000602082840312156126de578081fd5b5051919050565b6000602082840312156126f6578081fd5b815167ffffffffffffffff8082111561270d578283fd5b818401915084601f830112612720578283fd5b815181811115612732576127326130a0565b604051601f8201601f191681016020018381118282101715612756576127566130a0565b60405281815283820160200187101561276d578485fd5b61277e826020830160208701613030565b9695505050505050565b600060808284031215612799578081fd5b6040516080810181811067ffffffffffffffff821117156127bc576127bc6130a0565b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b6000602082840312156127fe578081fd5b5035919050565b600080600080600080600060c0888a03121561281f578283fd5b87359650602088013561283181613161565b9550604088013567ffffffffffffffff81111561284c578384fd5b6128588a828b0161266a565b90965094505060608801356004811061286f578384fd5b969995985093969295946080840135945060a09093013592915050565b6000806040838503121561289e578182fd5b505080516020909101519092909150565b600080600080606085870312156128c4578384fd5b8435935060208501359250604085013567ffffffffffffffff8111156128e8578283fd5b6128f48782880161266a565b95989497509550505050565b600080600080600060a08688031215612917578081fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6000815180845260208085019450808401835b838110156129775781516001600160a01b031687529582019590820190600101612952565b509495945050505050565b6000815180845260208085018081965082840281019150828601855b858110156129c85782840389526129b68483516129d5565b9885019893509084019060010161299e565b5091979650505050505050565b600081518084526129ed816020860160208601613030565b601f01601f19169290920160200192915050565b60008251612a13818460208701613030565b9190910192915050565b60008351612a2f818460208801613030565b835190830190612a43818360208801613030565b01949350505050565b60008251612a5e818460208701613030565b6e2737a2b93937b929b2b632b1ba37b960891b920191825250600f01919050565b60008251612a91818460208701613030565b7f3a205661756c74204964206973206e6f742076616c6964000000000000000000920191825250601701919050565b60008251612ad2818460208701613030565b7f3a205661756c74206e6f74206f776e6564206279206473610000000000000000920191825250601801919050565b60008251612b13818460208701613030565b73556e657870656374656452657475726e6461746160601b920191825250601401919050565b60008251612b4b818460208701613030565b66172fb1b0b9ba1d60c91b920191825250600701919050565b6000742326b0b5b2b9172fb4b9ab30bab63a27bbb732b91d60591b82528251612b94816015850160208701613030565b9190910160150192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03958616815260208101949094529190931660408301526060820192909252608081019190915260a00190565b600060018060a01b03861682528460208301528360408301526080606083015261277e60808301846129d5565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b600060408252612c4f604083018561293f565b8281036020840152612c618185612982565b95945050505050565b600060608252612c7d606083018661293f565b8281036020840152612c8f8186612982565b91505060018060a01b0383166040830152949350505050565b90815260200190565b9182526001600160a01b0316602082015260400190565b600060208252610e4360208301846129d5565b60208082526015908201527464732d6d6174682d7375622d756e646572666c6f7760581b604082015260600190565b60208082526014908201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604082015260600190565b60208082526014908201527364732d6d6174682d6164642d6f766572666c6f7760601b604082015260600190565b6020808252601b908201527f5f67657447656c61746f47617350726963653a306f7242656c6f770000000000604082015260600190565b6020808252601e908201527f464d616b65722e5f69735661756c744f776e65723a756e646566696e65640000604082015260600190565b6020808252602e908201527f4647656c61746f446562744272696467652e5f676574466c6173684c6f616e5260408201526d1bdd5d194e881a5b1b1a5c5d5a5960921b606082015260800190565b9283526001600160a01b03918216602084015216604082015260600190565b918252602082015260400190565b93845260208401929092526040830152606082015260800190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60008085851115612ea1578182fd5b83861115612ead578182fd5b5050820193919092039150565b60008219821115612ecd57612ecd613074565b500190565b600082612ee157612ee161308a565b500490565b80825b6001808611612ef85750612f23565b818704821115612f0a57612f0a613074565b80861615612f1757918102915b9490941c938002612ee9565b94509492505050565b6000610e436000198484600082612f4557506001610e43565b81612f5257506000610e43565b8160018114612f685760028114612f7257612f9f565b6001915050610e43565b60ff841115612f8357612f83613074565b6001841b915084821115612f9957612f99613074565b50610e43565b5060208310610133831016604e8410600b8410161715612fd2575081810a83811115612fcd57612fcd613074565b610e43565b612fdf8484846001612ee6565b808604821115612ff157612ff1613074565b02949350505050565b600081600019048311821515161561301457613014613074565b500290565b60008282101561302b5761302b613074565b500390565b60005b8381101561304b578181015183820152602001613033565b8381111561305a576000848401525b50505050565b60008261306f5761306f61308a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d10156130cc5761225b565b600481823e6308c379a06130e082516130b6565b146130ea5761225b565b6040513d600319016004823e80513d67ffffffffffffffff816024840111818411171561311a575050505061225b565b82840192508251915080821115613134575050505061225b565b503d8301602082840101111561314c5750505061225b565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461317657600080fd5b5056fe4647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f4d616b65723a20696e76616c696420726f75746520696e646578436f6e6e65637447656c61746f446174614d616b6572546f4d616b65722d76332e30a264697066735822122029263fe9aa9240507c1c5aacdaf74bfe68f4dc53c25ab5192aa7a5560eb2de5d64736f6c63430008000033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063bc95af311161004e578063bc95af31146100f7578063d48fe2801461010c578063eb15f78114610121578063eb9e7126146101445761007b565b806306fdde031461008057806308b0e9ce146100ab5780631263c73c146100cd5780638dffe3f4146100e2575b600080fd5b34801561008c57600080fd5b50610095610164565b6040516100a29190612cc8565b60405180910390f35b3480156100b757600080fd5b506100c0610180565b6040516100a29190612ba1565b6100e06100db3660046128af565b6101a4565b005b3480156100ee57600080fd5b506100c06101c9565b34801561010357600080fd5b506100c06101ed565b34801561011857600080fd5b50610095610211565b34801561012d57600080fd5b5061013661022f565b6040516100a2929190612e41565b34801561015057600080fd5b5061009561015f366004612805565b610256565b6040518060600160405280602281526020016131b86022913981565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806101b3868686866103d2565b915091506101c182826106b2565b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b604051806040016040528060028152602001614f4b60f01b81525081565b6001907f000000000000000000000000000000000000000000000000000000000000000090565b6060600061026860246004888a612e92565b81019061027591906127ed565b90508061031857306001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156102b557600080fd5b505afa1580156102c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102f191908101906126e5565b6040516020016103019190612a7f565b6040516020818303038152906040529150506103c7565b6103228189610831565b6103ab57306001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561035f57600080fd5b505afa158015610373573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261039b91908101906126e5565b6040516020016103019190612ac0565b50506040805180820190915260028152614f4b60f01b60208201525b979650505050505050565b6040805160018082528183019092526060918291906020808301908036833701905050915073eb4bf86589f808f90eec8e964dbf16bd4d2849058260008151811061042d57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506104578530610831565b610462576000610464565b845b9450600061047961047488610945565b610bd1565b9050600061048688610be5565b905060006104a9736b175474e89094c44da98b954eedeac495271d0f8a85610d10565b90506000806001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016633c772b6c6104f06104eb8d1587610e4a565b610ee6565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee736b175474e89094c44da98b954eedeac495271d0f6040518463ffffffff1660e01b815260040161053893929190612e22565b604080518083038186803b15801561054f57600080fd5b505afa158015610563573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610587919061288c565b915091506105958183610ef9565b91506000808b156105b2576105ad8d8d898988610f15565b6105c0565b6105c08d8c8c8a8a89611573565b604080516001808252818301909252929450909250816020015b60608152602001906001900390816105da579050509750638d0a9b1b60e01b736b175474e89094c44da98b954eedeac495271d0f88878585604051602001610623929190612c3c565b60408051601f198184030181529082905261064394939291602401612be9565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050508860008151811061069757634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050505050505094509492505050565b600063e0e90acf60e01b8383336040516024016106d193929190612c6a565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050509050600080306001600160a01b0316836040516107219190612a01565b600060405180830381855af49150503d806000811461075c576040519150601f19603f3d011682016040523d82523d6000602084013e610761565b606091505b50915091508161082a5761082a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156107c757600080fd5b505afa1580156107db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261080391908101906126e5565b6040516020016108139190612b39565b60408051601f198184030181529190528290611c0e565b5050505050565b6000826108405750600061093f565b60405163040b0d8960e51b8152735ef30b9986345249bc32d8928b7ee64de9435e3990638161b12090610877908690600401612ca8565b60206040518083038186803b15801561088f57600080fd5b505afa9250505080156108bf575060408051601f3d908101601f191682019092526108bc918101906126b1565b60015b61092e576108cb6130bc565b806108d65750610916565b806040516020016108e79190612b64565b60408051601f198184030181529082905262461bcd60e51b825261090d91600401612cc8565b60405180910390fd5b60405162461bcd60e51b815260040161090d90612d9d565b6001600160a01b0383811691161490505b92915050565b6000735ef30b9986345249bc32d8928b7ee64de9435e3981806109688386611c7c565b915091506000836001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156109a757600080fd5b505afa1580156109bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109df91906126b1565b90506000816001600160a01b031663d9638d36856040518263ffffffff1660e01b8152600401610a0f9190612ca8565b60a06040518083038186803b158015610a2757600080fd5b505afa158015610a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5f9190612900565b5050509150506000826001600160a01b0316632424be5c86866040518363ffffffff1660e01b8152600401610a95929190612cb1565b604080518083038186803b158015610aac57600080fd5b505afa158015610ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae4919061288c565b9150506000836001600160a01b0316636c25b346866040518263ffffffff1660e01b8152600401610b159190612ba1565b60206040518083038186803b158015610b2d57600080fd5b505afa158015610b41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6591906126cd565b90506000610b7c610b768486611d83565b83611dc3565b9050610b946b033b2e3c9fd0803ce800000082612ed2565b985080610bad8a6b033b2e3c9fd0803ce8000000611d83565b10610bb85788610bc3565b610bc3896001612eba565b9a9950505050505050505050565b600061093f82670df27a2cdf448000611df1565b600080735ef30b9986345249bc32d8928b7ee64de9435e3990506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3a57600080fd5b505afa158015610c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7291906126b1565b9050600080610c818487611c7c565b915091506000836001600160a01b0316632424be5c84846040518363ffffffff1660e01b8152600401610cb5929190612cb1565b604080518083038186803b158015610ccc57600080fd5b505afa158015610ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d04919061288c565b50979650505050505050565b604051635a860c8760e01b8152600090819073a004a5afba04b74037e9e52ba1f7eb02b5e6150990635a860c8790610d4c908890600401612ba1565b60806040518083038186803b158015610d6457600080fd5b505afa158015610d78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9c9190612788565b90508281600001511115610db4576000915050610e43565b828160200151118015610dce5750610dcc8484611e2b565b155b15610ddd576001915050610e43565b828160400151118015610df55750610df5858461211c565b15610e04576002915050610e43565b828160600151118015610e1c5750610e1c85846121a0565b15610e2b576003915050610e43565b60405162461bcd60e51b815260040161090d90612dd4565b9392505050565b6000610e6e826040518060600160405280603e815260200161317a603e91396121fb565b610e4383610ea757610e7e612223565b8360048110610e9d57634e487b7160e01b600052603260045260246000fd5b6020020151610ee1565b62030d40610eb3612223565b8460048110610ed257634e487b7160e01b600052603260045260246000fd5b6020020151610ee19190612eba565b61225e565b600061093f82610ef4612281565b611d83565b6000610e4382610f0a856012613019565b610ef490600a612f2c565b6040805160088082526101208201909252606091829190602082016101008036833701905050915073ac02030d8a8f49ed04b2f52c394d3f901a10f8a982600081518110610f7357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a982600181518110610fc957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008260028151811061102b57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a98260038151811061108157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a9826004815181106110d757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073e5398f279175962e56fe4c5e0b62dc7208ef36c68260058151811061112d57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073e5398f279175962e56fe4c5e0b62dc7208ef36c68260068151811061118357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073eb4bf86589f808f90eec8e964dbf16bd4d284905826007815181106111d957634e487b7160e01b600052603260045260246000fd5b6001600160a01b039290921660209283029190910182015260408051600880825261012082019092529182015b606081526020019060019003908161120657905050905061122e876000196000610258612330565b8160008151811061124f57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506112698760001960008061238d565b8160018151811061128a57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506113386000847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156112f457600080fd5b505afa158015611308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132c91906126cd565b610258806102596123ae565b8160028151811061135957634e487b7160e01b600052603260045260246000fd5b60200260200101819052506113718685600080612411565b8160038151811061139257634e487b7160e01b600052603260045260246000fd5b60200260200101819052506113ad8660006102586000612432565b816004815181106113ce57634e487b7160e01b600052603260045260246000fd5b602002602001018190525061148e736b175474e89094c44da98b954eedeac495271d0f60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561144c57600080fd5b505afa158015611460573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148491906126b1565b6102596000612453565b816005815181106114af57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506114f0736b175474e89094c44da98b954eedeac495271d0f847398edc8067cc671bcae82d36dcc609c3e4e078ac8600080612453565b8160068151811061151157634e487b7160e01b600052603260045260246000fd5b602002602001018190525061153d736b175474e89094c44da98b954eedeac495271d0f866000806124b3565b8160078151811061155e57634e487b7160e01b600052603260045260246000fd5b60200260200101819052509550959350505050565b6040805160098082526101408201909252606091829190602082016101208036833701905050915073ac02030d8a8f49ed04b2f52c394d3f901a10f8a9826000815181106115d157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a98260018151811061162757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008260028151811061168957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a9826003815181106116df57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a98260048151811061173557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a98260058151811061178b57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073e5398f279175962e56fe4c5e0b62dc7208ef36c6826006815181106117e157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073e5398f279175962e56fe4c5e0b62dc7208ef36c68260078151811061183757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073eb4bf86589f808f90eec8e964dbf16bd4d2849058260088151811061188d57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039290921660209283029190910182015260408051600980825261014082019092529182015b60608152602001906001900390816118ba5790505090506118e2886000196000610258612330565b8160008151811061190357634e487b7160e01b600052603260045260246000fd5b602002602001018190525061191d8860001960008061238d565b8160018151811061193e57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506119a86000847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156112f457600080fd5b816002815181106119c957634e487b7160e01b600052603260045260246000fd5b6020026020010181905250611a1387878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506124d492505050565b81600381518110611a3457634e487b7160e01b600052603260045260246000fd5b6020026020010181905250611a4d600085600080612411565b81600481518110611a6e57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250611a896000806102586000612432565b81600581518110611aaa57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250611b28736b175474e89094c44da98b954eedeac495271d0f60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561144c57600080fd5b81600681518110611b4957634e487b7160e01b600052603260045260246000fd5b6020026020010181905250611b8a736b175474e89094c44da98b954eedeac495271d0f847398edc8067cc671bcae82d36dcc609c3e4e078ac8600080612453565b81600781518110611bab57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250611bd7736b175474e89094c44da98b954eedeac495271d0f866000806124b3565b81600881518110611bf857634e487b7160e01b600052603260045260246000fd5b6020026020010181905250965096945050505050565b60208251611c1c9190613060565b60041415611c6b57602082015162461bcd60e51b6001600160e01b031982161415611c5a5760448301925081836040516020016108e7929190612a1d565b816040516020016108e79190612a4c565b806040516020016108e79190612b01565b600080836001600160a01b0316632c2cb9fd846040518263ffffffff1660e01b8152600401611cab9190612ca8565b60206040518083038186803b158015611cc357600080fd5b505afa158015611cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfb91906126cd565b604051632726b07360e01b81529092506001600160a01b03851690632726b07390611d2a908690600401612ca8565b60206040518083038186803b158015611d4257600080fd5b505afa158015611d56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7a91906126b1565b90509250929050565b6000811580611da757508282611d998183612ffa565b9250611da59083612ed2565b145b61093f5760405162461bcd60e51b815260040161090d90612d0a565b600082611dd08382613019565b915081111561093f5760405162461bcd60e51b815260040161090d90612cdb565b6000670de0b6b3a7640000611e21611e098585611d83565b611e1c6002670de0b6b3a7640000612ed2565b612528565b610e439190612ed2565b600080735ef30b9986345249bc32d8928b7ee64de9435e3990506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015611e8057600080fd5b505afa158015611e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb891906126b1565b9050600080611ec78488611c7c565b915091506000806000856001600160a01b031663d9638d36866040518263ffffffff1660e01b8152600401611efc9190612ca8565b60a06040518083038186803b158015611f1457600080fd5b505afa158015611f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4c9190612900565b50935050925092506000866001600160a01b0316636c25b346866040518263ffffffff1660e01b8152600401611f829190612ba1565b60206040518083038186803b158015611f9a57600080fd5b505afa158015611fae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd291906126cd565b90506000876001600160a01b031663babe8a3f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561200f57600080fd5b505afa158015612023573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204791906126cd565b90506000886001600160a01b0316630dca59c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561208457600080fd5b505afa158015612098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120bc91906126cd565b905060006120cb8d8588612556565b905060006120d98783611d83565b90506120e58382612528565b92506120f18883612528565b9750856120fe8989611d83565b118061210957508383115b9f9e505050505050505050505050505050565b600081612128846125c2565b6001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b15801561216057600080fd5b505afa158015612174573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219891906126cd565b119392505050565b600081836001600160a01b03166370a08231733dfd23a6c5e8bbcfc9581d2e864a68feb6a076d36040518263ffffffff1660e01b81526004016121e39190612ba1565b60206040518083038186803b15801561216057600080fd5b80600483111561221e5760405162461bcd60e51b815260040161090d9190612cc8565b505050565b61222b61264c565b604051806080016040528062266fd88152602001622feb948152602001623c97b8815260200162424ca881525090505b90565b6000606461226d601e82612eba565b6122779084612ffa565b61093f9190612ed2565b60008073169e633a2d1e6c10dd91238ba11c4a708dfef37c6001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122d157600080fd5b505afa1580156122e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230991906126cd565b90506000811361232b5760405162461bcd60e51b815260040161090d90612d66565b905090565b606063d5e0da3660e01b858585856040516024016123519493929190612e4f565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050949350505050565b606063674fb1b460e01b858585856040516024016123519493929190612e4f565b606063acd2fd9360e01b8787878787876040516024016123d396959493929190612e6a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509695505050505050565b6060632505c3d960e01b858585856040516024016123519493929190612e4f565b606063111d948260e01b858585856040516024016123519493929190612e4f565b6060634bd3ab8260e01b8686868686604051602401612476959493929190612bb5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152905095945050505050565b606063213980e860e01b858585856040516024016123519493929190612c16565b606063e4dcb06b60e01b826040516024016124ef9190612cc8565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050919050565b6000826125358382612eba565b915081101561093f5760405162461bcd60e51b815260040161090d90612d38565b600081612578612572866b033b2e3c9fd0803ce8000000611d83565b85611dc3565b6125829190612ed2565b905061259a846b033b2e3c9fd0803ce8000000611d83565b6125a48284611d83565b106125af57806125ba565b6125ba816001612eba565b949350505050565b60405163104b29e960e01b815260009073e81f70cc7c0d46e12d70efc60607f16bbd617e889063104b29e9906125fc908590600401612ba1565b60206040518083038186803b15801561261457600080fd5b505afa158015612628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093f91906126b1565b60405180608001604052806004906020820280368337509192915050565b60008083601f84011261267b578182fd5b50813567ffffffffffffffff811115612692578182fd5b6020830191508360208285010111156126aa57600080fd5b9250929050565b6000602082840312156126c2578081fd5b8151610e4381613161565b6000602082840312156126de578081fd5b5051919050565b6000602082840312156126f6578081fd5b815167ffffffffffffffff8082111561270d578283fd5b818401915084601f830112612720578283fd5b815181811115612732576127326130a0565b604051601f8201601f191681016020018381118282101715612756576127566130a0565b60405281815283820160200187101561276d578485fd5b61277e826020830160208701613030565b9695505050505050565b600060808284031215612799578081fd5b6040516080810181811067ffffffffffffffff821117156127bc576127bc6130a0565b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b6000602082840312156127fe578081fd5b5035919050565b600080600080600080600060c0888a03121561281f578283fd5b87359650602088013561283181613161565b9550604088013567ffffffffffffffff81111561284c578384fd5b6128588a828b0161266a565b90965094505060608801356004811061286f578384fd5b969995985093969295946080840135945060a09093013592915050565b6000806040838503121561289e578182fd5b505080516020909101519092909150565b600080600080606085870312156128c4578384fd5b8435935060208501359250604085013567ffffffffffffffff8111156128e8578283fd5b6128f48782880161266a565b95989497509550505050565b600080600080600060a08688031215612917578081fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6000815180845260208085019450808401835b838110156129775781516001600160a01b031687529582019590820190600101612952565b509495945050505050565b6000815180845260208085018081965082840281019150828601855b858110156129c85782840389526129b68483516129d5565b9885019893509084019060010161299e565b5091979650505050505050565b600081518084526129ed816020860160208601613030565b601f01601f19169290920160200192915050565b60008251612a13818460208701613030565b9190910192915050565b60008351612a2f818460208801613030565b835190830190612a43818360208801613030565b01949350505050565b60008251612a5e818460208701613030565b6e2737a2b93937b929b2b632b1ba37b960891b920191825250600f01919050565b60008251612a91818460208701613030565b7f3a205661756c74204964206973206e6f742076616c6964000000000000000000920191825250601701919050565b60008251612ad2818460208701613030565b7f3a205661756c74206e6f74206f776e6564206279206473610000000000000000920191825250601801919050565b60008251612b13818460208701613030565b73556e657870656374656452657475726e6461746160601b920191825250601401919050565b60008251612b4b818460208701613030565b66172fb1b0b9ba1d60c91b920191825250600701919050565b6000742326b0b5b2b9172fb4b9ab30bab63a27bbb732b91d60591b82528251612b94816015850160208701613030565b9190910160150192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03958616815260208101949094529190931660408301526060820192909252608081019190915260a00190565b600060018060a01b03861682528460208301528360408301526080606083015261277e60808301846129d5565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b600060408252612c4f604083018561293f565b8281036020840152612c618185612982565b95945050505050565b600060608252612c7d606083018661293f565b8281036020840152612c8f8186612982565b91505060018060a01b0383166040830152949350505050565b90815260200190565b9182526001600160a01b0316602082015260400190565b600060208252610e4360208301846129d5565b60208082526015908201527464732d6d6174682d7375622d756e646572666c6f7760581b604082015260600190565b60208082526014908201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604082015260600190565b60208082526014908201527364732d6d6174682d6164642d6f766572666c6f7760601b604082015260600190565b6020808252601b908201527f5f67657447656c61746f47617350726963653a306f7242656c6f770000000000604082015260600190565b6020808252601e908201527f464d616b65722e5f69735661756c744f776e65723a756e646566696e65640000604082015260600190565b6020808252602e908201527f4647656c61746f446562744272696467652e5f676574466c6173684c6f616e5260408201526d1bdd5d194e881a5b1b1a5c5d5a5960921b606082015260800190565b9283526001600160a01b03918216602084015216604082015260600190565b918252602082015260400190565b93845260208401929092526040830152606082015260800190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60008085851115612ea1578182fd5b83861115612ead578182fd5b5050820193919092039150565b60008219821115612ecd57612ecd613074565b500190565b600082612ee157612ee161308a565b500490565b80825b6001808611612ef85750612f23565b818704821115612f0a57612f0a613074565b80861615612f1757918102915b9490941c938002612ee9565b94509492505050565b6000610e436000198484600082612f4557506001610e43565b81612f5257506000610e43565b8160018114612f685760028114612f7257612f9f565b6001915050610e43565b60ff841115612f8357612f83613074565b6001841b915084821115612f9957612f99613074565b50610e43565b5060208310610133831016604e8410600b8410161715612fd2575081810a83811115612fcd57612fcd613074565b610e43565b612fdf8484846001612ee6565b808604821115612ff157612ff1613074565b02949350505050565b600081600019048311821515161561301457613014613074565b500290565b60008282101561302b5761302b613074565b500390565b60005b8381101561304b578181015183820152602001613033565b8381111561305a576000848401525b50505050565b60008261306f5761306f61308a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d10156130cc5761225b565b600481823e6308c379a06130e082516130b6565b146130ea5761225b565b6040513d600319016004823e80513d67ffffffffffffffff816024840111818411171561311a575050505061225b565b82840192508251915080821115613134575050505061225b565b503d8301602082840101111561314c5750505061225b565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461317657600080fd5b5056fe4647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f4d616b65723a20696e76616c696420726f75746520696e646578436f6e6e65637447656c61746f446174614d616b6572546f4d616b65722d76332e30a264697066735822122029263fe9aa9240507c1c5aacdaf74bfe68f4dc53c25ab5192aa7a5560eb2de5d64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "connectorID()": {
        "details": "Connector Details"
      },
      "getDataAndCastMakerToMaker(uint256,uint256,string)": {
        "details": "payable to be compatible in conjunction with DSA.cast payable target",
        "params": {
          "_colType": "colType of the new vault. example : ETH-B, ETH-A.",
          "_vaultAId": "Id of the unsafe vault of the client of Vault A Collateral.",
          "_vaultBId": "Id of the vault B Collateral of the client."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getDataAndCastMakerToMaker(uint256,uint256,string)": {
        "notice": "Entry Point for DSA.cast DebtBridge from e.g ETH-A to ETH-B"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
