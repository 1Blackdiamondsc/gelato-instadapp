{
  "address": "0xc9F785611986916f47f3A02590B17C3237A75b87",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_instaFeeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleAggregator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dsa",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromVaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_destVaultId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_destColType",
          "type": "string"
        }
      ],
      "name": "getConditionData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instaFeeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dsa",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromVaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_destVaultId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_destColType",
          "type": "string"
        }
      ],
      "name": "isDebtCeilingReached",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_conditionData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ok",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a81c5cae09c50e5adb35bb2107681b3807ea126c96bbc881c6ef3d5a5e089fb",
  "receipt": {
    "to": null,
    "from": "0xF953c3d475dc0a9877329F71e2CE3d2519a519A2",
    "contractAddress": "0xc9F785611986916f47f3A02590B17C3237A75b87",
    "transactionIndex": 27,
    "gasUsed": "2264867",
    "logsBloom": "0x
    "blockHash": "0x9d203601b038d03509f0a5f62fac85feeb40d122b3852dffc2901e744041358e",
    "transactionHash": "0x3a81c5cae09c50e5adb35bb2107681b3807ea126c96bbc881c6ef3d5a5e089fb",
    "logs": [],
    "blockNumber": 11731238,
    "cumulativeGasUsed": "4522798",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0c159985E905ea1A3dA7305D70583Dd618862cf4",
    "0x64f31D46C52bBDe223D863B11dAb9327aB1414E9"
  ],
  "solcInputHash": "06ff1a108d21b21e4ca3839d365cb0b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_instaFeeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleAggregator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dsa\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_destVaultId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_destColType\",\"type\":\"string\"}],\"name\":\"getConditionData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dsa\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_destVaultId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_destColType\",\"type\":\"string\"}],\"name\":\"isDebtCeilingReached\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_conditionData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ok\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/gelato/conditions/maker/ConditionMakerToMakerLiquid.sol\":\"ConditionMakerToMakerLiquid\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/core/contracts/gelato_conditions/GelatoConditionsStandard.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\n\\nimport \\\"./IGelatoCondition.sol\\\";\\n\\nabstract contract GelatoConditionsStandard is IGelatoCondition {\\n    string internal constant OK = \\\"OK\\\";\\n}\\n\",\"keccak256\":\"0xa3d9ee5c4398914bbc0fe75fe54e57b73b8a4367caf9a40d9e5fd1ba9d4adb89\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_conditions/IGelatoCondition.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n\\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\\n    /// @dev Be careful only to encode a Task's condition.data as is and not with the\\n    ///  \\\"ok\\\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\\n    ///  source of Task identification.\\n    /// @param _conditionData This is the Condition.data field developers must encode their\\n    ///  Condition's specific parameters in.\\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\\n    function ok(uint256 _taskReceiptId, bytes calldata _conditionData, uint256 _cycleId)\\n        external\\n        view\\n        returns(string memory);\\n}\",\"keccak256\":\"0xd07607af93227ec5f8c2f5401289937b98c298f0d2398c1ba7410f82a6253964\",\"license\":\"UNLICENSED\"},\"contracts/constants/CAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// Aave Lending Pool Addresses Provider\\naddress constant LENDING_POOL_ADDRESSES_PROVIDER = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;\\naddress constant CHAINLINK_ETH_FEED = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\\naddress constant AAVE_PROTOCOL_DATA_PROVIDER = 0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d;\\n\",\"keccak256\":\"0x3e724d5ba5806a1feebd6ffed223db3b5e24abcb1c7e15aa4d74dd3752c20495\",\"license\":\"UNLICENSED\"},\"contracts/constants/CCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\naddress constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\\n\",\"keccak256\":\"0x7894ca47cf772ae6f312893382269e76775ea92787fba1eddd53e73a1104155e\",\"license\":\"UNLICENSED\"},\"contracts/constants/CDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nenum PROTOCOL {AAVE, MAKER, COMPOUND, NONE}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2519000), 3140500, 3971000, 4345000];\\n}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2028307), 2626711, 2944065, 3698800];\\n}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2358534), 2956937, 3381960, 4029400];\\n}\\n\\nuint256 constant FAST_TX_FEE = 30;\\nuint256 constant VAULT_CREATION_COST = 200000;\\nuint256 constant MAX_INSTA_FEE = 3e15;\\n\",\"keccak256\":\"0x5cb259ff9d661ebd3beb9d56e49ffb7dd5ff6a4c358c8acd913da52f5b99124b\",\"license\":\"UNLICENSED\"},\"contracts/constants/CGelato.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IGelatoGasPriceOracle\\n} from \\\"../interfaces/gelato/IGelatoGasPriceOracle.sol\\\";\\n\\nIGelatoGasPriceOracle constant GELATO_GAS_PRICE_ORACLE = IGelatoGasPriceOracle(\\n    0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C\\n);\\n\\naddress constant GELATO_EXECUTOR_MODULE = 0x98edc8067Cc671BCAE82D36dCC609C3E4e078AC8;\\n\",\"keccak256\":\"0xd701225d80680199dbc5b86bcf953151895629f8e05bd49954c8fd7eb6613873\",\"license\":\"UNLICENSED\"},\"contracts/constants/CInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// InstaDapp\\naddress constant INSTA_MEMORY = 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F;\\n\\n// Connectors\\naddress constant CONNECT_MAKER = 0xac02030d8a8F49eD04b2f52C394D3F901A10F8A9;\\naddress constant CONNECT_COMPOUND = 0x15FdD1e902cAC70786fe7D31013B1a806764B5a2;\\naddress constant INSTA_POOL_V2 = 0xeB4bf86589f808f90EEC8e964dBF16Bd4D284905;\\naddress constant CONNECT_AAVE_V2 = 0xBF6E4331ffd02F7043e62788FD272aeFc712f5ee;\\naddress constant CONNECT_DYDX = 0x6AF6C791c869DfA65f8A2fa042fA47D1535Bef25;\\naddress constant CONNECT_BASIC = 0xe5398f279175962E56fE4c5E0b62dc7208EF36c6;\\naddress constant CONNECT_FEE = 0xB99152F8073033B318C1Bfbfaaa582029e982CE9;\\n\\n// Insta Pool\\naddress constant INSTA_POOL_RESOLVER = 0xa004a5afBa04b74037E9E52bA1f7eb02b5E61509;\\nuint256 constant ROUTE_1_TOLERANCE = 1005e15;\\n\\n// Insta Mapping\\naddress constant INSTA_MAPPING = 0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88;\\n\\naddress constant INSTA_MAKER_RESOLVER = 0x0A7008B38E7015F8C36A49eEbc32513ECA8801E5;\\n\",\"keccak256\":\"0x0a6f769e4d928a6286024c823696c481fbeb75c85bd8648b450a18ff3fc0451d\",\"license\":\"UNLICENSED\"},\"contracts/constants/CMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\naddress constant MCD_MANAGER = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\\naddress constant JUG = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\\n\",\"keccak256\":\"0xba2dab3a9cd1c7edd900705917de16d2c9c85edc35c03a2e3535570814ecb067\",\"license\":\"UNLICENSED\"},\"contracts/constants/CTokens.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// ETH\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\naddress constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n// USD\\naddress constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\",\"keccak256\":\"0x737e5e061f0a86bb43c375e78caada7211726ed0786151e719d503e6b9b60d59\",\"license\":\"UNLICENSED\"},\"contracts/contracts/gelato/conditions/maker/ConditionMakerToMakerLiquid.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    GelatoConditionsStandard\\n} from \\\"@gelatonetwork/core/contracts/gelato_conditions/GelatoConditionsStandard.sol\\\";\\nimport {GelatoBytes} from \\\"../../../../lib/GelatoBytes.sol\\\";\\nimport {\\n    _isDebtCeilingReached\\n} from \\\"../../../../functions/gelato/conditions/maker/FDebtCeilingIsReached.sol\\\";\\nimport {\\n    _getMaxAmtToBorrowMakerToMaker\\n} from \\\"../../../../functions/gelato/FGelatoDebtBridge.sol\\\";\\nimport {\\n    IInstaFeeCollector\\n} from \\\"../../../../interfaces/InstaDapp/IInstaFeeCollector.sol\\\";\\n\\ncontract ConditionMakerToMakerLiquid is GelatoConditionsStandard {\\n    using GelatoBytes for bytes;\\n\\n    address public immutable instaFeeCollector;\\n    address public immutable oracleAggregator;\\n\\n    constructor(address _instaFeeCollector, address _oracleAggregator) {\\n        instaFeeCollector = _instaFeeCollector;\\n        oracleAggregator = _oracleAggregator;\\n    }\\n\\n    function getConditionData(\\n        address _dsa,\\n        uint256 _fromVaultId,\\n        uint256 _destVaultId,\\n        string calldata _destColType\\n    ) public pure virtual returns (bytes memory) {\\n        return\\n            abi.encodeWithSelector(\\n                this.isDebtCeilingReached.selector,\\n                _dsa,\\n                _fromVaultId,\\n                _destVaultId,\\n                _destColType\\n            );\\n    }\\n\\n    function ok(\\n        uint256,\\n        bytes calldata _conditionData,\\n        uint256\\n    ) public view virtual override returns (string memory) {\\n        (\\n            address _dsa,\\n            uint256 _fromVaultId,\\n            uint256 _destVaultId,\\n            string memory _destColType\\n        ) = abi.decode(_conditionData[4:], (address, uint256, uint256, string));\\n\\n        return\\n            isDebtCeilingReached(\\n                _dsa,\\n                _fromVaultId,\\n                _destVaultId,\\n                _destColType\\n            );\\n    }\\n\\n    function isDebtCeilingReached(\\n        address _dsa,\\n        uint256 _fromVaultId,\\n        uint256 _destVaultId,\\n        string memory _destColType\\n    ) public view returns (string memory) {\\n        return\\n            _isDebtCeilingReached(\\n                _dsa,\\n                _destVaultId,\\n                _destColType,\\n                _getMaxAmtToBorrowMakerToMaker(\\n                    _fromVaultId,\\n                    _destVaultId == 0,\\n                    IInstaFeeCollector(instaFeeCollector).fee(),\\n                    oracleAggregator\\n                )\\n            )\\n                ? \\\"MakerDebtCeilingReached\\\"\\n                : OK;\\n    }\\n}\\n\",\"keccak256\":\"0xed189b13d32a46317fcff1d976b8ecc2b23fba2521c95e117e85fe86a3cf6523\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IAaveProtocolDataProvider\\n} from \\\"../../interfaces/dapps/Aave/IAaveProtocolDataProvider.sol\\\";\\nimport {\\n    ILendingPoolAddressesProvider\\n} from \\\"../../interfaces/dapps/Aave/ILendingPoolAddressesProvider.sol\\\";\\nimport {\\n    ChainLinkInterface\\n} from \\\"../../interfaces/dapps/Aave/ChainLinkInterface.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/dapps/Aave/ILendingPool.sol\\\";\\nimport {WETH, ETH} from \\\"../../constants/CTokens.sol\\\";\\nimport {AaveUserData} from \\\"../../structs/SAave.sol\\\";\\nimport {\\n    LENDING_POOL_ADDRESSES_PROVIDER,\\n    CHAINLINK_ETH_FEED,\\n    AAVE_PROTOCOL_DATA_PROVIDER\\n} from \\\"../../constants/CAave.sol\\\";\\nimport {ETH, WETH} from \\\"../../constants/CTokens.sol\\\";\\n\\nfunction _getEtherPrice() view returns (uint256 ethPrice) {\\n    ethPrice = uint256(ChainLinkInterface(CHAINLINK_ETH_FEED).latestAnswer());\\n}\\n\\nfunction _getUserData(address user)\\n    view\\n    returns (AaveUserData memory userData)\\n{\\n    (\\n        uint256 totalCollateralETH,\\n        uint256 totalDebtETH,\\n        uint256 availableBorrowsETH,\\n        uint256 currentLiquidationThreshold,\\n        uint256 ltv,\\n        uint256 healthFactor\\n    ) =\\n        ILendingPool(\\n            ILendingPoolAddressesProvider(LENDING_POOL_ADDRESSES_PROVIDER)\\n                .getLendingPool()\\n        )\\n            .getUserAccountData(user);\\n\\n    userData = AaveUserData(\\n        totalCollateralETH,\\n        totalDebtETH,\\n        availableBorrowsETH,\\n        currentLiquidationThreshold,\\n        ltv,\\n        healthFactor,\\n        _getEtherPrice()\\n    );\\n}\\n\\nfunction _getAssetLiquidationThreshold(address _token)\\n    view\\n    returns (uint256 liquidationThreshold)\\n{\\n    (, , liquidationThreshold, , , , , , , ) = IAaveProtocolDataProvider(\\n        AAVE_PROTOCOL_DATA_PROVIDER\\n    )\\n        .getReserveConfigurationData(_getTokenAddr(_token));\\n}\\n\\nfunction _getTokenAddr(address _token) pure returns (address) {\\n    return _token == ETH ? WETH : _token;\\n}\\n\",\"keccak256\":\"0xa20bfadadb13a66cc88e6b60f706bb66a44ceda97127a96f487978360cb47d24\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {CompData, AccountLiquidityLocalVars} from \\\"../../structs/SCompound.sol\\\";\\nimport {INSTA_MAPPING} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {COMPTROLLER} from \\\"../../constants/CCompound.sol\\\";\\nimport {InstaMapping} from \\\"../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {ICToken} from \\\"../../interfaces/dapps/Compound/ICToken.sol\\\";\\nimport {IComptroller} from \\\"../../interfaces/dapps/Compound/IComptroller.sol\\\";\\nimport {IPriceOracle} from \\\"../../interfaces/dapps/Compound/IPriceOracle.sol\\\";\\nimport {mul} from \\\"../../vendor/DSMath.sol\\\";\\n\\nfunction _getCToken(address _token) view returns (address) {\\n    return InstaMapping(INSTA_MAPPING).cTokenMapping(_token);\\n}\\n\\nfunction _wouldCompoundAccountBeLiquid(\\n    address _dsa,\\n    uint256 _colAmt,\\n    address _cTokenModify,\\n    uint256 _debtAmt\\n) view returns (bool) {\\n    AccountLiquidityLocalVars memory vars;\\n\\n    IComptroller comptroller = IComptroller(COMPTROLLER);\\n\\n    ICToken[] memory assets = comptroller.getAssetsIn(_dsa);\\n    for (uint256 i = 0; i < assets.length; i++) {\\n        ICToken asset = assets[i];\\n        // Read the balances and exchange rate from the cToken\\n        vars = _getAssetLiquidity(vars, _dsa, asset);\\n\\n        // Calculate effects of interacting with cTokenModify\\n        if (address(asset) == _cTokenModify) {\\n            vars.sumCollateral = mulScalarTruncateAddUInt(\\n                vars.tokensToDenom,\\n                _colAmt,\\n                vars.sumCollateral\\n            );\\n\\n            // borrow effect\\n            // sumBorrowPlusEffects += oraclePrice * debtAmt\\n            vars.sumBorrowPlusEffects = mulScalarTruncateAddUInt(\\n                vars.oraclePrice,\\n                _debtAmt,\\n                vars.sumBorrowPlusEffects\\n            );\\n        }\\n    }\\n\\n    if (assets.length == 0) {\\n        vars = _getAssetLiquidity(vars, _dsa, ICToken(_cTokenModify));\\n\\n        vars.sumCollateral = mulScalarTruncateAddUInt(\\n            vars.tokensToDenom,\\n            _colAmt,\\n            vars.sumCollateral\\n        );\\n\\n        vars.sumBorrowPlusEffects = mulScalarTruncateAddUInt(\\n            vars.oraclePrice,\\n            _debtAmt,\\n            vars.sumBorrowPlusEffects\\n        );\\n    }\\n\\n    return vars.sumCollateral > vars.sumBorrowPlusEffects;\\n}\\n\\nfunction _getAssetLiquidity(\\n    AccountLiquidityLocalVars memory vars,\\n    address _dsa,\\n    ICToken _asset\\n) view returns (AccountLiquidityLocalVars memory) {\\n    uint256 oErr;\\n    IComptroller comptroller = IComptroller(COMPTROLLER);\\n\\n    // Read the balances and exchange rate from the cToken\\n    (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRate) = ICToken(\\n        _asset\\n    )\\n        .getAccountSnapshot(_dsa);\\n    require(oErr == 0, \\\"_getAssetLiquidity: semi-opaque error code\\\");\\n    (, vars.collateralFactor, ) = (comptroller.markets(address(_asset)));\\n    vars.oraclePrice = IPriceOracle(IComptroller(COMPTROLLER).oracle())\\n        .getUnderlyingPrice(_asset);\\n    require(vars.oraclePrice != 0, \\\"\\\");\\n\\n    vars.tokensToDenom = mul_expScale(\\n        mul_expScale(vars.collateralFactor, vars.exchangeRate),\\n        vars.oraclePrice\\n    );\\n\\n    vars.sumCollateral = mulScalarTruncateAddUInt(\\n        vars.tokensToDenom,\\n        vars.cTokenBalance,\\n        vars.sumCollateral\\n    );\\n\\n    vars.sumBorrowPlusEffects = mulScalarTruncateAddUInt(\\n        vars.oraclePrice,\\n        vars.borrowBalance,\\n        vars.sumBorrowPlusEffects\\n    );\\n    return vars;\\n}\\n\\n// Compound Math Function\\n\\nfunction mulScalarTruncateAddUInt(\\n    uint256 _a,\\n    uint256 _b,\\n    uint256 _addend\\n) pure returns (uint256) {\\n    return mul_expScale(_a, _b) + _addend;\\n}\\n\\nfunction mul_expScale(uint256 _a, uint256 _b) pure returns (uint256) {\\n    return mul(_a, _b) / 1e18;\\n}\\n\\n// Compound Math Function\\n\",\"keccak256\":\"0xbc4c14090f162d4b6f7ce596cfb34825989b517c68b3e42fff8f52db083dea66\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {MCD_MANAGER} from \\\"../../constants/CMaker.sol\\\";\\nimport {INSTA_MAPPING} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {\\n    ITokenJoinInterface\\n} from \\\"../../interfaces/dapps/Maker/ITokenJoinInterface.sol\\\";\\nimport {IMcdManager} from \\\"../../interfaces/dapps/Maker/IMcdManager.sol\\\";\\nimport {InstaMapping} from \\\"../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {IVat} from \\\"../../interfaces/dapps/Maker/IVat.sol\\\";\\nimport {RAY, add, sub, mul} from \\\"../../vendor/DSMath.sol\\\";\\nimport {_stringToBytes32, _convertTo18} from \\\"../../vendor/Convert.sol\\\";\\n\\nfunction _getMakerVaultDebt(uint256 _vaultId) view returns (uint256 wad) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, , , ) = vat.ilks(ilk);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n    uint256 dai = vat.dai(urn);\\n\\n    uint256 rad = sub(mul(art, rate), dai);\\n    wad = rad / RAY;\\n\\n    wad = mul(wad, RAY) < rad ? wad + 1 : wad;\\n}\\n\\nfunction _getMakerRawVaultDebt(uint256 _vaultId) view returns (uint256 tab) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, , , ) = vat.ilks(ilk);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n\\n    uint256 rad = mul(art, rate);\\n\\n    tab = rad / RAY;\\n    tab = mul(tab, RAY) < rad ? tab + 1 : tab;\\n}\\n\\nfunction _getMakerVaultCollateralBalance(uint256 _vaultId)\\n    view\\n    returns (uint256)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    IVat vat = IVat(manager.vat());\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    (uint256 ink, ) = vat.urns(ilk, urn);\\n\\n    return ink;\\n}\\n\\nfunction _vaultWillBeSafe(\\n    uint256 _vaultId,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    require(_vaultId != 0, \\\"_vaultWillBeSafe: invalid vault id.\\\");\\n\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n\\n    ITokenJoinInterface tokenJoinContract =\\n        ITokenJoinInterface(InstaMapping(INSTA_MAPPING).gemJoinMapping(ilk));\\n\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, uint256 spot, , ) = vat.ilks(ilk);\\n    (uint256 ink, uint256 art) = vat.urns(ilk, urn);\\n    uint256 dai = vat.dai(urn);\\n\\n    uint256 dink = _convertTo18(tokenJoinContract.dec(), _colAmt);\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n\\n    ink = add(ink, dink);\\n    art = add(art, dart);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab <= mul(ink, spot);\\n}\\n\\nfunction _newVaultWillBeSafe(\\n    string memory _colType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (, uint256 rate, uint256 spot, , ) = vat.ilks(ilk);\\n\\n    ITokenJoinInterface tokenJoinContract =\\n        ITokenJoinInterface(InstaMapping(INSTA_MAPPING).gemJoinMapping(ilk));\\n\\n    uint256 ink = _convertTo18(tokenJoinContract.dec(), _colAmt);\\n    uint256 art = _getDebtAmt(_daiDebtAmt, 0, rate);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab <= mul(ink, spot);\\n}\\n\\nfunction _debtCeilingIsReachedNewVault(\\n    string memory _colType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (uint256 Art, uint256 rate, , uint256 line, ) = vat.ilks(ilk);\\n    uint256 Line = vat.Line();\\n    uint256 debt = vat.debt();\\n\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, 0, rate);\\n    uint256 dtab = mul(rate, dart);\\n\\n    debt = add(debt, dtab);\\n    Art = add(Art, dart);\\n\\n    return mul(Art, rate) > line || debt > Line;\\n}\\n\\nfunction _debtCeilingIsReached(uint256 _vaultId, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n\\n    (uint256 Art, uint256 rate, , uint256 line, ) = vat.ilks(ilk);\\n    uint256 dai = vat.dai(urn);\\n    uint256 Line = vat.Line();\\n    uint256 debt = vat.debt();\\n\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n    uint256 dtab = mul(rate, dart);\\n\\n    debt = add(debt, dtab);\\n    Art = add(Art, dart);\\n\\n    return mul(Art, rate) > line || debt > Line;\\n}\\n\\nfunction _debtIsDustNewVault(string memory _colType, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (, uint256 rate, , , uint256 dust) = vat.ilks(ilk);\\n    uint256 art = _getDebtAmt(_daiDebtAmt, 0, rate);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab < dust;\\n}\\n\\nfunction _debtIsDust(uint256 _vaultId, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n    (, uint256 rate, , , uint256 dust) = vat.ilks(ilk);\\n\\n    uint256 dai = vat.dai(urn);\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n    art = add(art, dart);\\n    uint256 tab = mul(rate, art);\\n\\n    return tab < dust;\\n}\\n\\nfunction _getVaultData(IMcdManager _manager, uint256 _vault)\\n    view\\n    returns (bytes32 ilk, address urn)\\n{\\n    ilk = _manager.ilks(_vault);\\n    urn = _manager.urns(_vault);\\n}\\n\\nfunction _getDebtAmt(\\n    uint256 _amt,\\n    uint256 _dai,\\n    uint256 _rate\\n) pure returns (uint256 dart) {\\n    dart = sub(mul(_amt, RAY), _dai) / _rate;\\n    dart = mul(dart, _rate) < mul(_amt, RAY) ? dart + 1 : dart;\\n}\\n\\nfunction _isVaultOwner(uint256 _vaultId, address _owner) view returns (bool) {\\n    if (_vaultId == 0) return false;\\n\\n    try IMcdManager(MCD_MANAGER).owns(_vaultId) returns (address owner) {\\n        return _owner == owner;\\n    } catch Error(string memory error) {\\n        revert(string(abi.encodePacked(\\\"FMaker._isVaultOwner:\\\", error)));\\n    } catch {\\n        revert(\\\"FMaker._isVaultOwner:undefined\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9a36cfb605947e1c73e96b95be4e34d2c913f23386d86be1923b34f3511a772a\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/FGelato.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {GELATO_GAS_PRICE_ORACLE} from \\\"../../constants/CGelato.sol\\\";\\nimport {mul} from \\\"../../vendor/DSMath.sol\\\";\\n\\nfunction _getGelatoGasPrice() view returns (uint256) {\\n    int256 oracleGasPrice = GELATO_GAS_PRICE_ORACLE.latestAnswer();\\n    if (oracleGasPrice <= 0) revert(\\\"_getGelatoGasPrice:0orBelow\\\");\\n    return uint256(oracleGasPrice);\\n}\\n\\nfunction _getGelatoExecutorFees(uint256 _gas) view returns (uint256) {\\n    return mul(_gas, _getGelatoGasPrice());\\n}\\n\",\"keccak256\":\"0x465e09df3c9d5dba7468a625f98bf3a543eaab1eeb0caf35436bf42722dd17e8\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/FGelatoDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {wmul, wdiv} from \\\"../../vendor/DSMath.sol\\\";\\nimport {\\n    INSTA_POOL_RESOLVER,\\n    ROUTE_1_TOLERANCE\\n} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {DebtBridgeInputData} from \\\"../../structs/SDebtBridge.sol\\\";\\nimport {\\n    _canDoMakerToAaveDebtBridge,\\n    _canDoMakerToMakerDebtBridge,\\n    _canDoMakerToCompoundDebtBridge\\n} from \\\"./conditions/FCanDoRefinance.sol\\\";\\nimport {\\n    PROTOCOL,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE,\\n    FAST_TX_FEE,\\n    VAULT_CREATION_COST\\n} from \\\"../../constants/CDebtBridge.sol\\\";\\nimport {\\n    IInstaPoolResolver\\n} from \\\"../../interfaces/InstaDapp/resolvers/IInstaPoolResolver.sol\\\";\\nimport {_getMakerVaultDebt} from \\\"../dapps/FMaker.sol\\\";\\nimport {_getGelatoExecutorFees} from \\\"./FGelato.sol\\\";\\nimport {DAI, ETH} from \\\"../../constants/CTokens.sol\\\";\\nimport {IOracleAggregator} from \\\"../../interfaces/gelato/IOracleAggregator.sol\\\";\\nimport {_convertTo18} from \\\"../../vendor/Convert.sol\\\";\\n\\nfunction _getFlashLoanRoute(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (uint256)\\n{\\n    IInstaPoolResolver.RouteData memory rData =\\n        IInstaPoolResolver(INSTA_POOL_RESOLVER).getTokenLimit(_debtToken);\\n\\n    if (rData.dydx > _debtAmt) return 0;\\n    if (rData.maker > _debtAmt) return 1;\\n    if (rData.compound > _debtAmt) return 2;\\n    if (rData.aave > _debtAmt) return 3;\\n    revert(\\\"FGelatoDebtBridge._getFlashLoanRoute: illiquid\\\");\\n}\\n\\nfunction _getDebtBridgeRoute(DebtBridgeInputData memory _data)\\n    view\\n    returns (PROTOCOL)\\n{\\n    if (_canDoMakerToAaveDebtBridge(_data)) return PROTOCOL.AAVE;\\n    else if (_canDoMakerToMakerDebtBridge(_data)) return PROTOCOL.MAKER;\\n    else if (_canDoMakerToCompoundDebtBridge(_data)) return PROTOCOL.COMPOUND;\\n    return PROTOCOL.NONE;\\n}\\n\\nfunction _getGasCostMakerToMaker(bool _newVault, uint256 _route)\\n    pure\\n    returns (uint256)\\n{\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToMaker: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            _newVault\\n                ? GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()[_route] +\\n                    VAULT_CREATION_COST\\n                : GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()[_route]\\n        );\\n}\\n\\nfunction _getGasCostMakerToCompound(uint256 _route) pure returns (uint256) {\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToCompound: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND()[_route]\\n        );\\n}\\n\\nfunction _getGasCostMakerToAave(uint256 _route) pure returns (uint256) {\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToAave: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE()[_route]\\n        );\\n}\\n\\nfunction _getGasCostPremium(uint256 _rawGasCost) pure returns (uint256) {\\n    return (_rawGasCost * (100 + FAST_TX_FEE)) / 100;\\n}\\n\\nfunction _getRealisedDebt(uint256 _debtToMove) pure returns (uint256) {\\n    return wmul(_debtToMove, ROUTE_1_TOLERANCE);\\n}\\n\\nfunction _checkRouteIndex(uint256 _route, string memory _revertMsg) pure {\\n    require(_route <= 4, _revertMsg);\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToAave(\\n    uint256 _fromVaultId,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToAave(_getFlashLoanRoute(DAI, wDaiToBorrow)),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToCompound(\\n    uint256 _fromVaultId,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToCompound(_getFlashLoanRoute(DAI, wDaiToBorrow)),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToMaker(\\n    uint256 _fromVaultId,\\n    bool _newVault,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToMaker(\\n                _newVault,\\n                _getFlashLoanRoute(DAI, wDaiToBorrow)\\n            ),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrow(\\n    uint256 _wDaiToBorrow,\\n    uint256 _gasCost,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    (uint256 gasCostInDAI, uint256 decimals) =\\n        IOracleAggregator(_oracleAggregator).getExpectedReturnAmount(\\n            _getGelatoExecutorFees(_gasCost),\\n            ETH,\\n            DAI\\n        );\\n\\n    gasCostInDAI = _convertTo18(decimals, gasCostInDAI);\\n\\n    return _wDaiToBorrow + gasCostInDAI + wmul(_wDaiToBorrow, _fees);\\n}\\n\",\"keccak256\":\"0x175aee7c0071ded9d065f293c225c65d8d29253e62e6199119d506c611a1e8d2\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/FCanDoRefinance.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {_isAaveLiquid} from \\\"./aave/FAaveHasLiquidity.sol\\\";\\nimport {_aavePositionWillBeSafe} from \\\"./aave/FAavePositionWillBeSafe.sol\\\";\\nimport {_isDebtAmtDust} from \\\"./maker/FIsDebtAmtDust.sol\\\";\\nimport {_isDebtCeilingReached} from \\\"./maker/FDebtCeilingIsReached.sol\\\";\\nimport {_destVaultWillBeSafe} from \\\"./maker/FDestVaultWillBeSafe.sol\\\";\\nimport {_cTokenHasLiquidity} from \\\"./compound/FCompoundHasLiquidity.sol\\\";\\nimport {\\n    _compoundPositionWillBeSafe\\n} from \\\"./compound/FCompoundPositionWillBeSafe.sol\\\";\\nimport {DebtBridgeInputData} from \\\"../../../structs/SDebtBridge.sol\\\";\\nimport {DAI} from \\\"../../../constants/CTokens.sol\\\";\\nimport {\\n    _getMaxAmtToBorrow,\\n    _getGasCostMakerToAave,\\n    _getGasCostMakerToCompound,\\n    _getGasCostMakerToMaker\\n} from \\\"../FGelatoDebtBridge.sol\\\";\\n\\nfunction _canDoMakerToAaveDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    _data.debtAmt = _getMaxAmtToBorrow(\\n        _data.debtAmt,\\n        _getGasCostMakerToAave(_data.flashRoute),\\n        _data.fees,\\n        _data.oracleAggregator\\n    );\\n    return\\n        _isAaveLiquid(DAI, _data.debtAmt) &&\\n        _aavePositionWillBeSafe(\\n            _data.dsa,\\n            _data.colAmt,\\n            _data.colToken,\\n            _data.debtAmt,\\n            _data.oracleAggregator\\n        );\\n}\\n\\nfunction _canDoMakerToMakerDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    _data.debtAmt = _getMaxAmtToBorrow(\\n        _data.debtAmt,\\n        _getGasCostMakerToMaker(_data.makerDestVaultId == 0, _data.flashRoute),\\n        _data.fees,\\n        _data.oracleAggregator\\n    );\\n    return\\n        !_isDebtAmtDust(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            _data.debtAmt\\n        ) &&\\n        !_isDebtCeilingReached(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            _data.debtAmt\\n        ) &&\\n        _destVaultWillBeSafe(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            _data.colAmt,\\n            _data.debtAmt\\n        );\\n}\\n\\nfunction _canDoMakerToCompoundDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    _data.debtAmt = _getMaxAmtToBorrow(\\n        _data.debtAmt,\\n        _getGasCostMakerToCompound(_data.flashRoute),\\n        _data.fees,\\n        _data.oracleAggregator\\n    );\\n    return\\n        _cTokenHasLiquidity(DAI, _data.debtAmt) &&\\n        _compoundPositionWillBeSafe(\\n            _data.dsa,\\n            _data.colAmt,\\n            DAI,\\n            _data.debtAmt\\n        );\\n}\\n\",\"keccak256\":\"0xfeb332996ecdfecd2ac076897025e06b540134abf20e61b109938cb2c70912a6\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/aave/FAaveHasLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {IERC20} from \\\"../../../../interfaces/dapps/IERC20.sol\\\";\\nimport {\\n    ILendingPoolAddressesProvider\\n} from \\\"../../../../interfaces/dapps/Aave/ILendingPoolAddressesProvider.sol\\\";\\nimport {ILendingPool} from \\\"../../../../interfaces/dapps/Aave/ILendingPool.sol\\\";\\nimport {LENDING_POOL_ADDRESSES_PROVIDER} from \\\"../../../../constants/CAave.sol\\\";\\nimport {\\n    _getRealisedDebt\\n} from \\\"../../../../functions/gelato/FGelatoDebtBridge.sol\\\";\\nimport {_getMakerVaultDebt} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isAaveLiquid(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (bool)\\n{\\n    return\\n        IERC20(_debtToken).balanceOf(\\n            ILendingPool(\\n                ILendingPoolAddressesProvider(LENDING_POOL_ADDRESSES_PROVIDER)\\n                    .getLendingPool()\\n            )\\n                .getReserveData(_debtToken)\\n                .aTokenAddress\\n        ) > _debtAmt;\\n}\\n\",\"keccak256\":\"0xdab0be367444b3277d5945d200dbae6a19b53736c364417a545de30c29ce6ed1\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/aave/FAavePositionWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _getUserData,\\n    _getAssetLiquidationThreshold\\n} from \\\"../../../../functions/dapps/FAave.sol\\\";\\nimport {AaveUserData} from \\\"../../../../structs/SAave.sol\\\";\\nimport {GelatoBytes} from \\\"../../../../lib/GelatoBytes.sol\\\";\\nimport {wdiv, wmul, mul} from \\\"../../../../vendor/DSMath.sol\\\";\\nimport {\\n    IOracleAggregator\\n} from \\\"../../../../interfaces/gelato/IOracleAggregator.sol\\\";\\nimport {ETH, DAI} from \\\"../../../../constants/CTokens.sol\\\";\\nimport {_convertTo18} from \\\"../../../../vendor/Convert.sol\\\";\\n\\nfunction _aavePositionWillBeSafe(\\n    address _dsa,\\n    uint256 _colAmt,\\n    address _colToken,\\n    uint256 _debtAmt,\\n    address _oracleAggregator\\n) view returns (bool) {\\n    uint256 _colAmtInETH;\\n    uint256 _decimals;\\n    IOracleAggregator oracleAggregator = IOracleAggregator(_oracleAggregator);\\n\\n    AaveUserData memory userData = _getUserData(_dsa);\\n\\n    if (_colToken == ETH) _colAmtInETH = _colAmt;\\n    else {\\n        (_colAmtInETH, _decimals) = oracleAggregator.getExpectedReturnAmount(\\n            _colAmt,\\n            _colToken,\\n            ETH\\n        );\\n\\n        _colAmtInETH = _convertTo18(_decimals, _colAmtInETH);\\n    }\\n\\n    (_debtAmt, _decimals) = oracleAggregator.getExpectedReturnAmount(\\n        _debtAmt,\\n        DAI,\\n        ETH\\n    );\\n    _debtAmt = _convertTo18(_decimals, _debtAmt);\\n\\n    //\\n    //                  __\\n    //                  \\\\\\n    //                  /__ (Collateral)i in ETH x (Liquidation Threshold)i\\n    //  HealthFactor =  _________________________________________________\\n    //\\n    //                  Total Borrows in ETH + Total Fees in ETH\\n    //\\n\\n    return\\n        wdiv(\\n            (\\n                (mul(\\n                    userData.currentLiquidationThreshold,\\n                    userData.totalCollateralETH\\n                ) + mul(_colAmtInETH, _getAssetLiquidationThreshold(_colToken)))\\n            ) / 1e4,\\n            userData.totalBorrowsETH + _debtAmt\\n        ) > 1e18;\\n}\\n\",\"keccak256\":\"0x96331066dfa643fef3ebd213c5286b84e2e2a65e796507194cea39f49f4665ac\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/compound/FCompoundHasLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ICToken} from \\\"../../../../interfaces/dapps/Compound/ICToken.sol\\\";\\nimport {_getCToken} from \\\"../../../dapps/FCompound.sol\\\";\\n\\nfunction _cTokenHasLiquidity(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (bool)\\n{\\n    return ICToken(_getCToken(_debtToken)).getCash() > _debtAmt;\\n}\\n\",\"keccak256\":\"0x94ff371cde2624508c316b09e5a5f16efd1315091ec1a6dcd79204e683e2f78c\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/compound/FCompoundPositionWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {DAI} from \\\"../../../../constants/CTokens.sol\\\";\\nimport {\\n    _getCToken,\\n    _wouldCompoundAccountBeLiquid\\n} from \\\"../../../dapps/FCompound.sol\\\";\\n\\nfunction _compoundPositionWillBeSafe(\\n    address _dsa,\\n    uint256 _colAmt,\\n    address _debtToken,\\n    uint256 _debtAmt\\n) view returns (bool) {\\n    return\\n        _wouldCompoundAccountBeLiquid(\\n            _dsa,\\n            _colAmt,\\n            _getCToken(_debtToken),\\n            _debtAmt\\n        );\\n}\\n\",\"keccak256\":\"0x88ec9113308440560945b22168b24404709a70f28b8e639be393d68f8ff6b6ab\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FDebtCeilingIsReached.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _debtCeilingIsReachedNewVault,\\n    _debtCeilingIsReached,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isDebtCeilingReached(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return\\n        _debtCeilingIsReachedExplicit(_destVaultId, _destColType, _daiDebtAmt);\\n}\\n\\nfunction _debtCeilingIsReachedExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _debtCeilingIsReachedNewVault(_destColType, _daiDebtAmt)\\n            : _debtCeilingIsReached(_destVaultId, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x63d4ac5ebf15e2b820f5f8bacbd7856942c56e3f4c758ac72e2c23122f0bb6ad\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FDestVaultWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _vaultWillBeSafe,\\n    _newVaultWillBeSafe,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _destVaultWillBeSafe(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return\\n        _destVaultWillBeSafeExplicit(\\n            _destVaultId,\\n            _destColType,\\n            _colAmt,\\n            _daiDebtAmt\\n        );\\n}\\n\\nfunction _destVaultWillBeSafeExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _newVaultWillBeSafe(_destColType, _colAmt, _daiDebtAmt)\\n            : _vaultWillBeSafe(_destVaultId, _colAmt, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x02d7a4a2ce335b250eb1cbd445f9d76f90d5a183a86b715c0cf943022393dfb4\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FIsDebtAmtDust.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _debtIsDustNewVault,\\n    _debtIsDust,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isDebtAmtDust(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return _isDebtAmtDustExplicit(_destVaultId, _destColType, _daiDebtAmt);\\n}\\n\\nfunction _isDebtAmtDustExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _debtIsDustNewVault(_destColType, _daiDebtAmt)\\n            : _debtIsDust(_destVaultId, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x3fe2e42cc5cf8221731e7f4dd926e973024eb3efab57b4c4568e45ce70765a20\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/IInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n/// @notice Interface InstaDapp Index\\ninterface IndexInterface {\\n    function connectors(uint256 version) external view returns (address);\\n\\n    function list() external view returns (address);\\n}\\n\\n/// @notice Interface InstaDapp List\\ninterface ListInterface {\\n    function accountID(address _account) external view returns (uint64);\\n}\\n\\n/// @notice Interface InstaDapp InstaMemory\\ninterface MemoryInterface {\\n    function setUint(uint256 _id, uint256 _val) external;\\n\\n    function getUint(uint256 _id) external returns (uint256);\\n}\\n\\n/// @notice Interface InstaDapp Defi Smart Account wallet\\ninterface AccountInterface {\\n    function cast(\\n        address[] calldata _targets,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external payable returns (bytes32[] memory responses);\\n\\n    function version() external view returns (uint256);\\n\\n    function isAuth(address user) external view returns (bool);\\n\\n    function shield() external view returns (bool);\\n}\\n\\ninterface ConnectorInterface {\\n    function connectorID() external view returns (uint256 _type, uint256 _id);\\n\\n    function name() external view returns (string memory);\\n}\\n\\ninterface InstaMapping {\\n    function gemJoinMapping(bytes32) external view returns (address);\\n\\n    function cTokenMapping(address) external view returns (address);\\n}\\n\",\"keccak256\":\"0xe0675f18c98f99ac30d284feec4a1de5feb5f85c8d16c1a9e5cddd739dfb34c7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/IInstaFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IInstaFeeCollector {\\n    function setFeeCollector(address payable _feeCollector) external;\\n\\n    function setFee(uint256 _fee) external;\\n\\n    function fee() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address payable);\\n}\\n\",\"keccak256\":\"0xdb768ade8f511ae26c9de55b9373ad8b4eb8c99ab07a4bf097bfc8f25daa35b6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/resolvers/IInstaPoolResolver.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity 0.8.0;\\n\\ninterface IInstaPoolResolver {\\n    struct RouteData {\\n        uint256 dydx;\\n        uint256 maker;\\n        uint256 compound;\\n        uint256 aave;\\n    }\\n\\n    function getTokenLimit(address token)\\n        external\\n        view\\n        returns (RouteData memory);\\n}\\n\",\"keccak256\":\"0xd1e148a8c7d84f528397ac90a23160bfa04df6ad1ec990a2447ddb5ae069dac0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ChainLinkInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ChainLinkInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa28e7bfd15b9353039c764d8203adc9fc066a32db1da3351f10eed6af70c57ad\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/IAaveProtocolDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IAaveProtocolDataProvider {\\n    function getUserReserveData(address asset, address user)\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n}\\n\",\"keccak256\":\"0x8444e5bce4ff4a8715f095a931605e9765bffe3cb206bdf33f4e849cfab85735\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ReserveData} from \\\"../../../structs/SAave.sol\\\";\\n\\ninterface ILendingPool {\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (ReserveData memory);\\n\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function getReservesList() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x1215c59b3edc74953de7c551ee7de24aa00bebf0529f523dea6c99cb1faf5c1b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ILendingPoolAddressesProvider {\\n    function getLendingPool() external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4966d8f93cd89d770c8c5255aa0c266cb7df36adba5b195d0fd5d97960df8f02\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ICToken {\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCash() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x47be032b0dfd57cc06f58eb23c9cb8ec5aeaaee4abd3f620bd0260349e2251c5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ICToken} from \\\"./ICToken.sol\\\";\\nimport {Market} from \\\"../../../structs/SCompound.sol\\\";\\n\\ninterface IComptroller {\\n    function getAssetsIn(address account)\\n        external\\n        view\\n        returns (ICToken[] memory);\\n\\n    function oracle() external view returns (address);\\n\\n    function markets(address cToken)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isComped\\n        );\\n}\\n\",\"keccak256\":\"0x83078bc37abc76900f2db14752e9637c812d6e1798335f4ec7b257c4d0aaaa50\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ICToken} from \\\"./ICToken.sol\\\";\\n\\ninterface IPriceOracle {\\n    function getUnderlyingPrice(ICToken cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa6042bacdf286c327a2fcaa322cbbaa85b6f1407b772f2b5785b58917f6695e9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd0fbf10a1342de2706ae8dd1881ffe09c7bc1f7a3ee93b39a3b5c4acebf24487\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/IMcdManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IMcdManager {\\n    function ilks(uint256) external view returns (bytes32);\\n\\n    function urns(uint256) external view returns (address);\\n\\n    function vat() external view returns (address);\\n\\n    function owns(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x600c309dbdb47e7fb5b5b135e174c5af0fd80a583cc92e9db15868626ea13944\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/ITokenJoinInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ITokenJoinInterface {\\n    function dec() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a73dd7b495b10a6405595d2a72749940cbe62610ea1b4d7ec02f815bf4ed4d6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/IVat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IVat {\\n    function ilks(bytes32)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function dai(address) external view returns (uint256);\\n\\n    function urns(bytes32, address) external view returns (uint256, uint256);\\n\\n    function debt() external view returns (uint256);\\n\\n    // solhint-disable-next-line\\n    function Line() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x562456d1f66878e0dacc113383383c2eb3d4edcb76c9e0ecc04251895f5a453d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/gelato/IGelatoGasPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IGelatoGasPriceOracle {\\n    function latestAnswer() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x5d16f3187c98a910aeb6309f4b5a705237806fba133c7174713a9df7f482cbcb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/gelato/IOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IOracleAggregator {\\n    function getExpectedReturnAmount(\\n        uint256 amountIn,\\n        address inToken,\\n        address outToken\\n    ) external view returns (uint256 returnAmount, uint256 outTokenDecimals);\\n}\\n\",\"keccak256\":\"0xde61cf48c28a17f34bba0327a79af354cff3b92fdbcbe76ea5e0d6b804210b47\",\"license\":\"UNLICENSED\"},\"contracts/lib/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2456950f3849af7457015c291b9a45271ca3497d1c870361878d0f35de41080\",\"license\":\"UNLICENSED\"},\"contracts/structs/SAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// ////////// LendingPool /////////////////\\nstruct AaveUserData {\\n    uint256 totalCollateralETH;\\n    uint256 totalBorrowsETH;\\n    uint256 availableBorrowsETH;\\n    uint256 currentLiquidationThreshold;\\n    uint256 ltv;\\n    uint256 healthFactor;\\n    uint256 ethPriceInUsd;\\n}\\n\\nstruct ReserveConfigurationMap {\\n    uint256 data;\\n}\\n\\nstruct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n}\\n\",\"keccak256\":\"0x10956f70b043a4fdcaa69ceb6d286301ce8da849c0ccd5f5bc83690dab63f843\",\"license\":\"UNLICENSED\"},\"contracts/structs/SCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nstruct AccountLiquidityLocalVars {\\n    uint256 sumCollateral;\\n    uint256 sumBorrowPlusEffects;\\n    uint256 cTokenBalance;\\n    uint256 borrowBalance;\\n    uint256 exchangeRateMantissa;\\n    uint256 oraclePriceMantissa;\\n    uint256 collateralFactor;\\n    uint256 exchangeRate;\\n    uint256 oraclePrice;\\n    uint256 tokensToDenom;\\n}\\n\\nstruct Market {\\n    bool isListed;\\n    uint256 collateralFactorMantissa;\\n    mapping(address => bool) accountMembership;\\n    bool isComped;\\n}\\n\\nstruct CompData {\\n    uint256 tokenPriceInEth;\\n    uint256 tokenPriceInUsd;\\n    uint256 exchangeRateStored;\\n    uint256 balanceOfUser;\\n    uint256 borrowBalanceStoredUser;\\n    uint256 supplyRatePerBlock;\\n    uint256 borrowRatePerBlock;\\n    uint256 collateralFactor;\\n    bool isComped;\\n}\\n\",\"keccak256\":\"0xe8a0f77e7d1cfe283a9a9d356c0f32afb1fef06757e36c84948be9b0a4955927\",\"license\":\"UNLICENSED\"},\"contracts/structs/SDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nstruct DebtBridgeInputData {\\n    address dsa;\\n    uint256 colAmt;\\n    address colToken;\\n    uint256 debtAmt;\\n    address oracleAggregator;\\n    uint256 makerDestVaultId;\\n    string makerDestColType;\\n    uint256 fees;\\n    uint256 flashRoute;\\n}\\n\",\"keccak256\":\"0xec7b95278e03209f89a8c95b53b15d1c3faad51fd733b1f1b3d4d1a36ebd3bdd\",\"license\":\"UNLICENSED\"},\"contracts/vendor/Convert.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {mul as _mul} from \\\"./DSMath.sol\\\";\\n\\nfunction _stringToBytes32(string memory str) pure returns (bytes32 result) {\\n    require(bytes(str).length != 0, \\\"string-empty\\\");\\n    assembly {\\n        result := mload(add(str, 32))\\n    }\\n}\\n\\nfunction _convertTo18(uint256 _dec, uint256 _amt) pure returns (uint256 amt) {\\n    amt = _mul(_amt, 10**(18 - _dec));\\n}\\n\",\"keccak256\":\"0xba31db6ad3b69599bc5a6d8dc27f39fa6795f671af2f69fcd747983c01b799ce\",\"license\":\"UNLICENSED\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: AGPL-3.0-or-later\\\"\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.0;\\n\\nfunction add(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n}\\n\\nfunction sub(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n}\\n\\nfunction mul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n}\\n\\nfunction min(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction max(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nfunction imin(int256 x, int256 y) pure returns (int256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction imax(int256 x, int256 y) pure returns (int256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nuint256 constant WAD = 10**18;\\nuint256 constant RAY = 10**27;\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), WAD / 2) / WAD;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction rmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), RAY / 2) / RAY;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, WAD), y / 2) / y;\\n}\\n\\n//rounds to zero if x*y < RAY / 2\\nfunction rdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, RAY), y / 2) / y;\\n}\\n\\n// This famous algorithm is called \\\"exponentiation by squaring\\\"\\n// and calculates x^n with x as fixed-point and n as regular unsigned.\\n//\\n// It's O(log n), instead of O(n) for naive repeated multiplication.\\n//\\n// These facts are why it works:\\n//\\n//  If n is even, then x^n = (x^2)^(n/2).\\n//  If n is odd,  then x^n = x * x^(n-1),\\n//   and applying the equation for even x gives\\n//    x^n = x * (x^2)^((n-1) / 2).\\n//\\n//  Also, EVM division is flooring and\\n//    floor[(n-1) / 2] = floor[n / 2].\\n//\\nfunction rpow(uint256 x, uint256 n) pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n        x = rmul(x, x);\\n\\n        if (n % 2 != 0) {\\n            z = rmul(z, x);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d7cc87f9c74e3c8d9cfe196e0bdd657f2c4c0fbb588db8cb941066e859ed60a\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002997380380620029978339818101604052810190620000379190620000c4565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505062000153565b600081519050620000be8162000139565b92915050565b60008060408385031215620000d857600080fd5b6000620000e885828601620000ad565b9250506020620000fb85828601620000ad565b9150509250929050565b6000620001128262000119565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001448162000105565b81146200015057600080fd5b50565b60805160601c60a05160601c61280a6200018d600039600081816101d8015261030e01526000818161013a015261037c015261280a6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806359d6b78a1461005c57806361d10bf01461008c5780638dffe3f4146100bc578063a99891c5146100da578063bc95af311461010a575b600080fd5b61007660048036038101906100719190611a0e565b610128565b6040516100839190612060565b60405180910390f35b6100a660048036038101906100a1919061198e565b610281565b6040516100b3919061203e565b60405180910390f35b6100c461030c565b6040516100d19190611f91565b60405180910390f35b6100f460048036038101906100ef9190611b2d565b610330565b6040516101019190612060565b60405180910390f35b61011261037a565b60405161011f9190611f91565b60405180910390f35b60606102018584846101fc88600089147f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561019e57600080fd5b505afa1580156101b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d69190611b04565b7f000000000000000000000000000000000000000000000000000000000000000061039e565b6103f1565b610240576040518060400160405280600281526020017f4f4b000000000000000000000000000000000000000000000000000000000000815250610277565b6040518060400160405280601781526020017f4d616b6572446562744365696c696e67526561636865640000000000000000008152505b9050949350505050565b60606359d6b78a60e01b86868686866040516024016102a4959493929190611fac565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606000806000808787600490809261034b93929190612258565b8101906103589190611913565b935093509350935061036c84848484610128565b945050505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806103b26103ad87610421565b6106eb565b90506103e6816103df876103da736b175474e89094c44da98b954eedeac495271d0f86610706565b610841565b8686610918565b915050949350505050565b60006103fd8486610a15565b61040857600061040a565b835b9350610417848484610ba5565b9050949350505050565b600080735ef30b9986345249bc32d8928b7ee64de9435e3990506000806104488386610bd1565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561049457600080fd5b505afa1580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc91906118ea565b905060008173ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b81526004016105099190611ffa565b60a06040518083038186803b15801561052157600080fd5b505afa158015610535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105599190611bd5565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff16632424be5c86866040518363ffffffff1660e01b815260040161059c929190612015565b604080518083038186803b1580156105b357600080fd5b505afa1580156105c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105eb9190611b99565b91505060008373ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b81526004016106299190611f91565b60206040518083038186803b15801561064157600080fd5b505afa158015610655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106799190611b04565b9050600061069061068a8486610cf1565b83610d5e565b90506b033b2e3c9fd0803ce8000000816106aa91906122e1565b9850806106c38a6b033b2e3c9fd0803ce8000000610cf1565b106106ce57886106dc565b6001896106db919061228b565b5b98505050505050505050919050565b60006106ff82670df27a2cdf448000610db7565b9050919050565b60008073a004a5afba04b74037e9e52ba1f7eb02b5e6150973ffffffffffffffffffffffffffffffffffffffff16635a860c87856040518263ffffffff1660e01b81526004016107569190611f91565b60806040518083038186803b15801561076e57600080fd5b505afa158015610782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a69190611adb565b905082816000015111156107be57600091505061083b565b82816020015111156107d457600191505061083b565b82816040015111156107ea57600291505061083b565b828160600151111561080057600391505061083b565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083290612142565b60405180910390fd5b92915050565b6000610865826040518060600160405280603e8152602001612797603e9139610dfb565b610910836108b757610875610e47565b83600481106108ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015161090b565b62030d406108c3610e47565b84600481106108fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015161090a919061228b565b5b610e81565b905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff16633c772b6c61094288610eaf565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee736b175474e89094c44da98b954eedeac495271d0f6040518463ffffffff1660e01b815260040161098a9392919061217d565b604080518083038186803b1580156109a157600080fd5b505afa1580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190611b99565b915091506109e78183610ec9565b91506109f38786610db7565b82886109ff919061228b565b610a09919061228b565b92505050949350505050565b600080831415610a285760009050610b9f565b735ef30b9986345249bc32d8928b7ee64de9435e3973ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b8152600401610a759190612162565b60206040518083038186803b158015610a8d57600080fd5b505afa925050508015610abe57506040513d601f19601f82011682018060405250810190610abb91906118ea565b60015b610b6c57610aca61266d565b80610ad55750610b31565b80604051602001610ae69190611f6f565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b289190612060565b60405180910390fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6390612102565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16149150505b92915050565b6000808414610bbd57610bb88483610ef5565b610bc8565b610bc78383611228565b5b90509392505050565b6000808373ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd846040518263ffffffff1660e01b8152600401610c0d9190612162565b60206040518083038186803b158015610c2557600080fd5b505afa158015610c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5d9190611a89565b91508373ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b8152600401610c989190612162565b60206040518083038186803b158015610cb057600080fd5b505afa158015610cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce891906118ea565b90509250929050565b600080821480610d19575082828385610d0a9190612483565b925082610d1791906122e1565b145b610d58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4f906120a2565b60405180910390fd5b92915050565b6000828284610d6d91906124dd565b9150811115610db1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da890612082565b60405180910390fd5b92915050565b6000670de0b6b3a7640000610de9610dcf8585610cf1565b6002670de0b6b3a7640000610de491906122e1565b6114c9565b610df391906122e1565b905092915050565b60048211158190610e42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e399190612060565b60405180910390fd5b505050565b610e4f6116c5565b604051806080016040528062266fd88152602001622feb948152602001623c97b8815260200162424ca8815250905090565b60006064601e6064610e93919061228b565b83610e9e9190612483565b610ea891906122e1565b9050919050565b6000610ec282610ebd611522565b610cf1565b9050919050565b6000610eed82846012610edc91906124dd565b600a610ee89190612365565b610cf1565b905092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5757600080fd5b505afa158015610f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8f91906118ea565b9050600080610f9e8488610bd1565b9150915060008060008573ffffffffffffffffffffffffffffffffffffffff1663d9638d36866040518263ffffffff1660e01b8152600401610fe09190611ffa565b60a06040518083038186803b158015610ff857600080fd5b505afa15801561100c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110309190611bd5565b509350509250925060008673ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b81526004016110739190611f91565b60206040518083038186803b15801561108b57600080fd5b505afa15801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c39190611b04565b905060008773ffffffffffffffffffffffffffffffffffffffff1663babe8a3f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561110d57600080fd5b505afa158015611121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111459190611b04565b905060008873ffffffffffffffffffffffffffffffffffffffff16630dca59c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561118f57600080fd5b505afa1580156111a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c79190611b04565b905060006111d68d8588611603565b905060006111e48783610cf1565b90506111f083826114c9565b92506111fc88836114c9565b9750856112098989610cf1565b118061121457508383115b9c5050505050505050505050505092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561128a57600080fd5b505afa15801561129e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c291906118ea565b905060006112cf86611673565b905060008060008473ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b815260040161130f9190611ffa565b60a06040518083038186803b15801561132757600080fd5b505afa15801561133b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135f9190611bd5565b509350509250925060008573ffffffffffffffffffffffffffffffffffffffff1663babe8a3f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113af57600080fd5b505afa1580156113c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e79190611b04565b905060008673ffffffffffffffffffffffffffffffffffffffff16630dca59c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561143157600080fd5b505afa158015611445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114699190611b04565b905060006114798b600087611603565b905060006114878683610cf1565b905061149383826114c9565b925061149f87836114c9565b9650846114ac8888610cf1565b11806114b757508383115b9a505050505050505050505092915050565b60008282846114d8919061228b565b915081101561151c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611513906120c2565b60405180910390fd5b92915050565b60008073169e633a2d1e6c10dd91238ba11c4a708dfef37c73ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561157f57600080fd5b505afa158015611593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b79190611ab2565b9050600081136115fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f3906120e2565b60405180910390fd5b8091505090565b60008161162561161f866b033b2e3c9fd0803ce8000000610cf1565b85610d5e565b61162f91906122e1565b9050611647846b033b2e3c9fd0803ce8000000610cf1565b6116518284610cf1565b1061165c578061166a565b600181611669919061228b565b5b90509392505050565b600080825114156116b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b090612122565b60405180910390fd5b60208201519050919050565b6040518060800160405280600490602082028036833780820191505090505090565b60006116fa6116f5846121e5565b6121b4565b90508281526020810184848401111561171257600080fd5b61171d848285612573565b509392505050565b60008135905061173481612723565b92915050565b60008151905061174981612723565b92915050565b60008135905061175e8161273a565b92915050565b60008151905061177381612751565b92915050565b60008083601f84011261178b57600080fd5b8235905067ffffffffffffffff8111156117a457600080fd5b6020830191508360018202830111156117bc57600080fd5b9250929050565b6000815190506117d281612768565b92915050565b60008083601f8401126117ea57600080fd5b8235905067ffffffffffffffff81111561180357600080fd5b60208301915083600182028301111561181b57600080fd5b9250929050565b600082601f83011261183357600080fd5b81356118438482602086016116e7565b91505092915050565b60006080828403121561185e57600080fd5b61186860806121b4565b90506000611878848285016118d5565b600083015250602061188c848285016118d5565b60208301525060406118a0848285016118d5565b60408301525060606118b4848285016118d5565b60608301525092915050565b6000813590506118cf8161277f565b92915050565b6000815190506118e48161277f565b92915050565b6000602082840312156118fc57600080fd5b600061190a8482850161173a565b91505092915050565b6000806000806080858703121561192957600080fd5b60006119378782880161174f565b9450506020611948878288016118c0565b9350506040611959878288016118c0565b925050606085013567ffffffffffffffff81111561197657600080fd5b61198287828801611822565b91505092959194509250565b6000806000806000608086880312156119a657600080fd5b60006119b488828901611725565b95505060206119c5888289016118c0565b94505060406119d6888289016118c0565b935050606086013567ffffffffffffffff8111156119f357600080fd5b6119ff888289016117d8565b92509250509295509295909350565b60008060008060808587031215611a2457600080fd5b6000611a3287828801611725565b9450506020611a43878288016118c0565b9350506040611a54878288016118c0565b925050606085013567ffffffffffffffff811115611a7157600080fd5b611a7d87828801611822565b91505092959194509250565b600060208284031215611a9b57600080fd5b6000611aa984828501611764565b91505092915050565b600060208284031215611ac457600080fd5b6000611ad2848285016117c3565b91505092915050565b600060808284031215611aed57600080fd5b6000611afb8482850161184c565b91505092915050565b600060208284031215611b1657600080fd5b6000611b24848285016118d5565b91505092915050565b60008060008060608587031215611b4357600080fd5b6000611b51878288016118c0565b945050602085013567ffffffffffffffff811115611b6e57600080fd5b611b7a87828801611779565b93509350506040611b8d878288016118c0565b91505092959194509250565b60008060408385031215611bac57600080fd5b6000611bba858286016118d5565b9250506020611bcb858286016118d5565b9150509250929050565b600080600080600060a08688031215611bed57600080fd5b6000611bfb888289016118d5565b9550506020611c0c888289016118d5565b9450506040611c1d888289016118d5565b9350506060611c2e888289016118d5565b9250506080611c3f888289016118d5565b9150509295509295909350565b611c5581612511565b82525050565b611c6481612535565b82525050565b6000611c7582612215565b611c7f818561222b565b9350611c8f818560208601612582565b611c9881612642565b840191505092915050565b6000611caf838561223c565b9350611cbc838584612573565b611cc583612642565b840190509392505050565b6000611cdb82612220565b611ce5818561223c565b9350611cf5818560208601612582565b611cfe81612642565b840191505092915050565b6000611d1482612220565b611d1e818561224d565b9350611d2e818560208601612582565b80840191505092915050565b6000611d4760158361223c565b91507f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006000830152602082019050919050565b6000611d8760148361223c565b91507f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000611dc760148361223c565b91507f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000611e07601b8361223c565b91507f5f67657447656c61746f47617350726963653a306f7242656c6f7700000000006000830152602082019050919050565b6000611e4760158361224d565b91507f464d616b65722e5f69735661756c744f776e65723a00000000000000000000006000830152601582019050919050565b6000611e87601e8361223c565b91507f464d616b65722e5f69735661756c744f776e65723a756e646566696e656400006000830152602082019050919050565b6000611ec7600c8361223c565b91507f737472696e672d656d70747900000000000000000000000000000000000000006000830152602082019050919050565b6000611f07602e8361223c565b91507f4647656c61746f446562744272696467652e5f676574466c6173684c6f616e5260008301527f6f7574653a20696c6c69717569640000000000000000000000000000000000006020830152604082019050919050565b611f6981612569565b82525050565b6000611f7a82611e3a565b9150611f868284611d09565b915081905092915050565b6000602082019050611fa66000830184611c4c565b92915050565b6000608082019050611fc16000830188611c4c565b611fce6020830187611f60565b611fdb6040830186611f60565b8181036060830152611fee818486611ca3565b90509695505050505050565b600060208201905061200f6000830184611c5b565b92915050565b600060408201905061202a6000830185611c5b565b6120376020830184611c4c565b9392505050565b600060208201905081810360008301526120588184611c6a565b905092915050565b6000602082019050818103600083015261207a8184611cd0565b905092915050565b6000602082019050818103600083015261209b81611d3a565b9050919050565b600060208201905081810360008301526120bb81611d7a565b9050919050565b600060208201905081810360008301526120db81611dba565b9050919050565b600060208201905081810360008301526120fb81611dfa565b9050919050565b6000602082019050818103600083015261211b81611e7a565b9050919050565b6000602082019050818103600083015261213b81611eba565b9050919050565b6000602082019050818103600083015261215b81611efa565b9050919050565b60006020820190506121776000830184611f60565b92915050565b60006060820190506121926000830186611f60565b61219f6020830185611c4c565b6121ac6040830184611c4c565b949350505050565b6000604051905081810181811067ffffffffffffffff821117156121db576121da612613565b5b8060405250919050565b600067ffffffffffffffff821115612200576121ff612613565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000808585111561226857600080fd5b8386111561227557600080fd5b6001850283019150848603905094509492505050565b600061229682612569565b91506122a183612569565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156122d6576122d56125b5565b5b828201905092915050565b60006122ec82612569565b91506122f783612569565b925082612307576123066125e4565b5b828204905092915050565b6000808291508390505b600185111561235c57808604811115612338576123376125b5565b5b60018516156123475780820291505b808102905061235585612653565b945061231c565b94509492505050565b600061237082612569565b915061237b83612569565b92506123a87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846123b0565b905092915050565b6000826123c0576001905061247c565b816123ce576000905061247c565b81600181146123e457600281146123ee5761241d565b600191505061247c565b60ff841115612400576123ff6125b5565b5b8360020a915084821115612417576124166125b5565b5b5061247c565b5060208310610133831016604e8410600b84101617156124525782820a90508381111561244d5761244c6125b5565b5b61247c565b61245f8484846001612312565b92509050818404811115612476576124756125b5565b5b81810290505b9392505050565b600061248e82612569565b915061249983612569565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156124d2576124d16125b5565b5b828202905092915050565b60006124e882612569565b91506124f383612569565b925082821015612506576125056125b5565b5b828203905092915050565b600061251c82612549565b9050919050565b600061252e82612549565b9050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156125a0578082015181840152602081019050612585565b838111156125af576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b60008160e01c9050919050565b600060443d101561267d57612720565b60046000803e61268e600051612660565b6308c379a0811461269f5750612720565b60405160043d036004823e80513d602482011167ffffffffffffffff821117156126cb57505050612720565b808201805167ffffffffffffffff8111156126ea575050505050612720565b8060208301013d850181111561270557505050505050612720565b61270e82612642565b60208401016040528296505050505050505b90565b61272c81612511565b811461273757600080fd5b50565b61274381612523565b811461274e57600080fd5b50565b61275a81612535565b811461276557600080fd5b50565b6127718161253f565b811461277c57600080fd5b50565b61278881612569565b811461279357600080fd5b5056fe4647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f4d616b65723a20696e76616c696420726f75746520696e646578a264697066735822122012a64cdd6c675b403939ff1201ef85c2f90fae26b4ec27d4456be04fde322aa764736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806359d6b78a1461005c57806361d10bf01461008c5780638dffe3f4146100bc578063a99891c5146100da578063bc95af311461010a575b600080fd5b61007660048036038101906100719190611a0e565b610128565b6040516100839190612060565b60405180910390f35b6100a660048036038101906100a1919061198e565b610281565b6040516100b3919061203e565b60405180910390f35b6100c461030c565b6040516100d19190611f91565b60405180910390f35b6100f460048036038101906100ef9190611b2d565b610330565b6040516101019190612060565b60405180910390f35b61011261037a565b60405161011f9190611f91565b60405180910390f35b60606102018584846101fc88600089147f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561019e57600080fd5b505afa1580156101b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d69190611b04565b7f000000000000000000000000000000000000000000000000000000000000000061039e565b6103f1565b610240576040518060400160405280600281526020017f4f4b000000000000000000000000000000000000000000000000000000000000815250610277565b6040518060400160405280601781526020017f4d616b6572446562744365696c696e67526561636865640000000000000000008152505b9050949350505050565b60606359d6b78a60e01b86868686866040516024016102a4959493929190611fac565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606000806000808787600490809261034b93929190612258565b8101906103589190611913565b935093509350935061036c84848484610128565b945050505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806103b26103ad87610421565b6106eb565b90506103e6816103df876103da736b175474e89094c44da98b954eedeac495271d0f86610706565b610841565b8686610918565b915050949350505050565b60006103fd8486610a15565b61040857600061040a565b835b9350610417848484610ba5565b9050949350505050565b600080735ef30b9986345249bc32d8928b7ee64de9435e3990506000806104488386610bd1565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561049457600080fd5b505afa1580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc91906118ea565b905060008173ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b81526004016105099190611ffa565b60a06040518083038186803b15801561052157600080fd5b505afa158015610535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105599190611bd5565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff16632424be5c86866040518363ffffffff1660e01b815260040161059c929190612015565b604080518083038186803b1580156105b357600080fd5b505afa1580156105c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105eb9190611b99565b91505060008373ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b81526004016106299190611f91565b60206040518083038186803b15801561064157600080fd5b505afa158015610655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106799190611b04565b9050600061069061068a8486610cf1565b83610d5e565b90506b033b2e3c9fd0803ce8000000816106aa91906122e1565b9850806106c38a6b033b2e3c9fd0803ce8000000610cf1565b106106ce57886106dc565b6001896106db919061228b565b5b98505050505050505050919050565b60006106ff82670df27a2cdf448000610db7565b9050919050565b60008073a004a5afba04b74037e9e52ba1f7eb02b5e6150973ffffffffffffffffffffffffffffffffffffffff16635a860c87856040518263ffffffff1660e01b81526004016107569190611f91565b60806040518083038186803b15801561076e57600080fd5b505afa158015610782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a69190611adb565b905082816000015111156107be57600091505061083b565b82816020015111156107d457600191505061083b565b82816040015111156107ea57600291505061083b565b828160600151111561080057600391505061083b565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083290612142565b60405180910390fd5b92915050565b6000610865826040518060600160405280603e8152602001612797603e9139610dfb565b610910836108b757610875610e47565b83600481106108ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015161090b565b62030d406108c3610e47565b84600481106108fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015161090a919061228b565b5b610e81565b905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff16633c772b6c61094288610eaf565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee736b175474e89094c44da98b954eedeac495271d0f6040518463ffffffff1660e01b815260040161098a9392919061217d565b604080518083038186803b1580156109a157600080fd5b505afa1580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190611b99565b915091506109e78183610ec9565b91506109f38786610db7565b82886109ff919061228b565b610a09919061228b565b92505050949350505050565b600080831415610a285760009050610b9f565b735ef30b9986345249bc32d8928b7ee64de9435e3973ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b8152600401610a759190612162565b60206040518083038186803b158015610a8d57600080fd5b505afa925050508015610abe57506040513d601f19601f82011682018060405250810190610abb91906118ea565b60015b610b6c57610aca61266d565b80610ad55750610b31565b80604051602001610ae69190611f6f565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b289190612060565b60405180910390fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6390612102565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16149150505b92915050565b6000808414610bbd57610bb88483610ef5565b610bc8565b610bc78383611228565b5b90509392505050565b6000808373ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd846040518263ffffffff1660e01b8152600401610c0d9190612162565b60206040518083038186803b158015610c2557600080fd5b505afa158015610c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5d9190611a89565b91508373ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b8152600401610c989190612162565b60206040518083038186803b158015610cb057600080fd5b505afa158015610cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce891906118ea565b90509250929050565b600080821480610d19575082828385610d0a9190612483565b925082610d1791906122e1565b145b610d58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4f906120a2565b60405180910390fd5b92915050565b6000828284610d6d91906124dd565b9150811115610db1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da890612082565b60405180910390fd5b92915050565b6000670de0b6b3a7640000610de9610dcf8585610cf1565b6002670de0b6b3a7640000610de491906122e1565b6114c9565b610df391906122e1565b905092915050565b60048211158190610e42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e399190612060565b60405180910390fd5b505050565b610e4f6116c5565b604051806080016040528062266fd88152602001622feb948152602001623c97b8815260200162424ca8815250905090565b60006064601e6064610e93919061228b565b83610e9e9190612483565b610ea891906122e1565b9050919050565b6000610ec282610ebd611522565b610cf1565b9050919050565b6000610eed82846012610edc91906124dd565b600a610ee89190612365565b610cf1565b905092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5757600080fd5b505afa158015610f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8f91906118ea565b9050600080610f9e8488610bd1565b9150915060008060008573ffffffffffffffffffffffffffffffffffffffff1663d9638d36866040518263ffffffff1660e01b8152600401610fe09190611ffa565b60a06040518083038186803b158015610ff857600080fd5b505afa15801561100c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110309190611bd5565b509350509250925060008673ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b81526004016110739190611f91565b60206040518083038186803b15801561108b57600080fd5b505afa15801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c39190611b04565b905060008773ffffffffffffffffffffffffffffffffffffffff1663babe8a3f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561110d57600080fd5b505afa158015611121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111459190611b04565b905060008873ffffffffffffffffffffffffffffffffffffffff16630dca59c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561118f57600080fd5b505afa1580156111a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c79190611b04565b905060006111d68d8588611603565b905060006111e48783610cf1565b90506111f083826114c9565b92506111fc88836114c9565b9750856112098989610cf1565b118061121457508383115b9c5050505050505050505050505092915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561128a57600080fd5b505afa15801561129e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c291906118ea565b905060006112cf86611673565b905060008060008473ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b815260040161130f9190611ffa565b60a06040518083038186803b15801561132757600080fd5b505afa15801561133b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135f9190611bd5565b509350509250925060008573ffffffffffffffffffffffffffffffffffffffff1663babe8a3f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113af57600080fd5b505afa1580156113c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e79190611b04565b905060008673ffffffffffffffffffffffffffffffffffffffff16630dca59c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561143157600080fd5b505afa158015611445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114699190611b04565b905060006114798b600087611603565b905060006114878683610cf1565b905061149383826114c9565b925061149f87836114c9565b9650846114ac8888610cf1565b11806114b757508383115b9a505050505050505050505092915050565b60008282846114d8919061228b565b915081101561151c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611513906120c2565b60405180910390fd5b92915050565b60008073169e633a2d1e6c10dd91238ba11c4a708dfef37c73ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561157f57600080fd5b505afa158015611593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b79190611ab2565b9050600081136115fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f3906120e2565b60405180910390fd5b8091505090565b60008161162561161f866b033b2e3c9fd0803ce8000000610cf1565b85610d5e565b61162f91906122e1565b9050611647846b033b2e3c9fd0803ce8000000610cf1565b6116518284610cf1565b1061165c578061166a565b600181611669919061228b565b5b90509392505050565b600080825114156116b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b090612122565b60405180910390fd5b60208201519050919050565b6040518060800160405280600490602082028036833780820191505090505090565b60006116fa6116f5846121e5565b6121b4565b90508281526020810184848401111561171257600080fd5b61171d848285612573565b509392505050565b60008135905061173481612723565b92915050565b60008151905061174981612723565b92915050565b60008135905061175e8161273a565b92915050565b60008151905061177381612751565b92915050565b60008083601f84011261178b57600080fd5b8235905067ffffffffffffffff8111156117a457600080fd5b6020830191508360018202830111156117bc57600080fd5b9250929050565b6000815190506117d281612768565b92915050565b60008083601f8401126117ea57600080fd5b8235905067ffffffffffffffff81111561180357600080fd5b60208301915083600182028301111561181b57600080fd5b9250929050565b600082601f83011261183357600080fd5b81356118438482602086016116e7565b91505092915050565b60006080828403121561185e57600080fd5b61186860806121b4565b90506000611878848285016118d5565b600083015250602061188c848285016118d5565b60208301525060406118a0848285016118d5565b60408301525060606118b4848285016118d5565b60608301525092915050565b6000813590506118cf8161277f565b92915050565b6000815190506118e48161277f565b92915050565b6000602082840312156118fc57600080fd5b600061190a8482850161173a565b91505092915050565b6000806000806080858703121561192957600080fd5b60006119378782880161174f565b9450506020611948878288016118c0565b9350506040611959878288016118c0565b925050606085013567ffffffffffffffff81111561197657600080fd5b61198287828801611822565b91505092959194509250565b6000806000806000608086880312156119a657600080fd5b60006119b488828901611725565b95505060206119c5888289016118c0565b94505060406119d6888289016118c0565b935050606086013567ffffffffffffffff8111156119f357600080fd5b6119ff888289016117d8565b92509250509295509295909350565b60008060008060808587031215611a2457600080fd5b6000611a3287828801611725565b9450506020611a43878288016118c0565b9350506040611a54878288016118c0565b925050606085013567ffffffffffffffff811115611a7157600080fd5b611a7d87828801611822565b91505092959194509250565b600060208284031215611a9b57600080fd5b6000611aa984828501611764565b91505092915050565b600060208284031215611ac457600080fd5b6000611ad2848285016117c3565b91505092915050565b600060808284031215611aed57600080fd5b6000611afb8482850161184c565b91505092915050565b600060208284031215611b1657600080fd5b6000611b24848285016118d5565b91505092915050565b60008060008060608587031215611b4357600080fd5b6000611b51878288016118c0565b945050602085013567ffffffffffffffff811115611b6e57600080fd5b611b7a87828801611779565b93509350506040611b8d878288016118c0565b91505092959194509250565b60008060408385031215611bac57600080fd5b6000611bba858286016118d5565b9250506020611bcb858286016118d5565b9150509250929050565b600080600080600060a08688031215611bed57600080fd5b6000611bfb888289016118d5565b9550506020611c0c888289016118d5565b9450506040611c1d888289016118d5565b9350506060611c2e888289016118d5565b9250506080611c3f888289016118d5565b9150509295509295909350565b611c5581612511565b82525050565b611c6481612535565b82525050565b6000611c7582612215565b611c7f818561222b565b9350611c8f818560208601612582565b611c9881612642565b840191505092915050565b6000611caf838561223c565b9350611cbc838584612573565b611cc583612642565b840190509392505050565b6000611cdb82612220565b611ce5818561223c565b9350611cf5818560208601612582565b611cfe81612642565b840191505092915050565b6000611d1482612220565b611d1e818561224d565b9350611d2e818560208601612582565b80840191505092915050565b6000611d4760158361223c565b91507f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006000830152602082019050919050565b6000611d8760148361223c565b91507f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000611dc760148361223c565b91507f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000611e07601b8361223c565b91507f5f67657447656c61746f47617350726963653a306f7242656c6f7700000000006000830152602082019050919050565b6000611e4760158361224d565b91507f464d616b65722e5f69735661756c744f776e65723a00000000000000000000006000830152601582019050919050565b6000611e87601e8361223c565b91507f464d616b65722e5f69735661756c744f776e65723a756e646566696e656400006000830152602082019050919050565b6000611ec7600c8361223c565b91507f737472696e672d656d70747900000000000000000000000000000000000000006000830152602082019050919050565b6000611f07602e8361223c565b91507f4647656c61746f446562744272696467652e5f676574466c6173684c6f616e5260008301527f6f7574653a20696c6c69717569640000000000000000000000000000000000006020830152604082019050919050565b611f6981612569565b82525050565b6000611f7a82611e3a565b9150611f868284611d09565b915081905092915050565b6000602082019050611fa66000830184611c4c565b92915050565b6000608082019050611fc16000830188611c4c565b611fce6020830187611f60565b611fdb6040830186611f60565b8181036060830152611fee818486611ca3565b90509695505050505050565b600060208201905061200f6000830184611c5b565b92915050565b600060408201905061202a6000830185611c5b565b6120376020830184611c4c565b9392505050565b600060208201905081810360008301526120588184611c6a565b905092915050565b6000602082019050818103600083015261207a8184611cd0565b905092915050565b6000602082019050818103600083015261209b81611d3a565b9050919050565b600060208201905081810360008301526120bb81611d7a565b9050919050565b600060208201905081810360008301526120db81611dba565b9050919050565b600060208201905081810360008301526120fb81611dfa565b9050919050565b6000602082019050818103600083015261211b81611e7a565b9050919050565b6000602082019050818103600083015261213b81611eba565b9050919050565b6000602082019050818103600083015261215b81611efa565b9050919050565b60006020820190506121776000830184611f60565b92915050565b60006060820190506121926000830186611f60565b61219f6020830185611c4c565b6121ac6040830184611c4c565b949350505050565b6000604051905081810181811067ffffffffffffffff821117156121db576121da612613565b5b8060405250919050565b600067ffffffffffffffff821115612200576121ff612613565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000808585111561226857600080fd5b8386111561227557600080fd5b6001850283019150848603905094509492505050565b600061229682612569565b91506122a183612569565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156122d6576122d56125b5565b5b828201905092915050565b60006122ec82612569565b91506122f783612569565b925082612307576123066125e4565b5b828204905092915050565b6000808291508390505b600185111561235c57808604811115612338576123376125b5565b5b60018516156123475780820291505b808102905061235585612653565b945061231c565b94509492505050565b600061237082612569565b915061237b83612569565b92506123a87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846123b0565b905092915050565b6000826123c0576001905061247c565b816123ce576000905061247c565b81600181146123e457600281146123ee5761241d565b600191505061247c565b60ff841115612400576123ff6125b5565b5b8360020a915084821115612417576124166125b5565b5b5061247c565b5060208310610133831016604e8410600b84101617156124525782820a90508381111561244d5761244c6125b5565b5b61247c565b61245f8484846001612312565b92509050818404811115612476576124756125b5565b5b81810290505b9392505050565b600061248e82612569565b915061249983612569565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156124d2576124d16125b5565b5b828202905092915050565b60006124e882612569565b91506124f383612569565b925082821015612506576125056125b5565b5b828203905092915050565b600061251c82612549565b9050919050565b600061252e82612549565b9050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156125a0578082015181840152602081019050612585565b838111156125af576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b60008160e01c9050919050565b600060443d101561267d57612720565b60046000803e61268e600051612660565b6308c379a0811461269f5750612720565b60405160043d036004823e80513d602482011167ffffffffffffffff821117156126cb57505050612720565b808201805167ffffffffffffffff8111156126ea575050505050612720565b8060208301013d850181111561270557505050505050612720565b61270e82612642565b60208401016040528296505050505050505b90565b61272c81612511565b811461273757600080fd5b50565b61274381612523565b811461274e57600080fd5b50565b61275a81612535565b811461276557600080fd5b50565b6127718161253f565b811461277c57600080fd5b50565b61278881612569565b811461279357600080fd5b5056fe4647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f4d616b65723a20696e76616c696420726f75746520696e646578a264697066735822122012a64cdd6c675b403939ff1201ef85c2f90fae26b4ec27d4456be04fde322aa764736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
