{
  "address": "0x9B6eeB49390626Dec7B3785D38879746923B308E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "__id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_txFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_instaFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_getId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_setId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_setIdInstaFee",
          "type": "uint256"
        }
      ],
      "name": "calculateFee",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connectorID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1eea4758107ea32aef508692c285a502a45fd9e92334835bfda5e7dd44e888e1",
  "receipt": {
    "to": null,
    "from": "0xF953c3d475dc0a9877329F71e2CE3d2519a519A2",
    "contractAddress": "0x9B6eeB49390626Dec7B3785D38879746923B308E",
    "transactionIndex": 184,
    "gasUsed": "493163",
    "logsBloom": "0x
    "blockHash": "0x21ed6b27d839d5fc09b7d7492f9fa9bf1fa2cadafb148f55b4dd413c1ab450b7",
    "transactionHash": "0x1eea4758107ea32aef508692c285a502a45fd9e92334835bfda5e7dd44e888e1",
    "logs": [],
    "blockNumber": 11725300,
    "cumulativeGasUsed": "11127262",
    "status": 1,
    "byzantium": true
  },
  "args": [78],
  "solcInputHash": "9e1e417ad5e60d445fed51b4e54a4fd7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_txFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_instaFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setIdInstaFee\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateFee(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"payable to be compatible in conjunction with DSA.cast payable target\",\"params\":{\"_debt\":\"the amount of debt at the beginning\",\"_getId\":\"the amount storing Id in instaMemory.\",\"_instaFeeFactor\":\"instadapp fee.\",\"_setId\":\"id to store total amount (e.g. debt or col to draw)\",\"_setIdInstaFee\":\"id to store instaFee\",\"_txFee\":\"fast transaction fee of Gelato.\"}},\"connectorID()\":{\"details\":\"Connector Details\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateFee(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Function to compute Fee and borrow amount\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/connectors/debt_bridge/ConnectGelatoDebtBridgeFee.sol\":\"ConnectGelatoDebtBridgeFee\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/constants/CInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// InstaDapp\\naddress constant INSTA_MEMORY = 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F;\\n\\n// Connectors\\naddress constant CONNECT_MAKER = 0xac02030d8a8F49eD04b2f52C394D3F901A10F8A9;\\naddress constant CONNECT_COMPOUND = 0x15FdD1e902cAC70786fe7D31013B1a806764B5a2;\\naddress constant INSTA_POOL_V2 = 0xeB4bf86589f808f90EEC8e964dBF16Bd4D284905;\\naddress constant CONNECT_AAVE_V2 = 0xBF6E4331ffd02F7043e62788FD272aeFc712f5ee;\\naddress constant CONNECT_DYDX = 0x6AF6C791c869DfA65f8A2fa042fA47D1535Bef25;\\naddress constant CONNECT_BASIC = 0xe5398f279175962E56fE4c5E0b62dc7208EF36c6;\\naddress constant CONNECT_FEE = 0xB99152F8073033B318C1Bfbfaaa582029e982CE9;\\n\\n// Insta Pool\\naddress constant INSTA_POOL_RESOLVER = 0xa004a5afBa04b74037E9E52bA1f7eb02b5E61509;\\nuint256 constant ROUTE_1_TOLERANCE = 1005e15;\\n\\n// Insta Mapping\\naddress constant INSTA_MAPPING = 0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88;\\n\\naddress constant INSTA_MAKER_RESOLVER = 0x0A7008B38E7015F8C36A49eEbc32513ECA8801E5;\\n\",\"keccak256\":\"0x0a6f769e4d928a6286024c823696c481fbeb75c85bd8648b450a18ff3fc0451d\",\"license\":\"UNLICENSED\"},\"contracts/contracts/connectors/debt_bridge/ConnectGelatoDebtBridgeFee.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ConnectorInterface} from \\\"../../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {IInstaMemory} from \\\"../../../interfaces/InstaDapp/IInstaMemory.sol\\\";\\nimport {INSTA_MEMORY} from \\\"../../../constants/CInstaDapp.sol\\\";\\nimport {_getUint, _setUint} from \\\"../../../functions/InstaDapp/FInstaDapp.sol\\\";\\nimport {wmul} from \\\"../../../vendor/DSMath.sol\\\";\\n\\ncontract ConnectGelatoDebtBridgeFee is ConnectorInterface {\\n    // solhint-disable const-name-snakecase\\n    string public constant override name = \\\"ConnectGelatoDebtBridgeFee-v1.0\\\";\\n    uint256 internal immutable _id;\\n\\n    constructor(uint256 __id) {\\n        _id = __id;\\n    }\\n\\n    /// @notice Function to compute Fee and borrow amount\\n    /// @dev payable to be compatible in conjunction with DSA.cast payable target\\n    /// @param _debt the amount of debt at the beginning\\n    /// @param _txFee  fast transaction fee of Gelato.\\n    /// @param _instaFeeFactor  instadapp fee.\\n    /// @param _getId  the amount storing Id in instaMemory.\\n    /// @param _setId  id to store total amount (e.g. debt or col to draw)\\n    /// @param _setIdInstaFee  id to store instaFee\\n    function calculateFee(\\n        uint256 _debt,\\n        uint256 _txFee,\\n        uint256 _instaFeeFactor,\\n        uint256 _getId,\\n        uint256 _setId,\\n        uint256 _setIdInstaFee\\n    ) external payable {\\n        _debt = _getUint(_getId, _debt);\\n\\n        uint256 instaFee = wmul(_debt, _instaFeeFactor);\\n\\n        _setUint(_setId, _debt + _txFee + instaFee); // Total amount to borrow.\\n        _setUint(_setIdInstaFee, instaFee);\\n    }\\n\\n    /// @dev Connector Details\\n    function connectorID()\\n        external\\n        view\\n        override\\n        returns (uint256 _type, uint256 id)\\n    {\\n        (_type, id) = (1, _id);\\n    }\\n}\\n\",\"keccak256\":\"0x95423c38b5f2d8adee44019fe7e2734afd3909342e2cc5d310c3327409dd4d2b\",\"license\":\"UNLICENSED\"},\"contracts/functions/InstaDapp/FInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {MemoryInterface} from \\\"../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {INSTA_MEMORY} from \\\"../../constants/CInstaDapp.sol\\\";\\n\\nfunction _setUint(uint256 setId, uint256 val) {\\n    if (setId != 0) MemoryInterface(INSTA_MEMORY).setUint(setId, val);\\n}\\n\\nfunction _getUint(uint256 getId, uint256 val) returns (uint256 returnVal) {\\n    returnVal = getId == 0 ? val : MemoryInterface(INSTA_MEMORY).getUint(getId);\\n}\\n\",\"keccak256\":\"0x48eb0525c9deedb2983db0fb3e098fe24a074cdaa48f52d10da475e2695b0664\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/IInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n/// @notice Interface InstaDapp Index\\ninterface IndexInterface {\\n    function connectors(uint256 version) external view returns (address);\\n\\n    function list() external view returns (address);\\n}\\n\\n/// @notice Interface InstaDapp List\\ninterface ListInterface {\\n    function accountID(address _account) external view returns (uint64);\\n}\\n\\n/// @notice Interface InstaDapp InstaMemory\\ninterface MemoryInterface {\\n    function setUint(uint256 _id, uint256 _val) external;\\n\\n    function getUint(uint256 _id) external returns (uint256);\\n}\\n\\n/// @notice Interface InstaDapp Defi Smart Account wallet\\ninterface AccountInterface {\\n    function cast(\\n        address[] calldata _targets,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external payable returns (bytes32[] memory responses);\\n\\n    function version() external view returns (uint256);\\n\\n    function isAuth(address user) external view returns (bool);\\n\\n    function shield() external view returns (bool);\\n}\\n\\ninterface ConnectorInterface {\\n    function connectorID() external view returns (uint256 _type, uint256 _id);\\n\\n    function name() external view returns (string memory);\\n}\\n\\ninterface InstaMapping {\\n    function gemJoinMapping(bytes32) external view returns (address);\\n\\n    function cTokenMapping(address) external view returns (address);\\n}\\n\",\"keccak256\":\"0xe0675f18c98f99ac30d284feec4a1de5feb5f85c8d16c1a9e5cddd739dfb34c7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/IInstaMemory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IInstaMemory {\\n    function getUint(uint256 _id) external returns (uint256 _num);\\n\\n    function setUint(uint256 _id, uint256 _val) external;\\n}\\n\",\"keccak256\":\"0x53560f24b343253206e4126486bca016f4570500d65f0e2fc9696bac51d0c359\",\"license\":\"UNLICENSED\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: AGPL-3.0-or-later\\\"\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.0;\\n\\nfunction add(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n}\\n\\nfunction sub(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n}\\n\\nfunction mul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n}\\n\\nfunction min(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction max(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nfunction imin(int256 x, int256 y) pure returns (int256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction imax(int256 x, int256 y) pure returns (int256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nuint256 constant WAD = 10**18;\\nuint256 constant RAY = 10**27;\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), WAD / 2) / WAD;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction rmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), RAY / 2) / RAY;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, WAD), y / 2) / y;\\n}\\n\\n//rounds to zero if x*y < RAY / 2\\nfunction rdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, RAY), y / 2) / y;\\n}\\n\\n// This famous algorithm is called \\\"exponentiation by squaring\\\"\\n// and calculates x^n with x as fixed-point and n as regular unsigned.\\n//\\n// It's O(log n), instead of O(n) for naive repeated multiplication.\\n//\\n// These facts are why it works:\\n//\\n//  If n is even, then x^n = (x^2)^(n/2).\\n//  If n is odd,  then x^n = x * x^(n-1),\\n//   and applying the equation for even x gives\\n//    x^n = x * (x^2)^((n-1) / 2).\\n//\\n//  Also, EVM division is flooring and\\n//    floor[(n-1) / 2] = floor[n / 2].\\n//\\nfunction rpow(uint256 x, uint256 n) pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n        x = rmul(x, x);\\n\\n        if (n % 2 != 0) {\\n            z = rmul(z, x);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d7cc87f9c74e3c8d9cfe196e0bdd657f2c4c0fbb588db8cb941066e859ed60a\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516108ad3803806108ad83398181016040528101906100329190610055565b80608081815250505061009f565b60008151905061004f81610088565b92915050565b60006020828403121561006757600080fd5b600061007584828501610040565b91505092915050565b6000819050919050565b6100918161007e565b811461009c57600080fd5b50565b6080516107f36100ba600039600061013901526107f36000f3fe6080604052600436106100345760003560e01c806306fdde0314610039578063acd2fd9314610064578063eb15f78114610080575b600080fd5b34801561004557600080fd5b5061004e6100ac565b60405161005b9190610557565b60405180910390f35b61007e60048036038101906100799190610406565b6100e5565b005b34801561008c57600080fd5b50610095610132565b6040516100a39291906105d4565b60405180910390f35b6040518060400160405280601f81526020017f436f6e6e65637447656c61746f446562744272696467654665652d76312e300081525081565b6100ef8387610164565b955060006100fd878661021b565b905061011f8382888a6101109190610619565b61011a9190610619565b61025f565b610129828261025f565b50505050505050565b60008060017f000000000000000000000000000000000000000000000000000000000000000080925081935050509091565b600080831461021157738a5419cfc711b2343c17a6abf4b2bafabb06957f73ffffffffffffffffffffffffffffffffffffffff1663a9c70eaa846040518263ffffffff1660e01b81526004016101ba91906105b9565b602060405180830381600087803b1580156101d457600080fd5b505af11580156101e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020c91906103dd565b610213565b815b905092915050565b6000670de0b6b3a764000061024d61023385856102ed565b6002670de0b6b3a7640000610248919061066f565b61035a565b610257919061066f565b905092915050565b600082146102e957738a5419cfc711b2343c17a6abf4b2bafabb06957f73ffffffffffffffffffffffffffffffffffffffff166361e3c94483836040518363ffffffff1660e01b81526004016102b69291906105d4565b600060405180830381600087803b1580156102d057600080fd5b505af11580156102e4573d6000803e3d6000fd5b505050505b5050565b60008082148061031557508282838561030691906106a0565b925082610313919061066f565b145b610354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034b90610579565b60405180910390fd5b92915050565b60008282846103699190610619565b91508110156103ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a490610599565b60405180910390fd5b92915050565b6000813590506103c2816107a6565b92915050565b6000815190506103d7816107a6565b92915050565b6000602082840312156103ef57600080fd5b60006103fd848285016103c8565b91505092915050565b60008060008060008060c0878903121561041f57600080fd5b600061042d89828a016103b3565b965050602061043e89828a016103b3565b955050604061044f89828a016103b3565b945050606061046089828a016103b3565b935050608061047189828a016103b3565b92505060a061048289828a016103b3565b9150509295509295509295565b600061049a826105fd565b6104a48185610608565b93506104b4818560208601610704565b6104bd81610795565b840191505092915050565b60006104d5601483610608565b91507f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000610515601483610608565b91507f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006000830152602082019050919050565b610551816106fa565b82525050565b60006020820190508181036000830152610571818461048f565b905092915050565b60006020820190508181036000830152610592816104c8565b9050919050565b600060208201905081810360008301526105b281610508565b9050919050565b60006020820190506105ce6000830184610548565b92915050565b60006040820190506105e96000830185610548565b6105f66020830184610548565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000610624826106fa565b915061062f836106fa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561066457610663610737565b5b828201905092915050565b600061067a826106fa565b9150610685836106fa565b92508261069557610694610766565b5b828204905092915050565b60006106ab826106fa565b91506106b6836106fa565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156106ef576106ee610737565b5b828202905092915050565b6000819050919050565b60005b83811015610722578082015181840152602081019050610707565b83811115610731576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b6107af816106fa565b81146107ba57600080fd5b5056fea2646970667358221220957d3679646290ffea2d39bd7badbb77711b802c524f2e33fa693788eba1501564736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c806306fdde0314610039578063acd2fd9314610064578063eb15f78114610080575b600080fd5b34801561004557600080fd5b5061004e6100ac565b60405161005b9190610557565b60405180910390f35b61007e60048036038101906100799190610406565b6100e5565b005b34801561008c57600080fd5b50610095610132565b6040516100a39291906105d4565b60405180910390f35b6040518060400160405280601f81526020017f436f6e6e65637447656c61746f446562744272696467654665652d76312e300081525081565b6100ef8387610164565b955060006100fd878661021b565b905061011f8382888a6101109190610619565b61011a9190610619565b61025f565b610129828261025f565b50505050505050565b60008060017f000000000000000000000000000000000000000000000000000000000000000080925081935050509091565b600080831461021157738a5419cfc711b2343c17a6abf4b2bafabb06957f73ffffffffffffffffffffffffffffffffffffffff1663a9c70eaa846040518263ffffffff1660e01b81526004016101ba91906105b9565b602060405180830381600087803b1580156101d457600080fd5b505af11580156101e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020c91906103dd565b610213565b815b905092915050565b6000670de0b6b3a764000061024d61023385856102ed565b6002670de0b6b3a7640000610248919061066f565b61035a565b610257919061066f565b905092915050565b600082146102e957738a5419cfc711b2343c17a6abf4b2bafabb06957f73ffffffffffffffffffffffffffffffffffffffff166361e3c94483836040518363ffffffff1660e01b81526004016102b69291906105d4565b600060405180830381600087803b1580156102d057600080fd5b505af11580156102e4573d6000803e3d6000fd5b505050505b5050565b60008082148061031557508282838561030691906106a0565b925082610313919061066f565b145b610354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034b90610579565b60405180910390fd5b92915050565b60008282846103699190610619565b91508110156103ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a490610599565b60405180910390fd5b92915050565b6000813590506103c2816107a6565b92915050565b6000815190506103d7816107a6565b92915050565b6000602082840312156103ef57600080fd5b60006103fd848285016103c8565b91505092915050565b60008060008060008060c0878903121561041f57600080fd5b600061042d89828a016103b3565b965050602061043e89828a016103b3565b955050604061044f89828a016103b3565b945050606061046089828a016103b3565b935050608061047189828a016103b3565b92505060a061048289828a016103b3565b9150509295509295509295565b600061049a826105fd565b6104a48185610608565b93506104b4818560208601610704565b6104bd81610795565b840191505092915050565b60006104d5601483610608565b91507f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000610515601483610608565b91507f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006000830152602082019050919050565b610551816106fa565b82525050565b60006020820190508181036000830152610571818461048f565b905092915050565b60006020820190508181036000830152610592816104c8565b9050919050565b600060208201905081810360008301526105b281610508565b9050919050565b60006020820190506105ce6000830184610548565b92915050565b60006040820190506105e96000830185610548565b6105f66020830184610548565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000610624826106fa565b915061062f836106fa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561066457610663610737565b5b828201905092915050565b600061067a826106fa565b9150610685836106fa565b92508261069557610694610766565b5b828204905092915050565b60006106ab826106fa565b91506106b6836106fa565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156106ef576106ee610737565b5b828202905092915050565b6000819050919050565b60005b83811015610722578082015181840152602081019050610707565b83811115610731576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b6107af816106fa565b81146107ba57600080fd5b5056fea2646970667358221220957d3679646290ffea2d39bd7badbb77711b802c524f2e33fa693788eba1501564736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateFee(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "payable to be compatible in conjunction with DSA.cast payable target",
        "params": {
          "_debt": "the amount of debt at the beginning",
          "_getId": "the amount storing Id in instaMemory.",
          "_instaFeeFactor": "instadapp fee.",
          "_setId": "id to store total amount (e.g. debt or col to draw)",
          "_setIdInstaFee": "id to store instaFee",
          "_txFee": "fast transaction fee of Gelato."
        }
      },
      "connectorID()": {
        "details": "Connector Details"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateFee(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Function to compute Fee and borrow amount"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
