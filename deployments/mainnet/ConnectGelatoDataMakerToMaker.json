{
  "address": "0xCA1d48683809980a8d9afF4815155dd71b01d584",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "__id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_oracleAggregator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__instaFeeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__connectGelatoDebtBridgeFee",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OK",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connectGelatoDataFromMakerAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connectorID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultAId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vaultBId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_colType",
          "type": "string"
        }
      ],
      "name": "getDataAndCastMakerToMaker",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instaFeeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_dsa",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        },
        {
          "internalType": "enum DataFlow",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "termsOk",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb31531da880849fabacb81825525ccb6559ca5495695d53ceacdd03849960617",
  "receipt": {
    "to": null,
    "from": "0xF953c3d475dc0a9877329F71e2CE3d2519a519A2",
    "contractAddress": "0xCA1d48683809980a8d9afF4815155dd71b01d584",
    "transactionIndex": 187,
    "gasUsed": "4009981",
    "logsBloom": "0x
    "blockHash": "0xa8e85647ec1c2557e373d001f6cba55644cb5b6cb5088943645363ac6469f3dd",
    "transactionHash": "0xb31531da880849fabacb81825525ccb6559ca5495695d53ceacdd03849960617",
    "logs": [],
    "blockNumber": 11729663,
    "cumulativeGasUsed": "11138349",
    "status": 1,
    "byzantium": true
  },
  "args": [
    81,
    "0x64f31D46C52bBDe223D863B11dAb9327aB1414E9",
    "0x0c159985E905ea1A3dA7305D70583Dd618862cf4",
    "0x9B6eeB49390626Dec7B3785D38879746923B308E"
  ],
  "solcInputHash": "06ff1a108d21b21e4ca3839d365cb0b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracleAggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__instaFeeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__connectGelatoDebtBridgeFee\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OK\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectGelatoDataFromMakerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultAId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vaultBId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_colType\",\"type\":\"string\"}],\"name\":\"getDataAndCastMakerToMaker\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dsa\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"enum DataFlow\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"termsOk\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"connectorID()\":{\"details\":\"Connector Details\"},\"getDataAndCastMakerToMaker(uint256,uint256,string)\":{\"details\":\"payable to be compatible in conjunction with DSA.cast payable target\",\"params\":{\"_colType\":\"colType of the new vault. example : ETH-B, ETH-A.\",\"_vaultAId\":\"Id of the unsafe vault of the client of Vault A Collateral.\",\"_vaultBId\":\"Id of the vault B Collateral of the client.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getDataAndCastMakerToMaker(uint256,uint256,string)\":{\"notice\":\"Entry Point for DSA.cast DebtBridge from e.g ETH-A to ETH-B\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/Instadapp/connectors/debt_bridge/from_maker/ConnectGelatoDataMakerToMaker.sol\":\"ConnectGelatoDataMakerToMaker\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/core/contracts/gelato_conditions/IGelatoCondition.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n\\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\\n    /// @dev Be careful only to encode a Task's condition.data as is and not with the\\n    ///  \\\"ok\\\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\\n    ///  source of Task identification.\\n    /// @param _conditionData This is the Condition.data field developers must encode their\\n    ///  Condition's specific parameters in.\\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\\n    function ok(uint256 _taskReceiptId, bytes calldata _conditionData, uint256 _cycleId)\\n        external\\n        view\\n        returns(string memory);\\n}\",\"keccak256\":\"0xd07607af93227ec5f8c2f5401289937b98c298f0d2398c1ba7410f82a6253964\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {IGelatoProviderModule} from \\\"../../gelato_provider_modules/IGelatoProviderModule.sol\\\";\\nimport {IGelatoCondition} from \\\"../../gelato_conditions/IGelatoCondition.sol\\\";\\n\\nstruct Provider {\\n    address addr;  //  if msg.sender == provider => self-Provider\\n    IGelatoProviderModule module;  //  can be IGelatoProviderModule(0) for self-Providers\\n}\\n\\nstruct Condition {\\n    IGelatoCondition inst;  // can be AddressZero for self-conditional Actions\\n    bytes data;  // can be bytes32(0) for self-conditional Actions\\n}\\n\\nenum Operation { Call, Delegatecall }\\n\\nenum DataFlow { None, In, Out, InAndOut }\\n\\nstruct Action {\\n    address addr;\\n    bytes data;\\n    Operation operation;\\n    DataFlow dataFlow;\\n    uint256 value;\\n    bool termsOkCheck;\\n}\\n\\nstruct Task {\\n    Condition[] conditions;  // optional\\n    Action[] actions;\\n    uint256 selfProviderGasLimit;  // optional: 0 defaults to gelatoMaxGas\\n    uint256 selfProviderGasPriceCeil;  // optional: 0 defaults to NO_CEIL\\n}\\n\\nstruct TaskReceipt {\\n    uint256 id;\\n    address userProxy;\\n    Provider provider;\\n    uint256 index;\\n    Task[] tasks;\\n    uint256 expiryDate;\\n    uint256 cycleId;  // auto-filled by GelatoCore. 0 for non-cyclic/chained tasks\\n    uint256 submissionsLeft;\\n}\\n\\ninterface IGelatoCore {\\n    event LogTaskSubmitted(\\n        uint256 indexed taskReceiptId,\\n        bytes32 indexed taskReceiptHash,\\n        TaskReceipt taskReceipt\\n    );\\n\\n    event LogExecSuccess(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorSuccessFee,\\n        uint256 sysAdminSuccessFee\\n    );\\n    event LogCanExecFailed(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        string reason\\n    );\\n    event LogExecReverted(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorRefund,\\n        string reason\\n    );\\n\\n    event LogTaskCancelled(uint256 indexed taskReceiptId, address indexed cancellor);\\n\\n    /// @notice API to query whether Task can be submitted successfully.\\n    /// @dev In submitTask the msg.sender must be the same as _userProxy here.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _userProxy The userProxy from which the task will be submitted.\\n    /// @param _task Selected provider, conditions, actions, expiry date of the task\\n    function canSubmitTask(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice API to submit a single Task.\\n    /// @dev You can let users submit multiple tasks at once by batching calls to this.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task A Gelato Task object: provider, conditions, actions.\\n    /// @param _expiryDate From then on the task cannot be executed. 0 for infinity.\\n    function submitTask(\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _cycles How many full cycles will be submitted\\n    function submitTaskCycle(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _cycles\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @dev CAUTION: _sumOfRequestedTaskSubmits does not mean the number of cycles.\\n    /// @dev If _sumOfRequestedTaskSubmits = 1 && _tasks.length = 2, only the first task\\n    ///  would be submitted, but not the second\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _sumOfRequestedTaskSubmits The TOTAL number of Task auto-submits\\n    ///  that should have occured once the cycle is complete:\\n    ///  _sumOfRequestedTaskSubmits = 0 => One Task will resubmit the next Task infinitly\\n    ///  _sumOfRequestedTaskSubmits = 1 => One Task will resubmit no other task\\n    ///  _sumOfRequestedTaskSubmits = 2 => One Task will resubmit 1 other task\\n    ///  ...\\n    function submitTaskChain(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _sumOfRequestedTaskSubmits\\n    )\\n        external;\\n\\n    // ================  Exec Suite =========================\\n    /// @notice Off-chain API for executors to check, if a TaskReceipt is executable\\n    /// @dev GelatoCore checks this during execution, in order to safeguard the Conditions\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @param _gasLimit Task.selfProviderGasLimit is used for SelfProviders. All other\\n    ///  Providers must use gelatoMaxGas. If the _gasLimit is used by an Executor and the\\n    ///  tx reverts, a refund is paid by the Provider and the TaskReceipt is annulated.\\n    /// @param _execTxGasPrice Must be used by Executors. Gas Price fed by gelatoCore's\\n    ///  Gas Price Oracle. Executors can query the current gelatoGasPrice from events.\\n    function canExec(TaskReceipt calldata _TR, uint256 _gasLimit, uint256 _execTxGasPrice)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Executors call this when Conditions allow it to execute submitted Tasks.\\n    /// @dev Executors get rewarded for successful Execution. The Task remains open until\\n    ///   successfully executed, or when the execution failed, despite of gelatoMaxGas usage.\\n    ///   In the latter case Executors are refunded by the Task Provider.\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function exec(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel task\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function cancelTask(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel multiple tasks at once\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _taskReceipts TaskReceipts: id, userProxy, Task.\\n    function multiCancelTasks(TaskReceipt[] calldata _taskReceipts) external;\\n\\n    /// @notice Compute hash of task receipt\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @return hash of taskReceipt\\n    function hashTaskReceipt(TaskReceipt calldata _TR) external pure returns(bytes32);\\n\\n    // ================  Getters =========================\\n    /// @notice Returns the taskReceiptId of the last TaskReceipt submitted\\n    /// @return currentId currentId, last TaskReceiptId submitted\\n    function currentTaskReceiptId() external view returns(uint256);\\n\\n    /// @notice Returns computed taskReceipt hash, used to check for taskReceipt validity\\n    /// @param _taskReceiptId Id of taskReceipt emitted in submission event\\n    /// @return hash of taskReceipt\\n    function taskReceiptHash(uint256 _taskReceiptId) external view returns(bytes32);\\n}\\n\",\"keccak256\":\"0x890ea139bf550691f2b9e65bca4f7c0bcf2eb9b8a4564db8c5b42d2912f8adec\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_provider_modules/IGelatoProviderModule.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {Action, Task} from \\\"../gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\ninterface IGelatoProviderModule {\\n\\n    /// @notice Check if provider agrees to pay for inputted task receipt\\n    /// @dev Enables arbitrary checks by provider\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @return \\\"OK\\\" if provider agrees\\n    function isProvided(address _userProxy, address _provider, Task calldata _task)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Convert action specific payload into proxy specific payload\\n    /// @dev Encoded multiple actions into a multisend\\n    /// @param _taskReceiptId Unique ID of Gelato Task to be executed.\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @param _cycleId For Tasks that form part of a cycle/chain.\\n    /// @return Encoded payload that will be used for low-level .call on user proxy\\n    /// @return checkReturndata if true, fwd returndata from userProxy.call to ProviderModule\\n    function execPayload(\\n        uint256 _taskReceiptId,\\n        address _userProxy,\\n        address _provider,\\n        Task calldata _task,\\n        uint256 _cycleId\\n    )\\n        external\\n        view\\n        returns(bytes memory, bool checkReturndata);\\n\\n    /// @notice Called by GelatoCore.exec to verifiy that no revert happend on userProxy\\n    /// @dev If a caught revert is detected, this fn should revert with the detected error\\n    /// @param _proxyReturndata Data from GelatoCore._exec.userProxy.call(execPayload)\\n    function execRevertCheck(bytes calldata _proxyReturndata) external pure;\\n}\\n\",\"keccak256\":\"0x8d08ceddbc4e686d070e916d2bcffc69c5a640b56866bc2cef0256b564eb14dc\",\"license\":\"UNLICENSED\"},\"contracts/constants/CAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// Aave Lending Pool Addresses Provider\\naddress constant LENDING_POOL_ADDRESSES_PROVIDER = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;\\naddress constant CHAINLINK_ETH_FEED = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\\naddress constant AAVE_PROTOCOL_DATA_PROVIDER = 0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d;\\n\",\"keccak256\":\"0x3e724d5ba5806a1feebd6ffed223db3b5e24abcb1c7e15aa4d74dd3752c20495\",\"license\":\"UNLICENSED\"},\"contracts/constants/CCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\naddress constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\\n\",\"keccak256\":\"0x7894ca47cf772ae6f312893382269e76775ea92787fba1eddd53e73a1104155e\",\"license\":\"UNLICENSED\"},\"contracts/constants/CDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nenum PROTOCOL {AAVE, MAKER, COMPOUND, NONE}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2519000), 3140500, 3971000, 4345000];\\n}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2028307), 2626711, 2944065, 3698800];\\n}\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE()\\n    pure\\n    returns (uint256[4] memory)\\n{\\n    return [uint256(2358534), 2956937, 3381960, 4029400];\\n}\\n\\nuint256 constant FAST_TX_FEE = 30;\\nuint256 constant VAULT_CREATION_COST = 200000;\\nuint256 constant MAX_INSTA_FEE = 3e15;\\n\",\"keccak256\":\"0x5cb259ff9d661ebd3beb9d56e49ffb7dd5ff6a4c358c8acd913da52f5b99124b\",\"license\":\"UNLICENSED\"},\"contracts/constants/CGelato.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IGelatoGasPriceOracle\\n} from \\\"../interfaces/gelato/IGelatoGasPriceOracle.sol\\\";\\n\\nIGelatoGasPriceOracle constant GELATO_GAS_PRICE_ORACLE = IGelatoGasPriceOracle(\\n    0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C\\n);\\n\\naddress constant GELATO_EXECUTOR_MODULE = 0x98edc8067Cc671BCAE82D36dCC609C3E4e078AC8;\\n\",\"keccak256\":\"0xd701225d80680199dbc5b86bcf953151895629f8e05bd49954c8fd7eb6613873\",\"license\":\"UNLICENSED\"},\"contracts/constants/CInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// InstaDapp\\naddress constant INSTA_MEMORY = 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F;\\n\\n// Connectors\\naddress constant CONNECT_MAKER = 0xac02030d8a8F49eD04b2f52C394D3F901A10F8A9;\\naddress constant CONNECT_COMPOUND = 0x15FdD1e902cAC70786fe7D31013B1a806764B5a2;\\naddress constant INSTA_POOL_V2 = 0xeB4bf86589f808f90EEC8e964dBF16Bd4D284905;\\naddress constant CONNECT_AAVE_V2 = 0xBF6E4331ffd02F7043e62788FD272aeFc712f5ee;\\naddress constant CONNECT_DYDX = 0x6AF6C791c869DfA65f8A2fa042fA47D1535Bef25;\\naddress constant CONNECT_BASIC = 0xe5398f279175962E56fE4c5E0b62dc7208EF36c6;\\naddress constant CONNECT_FEE = 0xB99152F8073033B318C1Bfbfaaa582029e982CE9;\\n\\n// Insta Pool\\naddress constant INSTA_POOL_RESOLVER = 0xa004a5afBa04b74037E9E52bA1f7eb02b5E61509;\\nuint256 constant ROUTE_1_TOLERANCE = 1005e15;\\n\\n// Insta Mapping\\naddress constant INSTA_MAPPING = 0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88;\\n\\naddress constant INSTA_MAKER_RESOLVER = 0x0A7008B38E7015F8C36A49eEbc32513ECA8801E5;\\n\",\"keccak256\":\"0x0a6f769e4d928a6286024c823696c481fbeb75c85bd8648b450a18ff3fc0451d\",\"license\":\"UNLICENSED\"},\"contracts/constants/CMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\naddress constant MCD_MANAGER = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\\naddress constant JUG = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\\n\",\"keccak256\":\"0xba2dab3a9cd1c7edd900705917de16d2c9c85edc35c03a2e3535570814ecb067\",\"license\":\"UNLICENSED\"},\"contracts/constants/CTokens.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// ETH\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\naddress constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n// USD\\naddress constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\",\"keccak256\":\"0x737e5e061f0a86bb43c375e78caada7211726ed0786151e719d503e6b9b60d59\",\"license\":\"UNLICENSED\"},\"contracts/contracts/Instadapp/connectors/base/BDebtBridgeFromMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {GelatoBytes} from \\\"../../../../lib/GelatoBytes.sol\\\";\\nimport {\\n    DataFlow\\n} from \\\"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\\\";\\nimport {\\n    _isVaultOwner,\\n    _getMakerVaultDebt\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\nimport {\\n    AccountInterface,\\n    ConnectorInterface\\n} from \\\"../../../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\n\\nabstract contract BDebtBridgeFromMaker is ConnectorInterface {\\n    using GelatoBytes for bytes;\\n\\n    string public constant OK = \\\"OK\\\";\\n    uint256 internal immutable _id;\\n    address public immutable oracleAggregator;\\n    address public immutable instaFeeCollector;\\n    address public immutable connectGelatoDataFromMakerAddr;\\n    address internal immutable _connectGelatoDebtBridgeFee;\\n\\n    constructor(\\n        uint256 __id,\\n        address _oracleAggregator,\\n        address __instaFeeCollector,\\n        address __connectGelatoDebtBridgeFee\\n    ) {\\n        _id = __id;\\n        oracleAggregator = _oracleAggregator;\\n        instaFeeCollector = __instaFeeCollector;\\n        _connectGelatoDebtBridgeFee = __connectGelatoDebtBridgeFee;\\n        connectGelatoDataFromMakerAddr = address(this);\\n    }\\n\\n    /// @dev Connector Details\\n    function connectorID()\\n        external\\n        view\\n        override\\n        returns (uint256 _type, uint256 id)\\n    {\\n        (_type, id) = (1, _id); // Should put specific value.\\n    }\\n\\n    // ====== ACTION TERMS CHECK ==========\\n    // Overriding IGelatoAction's function (optional)\\n    function termsOk(\\n        uint256, // taskReceipId\\n        address _dsa,\\n        bytes calldata _actionData,\\n        DataFlow,\\n        uint256, // value\\n        uint256 // cycleId\\n    ) public view returns (string memory) {\\n        uint256 vaultId = abi.decode(_actionData[4:36], (uint256));\\n\\n        if (vaultId == 0)\\n            return\\n                string(\\n                    abi.encodePacked(this.name(), \\\": Vault Id is not valid\\\")\\n                );\\n        if (!_isVaultOwner(vaultId, _dsa))\\n            return\\n                string(\\n                    abi.encodePacked(this.name(), \\\": Vault not owned by dsa\\\")\\n                );\\n        return OK;\\n    }\\n\\n    function _cast(address[] memory targets, bytes[] memory datas) internal {\\n        // Instapool V2 / FlashLoan call\\n        bytes memory castData =\\n            abi.encodeWithSelector(\\n                AccountInterface.cast.selector,\\n                targets,\\n                datas,\\n                msg.sender // msg.sender == GelatoCore\\n            );\\n\\n        (bool success, bytes memory returndata) =\\n            address(this).delegatecall(castData);\\n        if (!success) {\\n            returndata.revertWithError(\\n                string(\\n                    abi.encodePacked(\\n                        ConnectorInterface(connectGelatoDataFromMakerAddr)\\n                            .name(),\\n                        \\\"._cast:\\\"\\n                    )\\n                )\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfb5e77de8cf92667fc52c1253c8cf1a4b7441a1df81a12695a77bc16d9ad7b08\",\"license\":\"UNLICENSED\"},\"contracts/contracts/Instadapp/connectors/debt_bridge/from_maker/ConnectGelatoDataMakerToMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IConnectInstaPoolV2\\n} from \\\"../../../../../interfaces/InstaDapp/connectors/IConnectInstaPoolV2.sol\\\";\\nimport {DAI, ETH} from \\\"../../../../../constants/CTokens.sol\\\";\\nimport {\\n    CONNECT_MAKER,\\n    INSTA_POOL_V2,\\n    CONNECT_BASIC,\\n    CONNECT_FEE\\n} from \\\"../../../../../constants/CInstaDapp.sol\\\";\\nimport {\\n    _getMakerVaultDebt,\\n    _getMakerVaultCollateralBalance,\\n    _isVaultOwner\\n} from \\\"../../../../../functions/dapps/FMaker.sol\\\";\\nimport {\\n    _encodeFlashPayback\\n} from \\\"../../../../../functions/InstaDapp/connectors/FInstaPoolV2.sol\\\";\\nimport {\\n    _encodePaybackMakerVault,\\n    _encodedWithdrawMakerVault,\\n    _encodeOpenMakerVault,\\n    _encodedDepositMakerVault,\\n    _encodeBorrowMakerVault\\n} from \\\"../../../../../functions/InstaDapp/connectors/FConnectMaker.sol\\\";\\nimport {\\n    _encodeBasicWithdraw\\n} from \\\"../../../../../functions/InstaDapp/connectors/FConnectBasic.sol\\\";\\nimport {\\n    _encodeCalculateFee\\n} from \\\"../../../../../functions/InstaDapp/connectors/FConnectDebtBridgeFee.sol\\\";\\nimport {\\n    _getGelatoExecutorFees\\n} from \\\"../../../../../functions/gelato/FGelato.sol\\\";\\nimport {\\n    _getFlashLoanRoute,\\n    _getGasCostMakerToMaker,\\n    _getRealisedDebt\\n} from \\\"../../../../../functions/gelato/FGelatoDebtBridge.sol\\\";\\nimport {\\n    IInstaFeeCollector\\n} from \\\"../../../../../interfaces/InstaDapp/IInstaFeeCollector.sol\\\";\\nimport {BDebtBridgeFromMaker} from \\\"../../base/BDebtBridgeFromMaker.sol\\\";\\nimport {\\n    IOracleAggregator\\n} from \\\"../../../../../interfaces/gelato/IOracleAggregator.sol\\\";\\nimport {_convertTo18} from \\\"../../../../../vendor/Convert.sol\\\";\\nimport {GELATO_EXECUTOR_MODULE} from \\\"../../../../../constants/CGelato.sol\\\";\\n\\ncontract ConnectGelatoDataMakerToMaker is BDebtBridgeFromMaker {\\n    // solhint-disable const-name-snakecase\\n    string public constant override name = \\\"ConnectGelatoDataMakerToMaker-v3.0\\\";\\n\\n    // solhint-disable no-empty-blocks\\n    constructor(\\n        uint256 __id,\\n        address _oracleAggregator,\\n        address __instaFeeCollector,\\n        address __connectGelatoDebtBridgeFee\\n    )\\n        BDebtBridgeFromMaker(\\n            __id,\\n            _oracleAggregator,\\n            __instaFeeCollector,\\n            __connectGelatoDebtBridgeFee\\n        )\\n    {}\\n\\n    /// @notice Entry Point for DSA.cast DebtBridge from e.g ETH-A to ETH-B\\n    /// @dev payable to be compatible in conjunction with DSA.cast payable target\\n    /// @param _vaultAId Id of the unsafe vault of the client of Vault A Collateral.\\n    /// @param _vaultBId Id of the vault B Collateral of the client.\\n    /// @param _colType colType of the new vault. example : ETH-B, ETH-A.\\n    function getDataAndCastMakerToMaker(\\n        uint256 _vaultAId,\\n        uint256 _vaultBId,\\n        string calldata _colType\\n    ) external payable {\\n        (address[] memory targets, bytes[] memory datas) =\\n            _dataMakerToMaker(_vaultAId, _vaultBId, _colType);\\n\\n        _cast(targets, datas);\\n    }\\n\\n    /* solhint-disable function-max-lines */\\n\\n    function _dataMakerToMaker(\\n        uint256 _vaultAId,\\n        uint256 _vaultBId,\\n        string calldata _colType\\n    ) internal view returns (address[] memory targets, bytes[] memory datas) {\\n        targets = new address[](1);\\n        targets[0] = INSTA_POOL_V2;\\n\\n        _vaultBId = _isVaultOwner(_vaultBId, address(this)) ? _vaultBId : 0;\\n\\n        uint256 daiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_vaultAId));\\n        uint256 wColToWithdrawFromMaker =\\n            _getMakerVaultCollateralBalance(_vaultAId);\\n\\n        uint256 route = _getFlashLoanRoute(DAI, daiToBorrow);\\n\\n        (uint256 gasFeesPaidFromDebt, uint256 decimals) =\\n            IOracleAggregator(oracleAggregator).getExpectedReturnAmount(\\n                _getGelatoExecutorFees(\\n                    _getGasCostMakerToMaker(_vaultBId == 0, route)\\n                ),\\n                ETH,\\n                DAI\\n            );\\n\\n        gasFeesPaidFromDebt = _convertTo18(decimals, gasFeesPaidFromDebt);\\n\\n        (address[] memory _targets, bytes[] memory _datas) =\\n            _vaultBId == 0\\n                ? _spellsMakerToNewMakerVault(\\n                    _vaultAId,\\n                    _colType,\\n                    daiToBorrow,\\n                    wColToWithdrawFromMaker,\\n                    gasFeesPaidFromDebt\\n                )\\n                : _spellsMakerToMaker(\\n                    _vaultAId,\\n                    _vaultBId,\\n                    daiToBorrow,\\n                    wColToWithdrawFromMaker,\\n                    gasFeesPaidFromDebt\\n                );\\n\\n        datas = new bytes[](1);\\n        datas[0] = abi.encodeWithSelector(\\n            IConnectInstaPoolV2.flashBorrowAndCast.selector,\\n            DAI,\\n            daiToBorrow,\\n            route,\\n            abi.encode(_targets, _datas)\\n        );\\n    }\\n\\n    function _spellsMakerToNewMakerVault(\\n        uint256 _vaultAId,\\n        string calldata _colType,\\n        uint256 _daiDebtAmt,\\n        uint256 _colToWithdrawFromMaker,\\n        uint256 _gasFeesPaidFromDebt\\n    ) internal view returns (address[] memory targets, bytes[] memory datas) {\\n        targets = new address[](9);\\n        targets[0] = CONNECT_MAKER; // payback\\n        targets[1] = CONNECT_MAKER; // withdraw\\n        targets[2] = _connectGelatoDebtBridgeFee; // calculate fee\\n        targets[3] = CONNECT_MAKER; // open new B vault\\n        targets[4] = CONNECT_MAKER; // deposit\\n        targets[5] = CONNECT_MAKER; // borrow\\n        targets[6] = CONNECT_BASIC; // user pay fee to fee collector\\n        targets[7] = CONNECT_BASIC; // user pay fast transaction fee to executor\\n        targets[8] = INSTA_POOL_V2; // flashPayback\\n\\n        datas = new bytes[](9);\\n        datas[0] = _encodePaybackMakerVault(\\n            _vaultAId,\\n            type(uint256).max,\\n            0,\\n            600\\n        );\\n        datas[1] = _encodedWithdrawMakerVault(\\n            _vaultAId,\\n            type(uint256).max,\\n            0,\\n            0\\n        );\\n        datas[2] = _encodeCalculateFee(\\n            0,\\n            _gasFeesPaidFromDebt,\\n            IInstaFeeCollector(instaFeeCollector).fee(),\\n            600,\\n            600,\\n            601\\n        );\\n        datas[3] = _encodeOpenMakerVault(_colType);\\n        datas[4] = _encodedDepositMakerVault(0, _colToWithdrawFromMaker, 0, 0);\\n        datas[5] = _encodeBorrowMakerVault(0, 0, 600, 0);\\n        datas[6] = _encodeBasicWithdraw(\\n            DAI,\\n            0,\\n            IInstaFeeCollector(instaFeeCollector).feeCollector(),\\n            601,\\n            0\\n        );\\n        datas[7] = _encodeBasicWithdraw(\\n            DAI,\\n            _gasFeesPaidFromDebt,\\n            payable(GELATO_EXECUTOR_MODULE),\\n            0,\\n            0\\n        );\\n        datas[8] = _encodeFlashPayback(DAI, _daiDebtAmt, 0, 0);\\n    }\\n\\n    function _spellsMakerToMaker(\\n        uint256 _vaultAId,\\n        uint256 _vaultBId,\\n        uint256 _daiDebtAmt,\\n        uint256 _colToWithdrawFromMaker,\\n        uint256 _gasFeesPaidFromDebt\\n    ) internal view returns (address[] memory targets, bytes[] memory datas) {\\n        targets = new address[](8);\\n        targets[0] = CONNECT_MAKER; // payback\\n        targets[1] = CONNECT_MAKER; // withdraw\\n        targets[2] = _connectGelatoDebtBridgeFee; // calculate fee\\n        targets[3] = CONNECT_MAKER; // deposit\\n        targets[4] = CONNECT_MAKER; // borrow\\n        targets[5] = CONNECT_BASIC; // pay fee to instadapp fee collector\\n        targets[6] = CONNECT_BASIC; // pay fast transaction fee to gelato executor\\n        targets[7] = INSTA_POOL_V2; // flashPayback\\n\\n        datas = new bytes[](8);\\n        datas[0] = _encodePaybackMakerVault(\\n            _vaultAId,\\n            type(uint256).max,\\n            0,\\n            600\\n        );\\n        datas[1] = _encodedWithdrawMakerVault(\\n            _vaultAId,\\n            type(uint256).max,\\n            0,\\n            0\\n        );\\n        datas[2] = _encodeCalculateFee(\\n            0,\\n            _gasFeesPaidFromDebt,\\n            IInstaFeeCollector(instaFeeCollector).fee(),\\n            600,\\n            600,\\n            601\\n        );\\n        datas[3] = _encodedDepositMakerVault(\\n            _vaultBId,\\n            _colToWithdrawFromMaker,\\n            0,\\n            0\\n        );\\n        datas[4] = _encodeBorrowMakerVault(_vaultBId, 0, 600, 0);\\n        datas[5] = _encodeBasicWithdraw(\\n            DAI,\\n            0,\\n            IInstaFeeCollector(instaFeeCollector).feeCollector(),\\n            601,\\n            0\\n        );\\n        datas[6] = _encodeBasicWithdraw(\\n            DAI,\\n            _gasFeesPaidFromDebt,\\n            payable(GELATO_EXECUTOR_MODULE),\\n            0,\\n            0\\n        );\\n        datas[7] = _encodeFlashPayback(DAI, _daiDebtAmt, 0, 0);\\n    }\\n\\n    /* solhint-enable function-max-lines */\\n}\\n\",\"keccak256\":\"0x7aa8ddc5c5e31588832caa3e239b2a8a2655138531187b46a553a3b73e278e01\",\"license\":\"UNLICENSED\"},\"contracts/functions/InstaDapp/connectors/FConnectBasic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IConnectBasic\\n} from \\\"../../../interfaces/InstaDapp/connectors/IConnectBasic.sol\\\";\\n\\nfunction _encodeBasicWithdraw(\\n    address _erc20,\\n    uint256 _tokenAmt,\\n    address payable _to,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectBasic.withdraw.selector,\\n            _erc20,\\n            _tokenAmt,\\n            _to,\\n            _getId,\\n            _setId\\n        );\\n}\\n\",\"keccak256\":\"0x6950c59a31a802d52f39a0b243fc9f626f37b091c3c2b449ee2e10c561e27aa8\",\"license\":\"UNLICENSED\"},\"contracts/functions/InstaDapp/connectors/FConnectDebtBridgeFee.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IConnectDebtBridgeFee\\n} from \\\"../../../interfaces/InstaDapp/connectors/IConnectDebtBridgeFee.sol\\\";\\n\\nfunction _encodeCalculateFee(\\n    uint256 _amount,\\n    uint256 _ftf,\\n    uint256 _fee,\\n    uint256 _getId,\\n    uint256 _setId,\\n    uint256 _setIdFee\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectDebtBridgeFee.calculateFee.selector,\\n            _amount,\\n            _ftf,\\n            _fee,\\n            _getId,\\n            _setId,\\n            _setIdFee\\n        );\\n}\\n\",\"keccak256\":\"0x145f1a4b37d13161488750817919f24ad0678794d16eeef0f3464ddc746d6f0e\",\"license\":\"UNLICENSED\"},\"contracts/functions/InstaDapp/connectors/FConnectMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IConnectMaker\\n} from \\\"../../../interfaces/InstaDapp/connectors/IConnectMaker.sol\\\";\\n\\nfunction _encodeOpenMakerVault(string memory _colType)\\n    pure\\n    returns (bytes memory)\\n{\\n    return abi.encodeWithSelector(IConnectMaker.open.selector, _colType);\\n}\\n\\nfunction _encodeBorrowMakerVault(\\n    uint256 _vaultId,\\n    uint256 _amt,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectMaker.borrow.selector,\\n            _vaultId,\\n            _amt,\\n            _getId,\\n            _setId\\n        );\\n}\\n\\nfunction _encodedDepositMakerVault(\\n    uint256 _vaultId,\\n    uint256 _amt,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectMaker.deposit.selector,\\n            _vaultId,\\n            _amt,\\n            _getId,\\n            _setId\\n        );\\n}\\n\\nfunction _encodePaybackMakerVault(\\n    uint256 _vaultId,\\n    uint256 _amt,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectMaker.payback.selector,\\n            _vaultId,\\n            _amt,\\n            _getId,\\n            _setId\\n        );\\n}\\n\\nfunction _encodedWithdrawMakerVault(\\n    uint256 _vaultId,\\n    uint256 _amt,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectMaker.withdraw.selector,\\n            _vaultId,\\n            _amt,\\n            _getId,\\n            _setId\\n        );\\n}\\n\",\"keccak256\":\"0x43c0f2196539f848c57f3abfeb55dd2a7f25c6348ac63b6730cbdbb58230cd76\",\"license\":\"UNLICENSED\"},\"contracts/functions/InstaDapp/connectors/FInstaPoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IConnectInstaPoolV2\\n} from \\\"../../../interfaces/InstaDapp/connectors/IConnectInstaPoolV2.sol\\\";\\n\\nfunction _encodeFlashPayback(\\n    address _token,\\n    uint256 _amt,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectInstaPoolV2.flashPayback.selector,\\n            _token,\\n            _amt,\\n            _getId,\\n            _setId\\n        );\\n}\\n\",\"keccak256\":\"0xc5f20940ac3ce5cc7eb5fed38d09eb701a940331d7eb1e9c83fcea05632c704b\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IAaveProtocolDataProvider\\n} from \\\"../../interfaces/dapps/Aave/IAaveProtocolDataProvider.sol\\\";\\nimport {\\n    ILendingPoolAddressesProvider\\n} from \\\"../../interfaces/dapps/Aave/ILendingPoolAddressesProvider.sol\\\";\\nimport {\\n    ChainLinkInterface\\n} from \\\"../../interfaces/dapps/Aave/ChainLinkInterface.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/dapps/Aave/ILendingPool.sol\\\";\\nimport {WETH, ETH} from \\\"../../constants/CTokens.sol\\\";\\nimport {AaveUserData} from \\\"../../structs/SAave.sol\\\";\\nimport {\\n    LENDING_POOL_ADDRESSES_PROVIDER,\\n    CHAINLINK_ETH_FEED,\\n    AAVE_PROTOCOL_DATA_PROVIDER\\n} from \\\"../../constants/CAave.sol\\\";\\nimport {ETH, WETH} from \\\"../../constants/CTokens.sol\\\";\\n\\nfunction _getEtherPrice() view returns (uint256 ethPrice) {\\n    ethPrice = uint256(ChainLinkInterface(CHAINLINK_ETH_FEED).latestAnswer());\\n}\\n\\nfunction _getUserData(address user)\\n    view\\n    returns (AaveUserData memory userData)\\n{\\n    (\\n        uint256 totalCollateralETH,\\n        uint256 totalDebtETH,\\n        uint256 availableBorrowsETH,\\n        uint256 currentLiquidationThreshold,\\n        uint256 ltv,\\n        uint256 healthFactor\\n    ) =\\n        ILendingPool(\\n            ILendingPoolAddressesProvider(LENDING_POOL_ADDRESSES_PROVIDER)\\n                .getLendingPool()\\n        )\\n            .getUserAccountData(user);\\n\\n    userData = AaveUserData(\\n        totalCollateralETH,\\n        totalDebtETH,\\n        availableBorrowsETH,\\n        currentLiquidationThreshold,\\n        ltv,\\n        healthFactor,\\n        _getEtherPrice()\\n    );\\n}\\n\\nfunction _getAssetLiquidationThreshold(address _token)\\n    view\\n    returns (uint256 liquidationThreshold)\\n{\\n    (, , liquidationThreshold, , , , , , , ) = IAaveProtocolDataProvider(\\n        AAVE_PROTOCOL_DATA_PROVIDER\\n    )\\n        .getReserveConfigurationData(_getTokenAddr(_token));\\n}\\n\\nfunction _getTokenAddr(address _token) pure returns (address) {\\n    return _token == ETH ? WETH : _token;\\n}\\n\",\"keccak256\":\"0xa20bfadadb13a66cc88e6b60f706bb66a44ceda97127a96f487978360cb47d24\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {CompData, AccountLiquidityLocalVars} from \\\"../../structs/SCompound.sol\\\";\\nimport {INSTA_MAPPING} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {COMPTROLLER} from \\\"../../constants/CCompound.sol\\\";\\nimport {InstaMapping} from \\\"../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {ICToken} from \\\"../../interfaces/dapps/Compound/ICToken.sol\\\";\\nimport {IComptroller} from \\\"../../interfaces/dapps/Compound/IComptroller.sol\\\";\\nimport {IPriceOracle} from \\\"../../interfaces/dapps/Compound/IPriceOracle.sol\\\";\\nimport {mul} from \\\"../../vendor/DSMath.sol\\\";\\n\\nfunction _getCToken(address _token) view returns (address) {\\n    return InstaMapping(INSTA_MAPPING).cTokenMapping(_token);\\n}\\n\\nfunction _wouldCompoundAccountBeLiquid(\\n    address _dsa,\\n    uint256 _colAmt,\\n    address _cTokenModify,\\n    uint256 _debtAmt\\n) view returns (bool) {\\n    AccountLiquidityLocalVars memory vars;\\n\\n    IComptroller comptroller = IComptroller(COMPTROLLER);\\n\\n    ICToken[] memory assets = comptroller.getAssetsIn(_dsa);\\n    for (uint256 i = 0; i < assets.length; i++) {\\n        ICToken asset = assets[i];\\n        // Read the balances and exchange rate from the cToken\\n        vars = _getAssetLiquidity(vars, _dsa, asset);\\n\\n        // Calculate effects of interacting with cTokenModify\\n        if (address(asset) == _cTokenModify) {\\n            vars.sumCollateral = mulScalarTruncateAddUInt(\\n                vars.tokensToDenom,\\n                _colAmt,\\n                vars.sumCollateral\\n            );\\n\\n            // borrow effect\\n            // sumBorrowPlusEffects += oraclePrice * debtAmt\\n            vars.sumBorrowPlusEffects = mulScalarTruncateAddUInt(\\n                vars.oraclePrice,\\n                _debtAmt,\\n                vars.sumBorrowPlusEffects\\n            );\\n        }\\n    }\\n\\n    if (assets.length == 0) {\\n        vars = _getAssetLiquidity(vars, _dsa, ICToken(_cTokenModify));\\n\\n        vars.sumCollateral = mulScalarTruncateAddUInt(\\n            vars.tokensToDenom,\\n            _colAmt,\\n            vars.sumCollateral\\n        );\\n\\n        vars.sumBorrowPlusEffects = mulScalarTruncateAddUInt(\\n            vars.oraclePrice,\\n            _debtAmt,\\n            vars.sumBorrowPlusEffects\\n        );\\n    }\\n\\n    return vars.sumCollateral > vars.sumBorrowPlusEffects;\\n}\\n\\nfunction _getAssetLiquidity(\\n    AccountLiquidityLocalVars memory vars,\\n    address _dsa,\\n    ICToken _asset\\n) view returns (AccountLiquidityLocalVars memory) {\\n    uint256 oErr;\\n    IComptroller comptroller = IComptroller(COMPTROLLER);\\n\\n    // Read the balances and exchange rate from the cToken\\n    (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRate) = ICToken(\\n        _asset\\n    )\\n        .getAccountSnapshot(_dsa);\\n    require(oErr == 0, \\\"_getAssetLiquidity: semi-opaque error code\\\");\\n    (, vars.collateralFactor, ) = (comptroller.markets(address(_asset)));\\n    vars.oraclePrice = IPriceOracle(IComptroller(COMPTROLLER).oracle())\\n        .getUnderlyingPrice(_asset);\\n    require(vars.oraclePrice != 0, \\\"\\\");\\n\\n    vars.tokensToDenom = mul_expScale(\\n        mul_expScale(vars.collateralFactor, vars.exchangeRate),\\n        vars.oraclePrice\\n    );\\n\\n    vars.sumCollateral = mulScalarTruncateAddUInt(\\n        vars.tokensToDenom,\\n        vars.cTokenBalance,\\n        vars.sumCollateral\\n    );\\n\\n    vars.sumBorrowPlusEffects = mulScalarTruncateAddUInt(\\n        vars.oraclePrice,\\n        vars.borrowBalance,\\n        vars.sumBorrowPlusEffects\\n    );\\n    return vars;\\n}\\n\\n// Compound Math Function\\n\\nfunction mulScalarTruncateAddUInt(\\n    uint256 _a,\\n    uint256 _b,\\n    uint256 _addend\\n) pure returns (uint256) {\\n    return mul_expScale(_a, _b) + _addend;\\n}\\n\\nfunction mul_expScale(uint256 _a, uint256 _b) pure returns (uint256) {\\n    return mul(_a, _b) / 1e18;\\n}\\n\\n// Compound Math Function\\n\",\"keccak256\":\"0xbc4c14090f162d4b6f7ce596cfb34825989b517c68b3e42fff8f52db083dea66\",\"license\":\"UNLICENSED\"},\"contracts/functions/dapps/FMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {MCD_MANAGER} from \\\"../../constants/CMaker.sol\\\";\\nimport {INSTA_MAPPING} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {\\n    ITokenJoinInterface\\n} from \\\"../../interfaces/dapps/Maker/ITokenJoinInterface.sol\\\";\\nimport {IMcdManager} from \\\"../../interfaces/dapps/Maker/IMcdManager.sol\\\";\\nimport {InstaMapping} from \\\"../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {IVat} from \\\"../../interfaces/dapps/Maker/IVat.sol\\\";\\nimport {RAY, add, sub, mul} from \\\"../../vendor/DSMath.sol\\\";\\nimport {_stringToBytes32, _convertTo18} from \\\"../../vendor/Convert.sol\\\";\\n\\nfunction _getMakerVaultDebt(uint256 _vaultId) view returns (uint256 wad) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, , , ) = vat.ilks(ilk);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n    uint256 dai = vat.dai(urn);\\n\\n    uint256 rad = sub(mul(art, rate), dai);\\n    wad = rad / RAY;\\n\\n    wad = mul(wad, RAY) < rad ? wad + 1 : wad;\\n}\\n\\nfunction _getMakerRawVaultDebt(uint256 _vaultId) view returns (uint256 tab) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, , , ) = vat.ilks(ilk);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n\\n    uint256 rad = mul(art, rate);\\n\\n    tab = rad / RAY;\\n    tab = mul(tab, RAY) < rad ? tab + 1 : tab;\\n}\\n\\nfunction _getMakerVaultCollateralBalance(uint256 _vaultId)\\n    view\\n    returns (uint256)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    IVat vat = IVat(manager.vat());\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    (uint256 ink, ) = vat.urns(ilk, urn);\\n\\n    return ink;\\n}\\n\\nfunction _vaultWillBeSafe(\\n    uint256 _vaultId,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    require(_vaultId != 0, \\\"_vaultWillBeSafe: invalid vault id.\\\");\\n\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n\\n    ITokenJoinInterface tokenJoinContract =\\n        ITokenJoinInterface(InstaMapping(INSTA_MAPPING).gemJoinMapping(ilk));\\n\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, uint256 spot, , ) = vat.ilks(ilk);\\n    (uint256 ink, uint256 art) = vat.urns(ilk, urn);\\n    uint256 dai = vat.dai(urn);\\n\\n    uint256 dink = _convertTo18(tokenJoinContract.dec(), _colAmt);\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n\\n    ink = add(ink, dink);\\n    art = add(art, dart);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab <= mul(ink, spot);\\n}\\n\\nfunction _newVaultWillBeSafe(\\n    string memory _colType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (, uint256 rate, uint256 spot, , ) = vat.ilks(ilk);\\n\\n    ITokenJoinInterface tokenJoinContract =\\n        ITokenJoinInterface(InstaMapping(INSTA_MAPPING).gemJoinMapping(ilk));\\n\\n    uint256 ink = _convertTo18(tokenJoinContract.dec(), _colAmt);\\n    uint256 art = _getDebtAmt(_daiDebtAmt, 0, rate);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab <= mul(ink, spot);\\n}\\n\\nfunction _debtCeilingIsReachedNewVault(\\n    string memory _colType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (uint256 Art, uint256 rate, , uint256 line, ) = vat.ilks(ilk);\\n    uint256 Line = vat.Line();\\n    uint256 debt = vat.debt();\\n\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, 0, rate);\\n    uint256 dtab = mul(rate, dart);\\n\\n    debt = add(debt, dtab);\\n    Art = add(Art, dart);\\n\\n    return mul(Art, rate) > line || debt > Line;\\n}\\n\\nfunction _debtCeilingIsReached(uint256 _vaultId, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n\\n    (uint256 Art, uint256 rate, , uint256 line, ) = vat.ilks(ilk);\\n    uint256 dai = vat.dai(urn);\\n    uint256 Line = vat.Line();\\n    uint256 debt = vat.debt();\\n\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n    uint256 dtab = mul(rate, dart);\\n\\n    debt = add(debt, dtab);\\n    Art = add(Art, dart);\\n\\n    return mul(Art, rate) > line || debt > Line;\\n}\\n\\nfunction _debtIsDustNewVault(string memory _colType, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (, uint256 rate, , , uint256 dust) = vat.ilks(ilk);\\n    uint256 art = _getDebtAmt(_daiDebtAmt, 0, rate);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab < dust;\\n}\\n\\nfunction _debtIsDust(uint256 _vaultId, uint256 _daiDebtAmt)\\n    view\\n    returns (bool)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n    (, uint256 rate, , , uint256 dust) = vat.ilks(ilk);\\n\\n    uint256 dai = vat.dai(urn);\\n    uint256 dart = _getDebtAmt(_daiDebtAmt, dai, rate);\\n    art = add(art, dart);\\n    uint256 tab = mul(rate, art);\\n\\n    return tab < dust;\\n}\\n\\nfunction _getVaultData(IMcdManager _manager, uint256 _vault)\\n    view\\n    returns (bytes32 ilk, address urn)\\n{\\n    ilk = _manager.ilks(_vault);\\n    urn = _manager.urns(_vault);\\n}\\n\\nfunction _getDebtAmt(\\n    uint256 _amt,\\n    uint256 _dai,\\n    uint256 _rate\\n) pure returns (uint256 dart) {\\n    dart = sub(mul(_amt, RAY), _dai) / _rate;\\n    dart = mul(dart, _rate) < mul(_amt, RAY) ? dart + 1 : dart;\\n}\\n\\nfunction _isVaultOwner(uint256 _vaultId, address _owner) view returns (bool) {\\n    if (_vaultId == 0) return false;\\n\\n    try IMcdManager(MCD_MANAGER).owns(_vaultId) returns (address owner) {\\n        return _owner == owner;\\n    } catch Error(string memory error) {\\n        revert(string(abi.encodePacked(\\\"FMaker._isVaultOwner:\\\", error)));\\n    } catch {\\n        revert(\\\"FMaker._isVaultOwner:undefined\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9a36cfb605947e1c73e96b95be4e34d2c913f23386d86be1923b34f3511a772a\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/FGelato.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {GELATO_GAS_PRICE_ORACLE} from \\\"../../constants/CGelato.sol\\\";\\nimport {mul} from \\\"../../vendor/DSMath.sol\\\";\\n\\nfunction _getGelatoGasPrice() view returns (uint256) {\\n    int256 oracleGasPrice = GELATO_GAS_PRICE_ORACLE.latestAnswer();\\n    if (oracleGasPrice <= 0) revert(\\\"_getGelatoGasPrice:0orBelow\\\");\\n    return uint256(oracleGasPrice);\\n}\\n\\nfunction _getGelatoExecutorFees(uint256 _gas) view returns (uint256) {\\n    return mul(_gas, _getGelatoGasPrice());\\n}\\n\",\"keccak256\":\"0x465e09df3c9d5dba7468a625f98bf3a543eaab1eeb0caf35436bf42722dd17e8\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/FGelatoDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {wmul, wdiv} from \\\"../../vendor/DSMath.sol\\\";\\nimport {\\n    INSTA_POOL_RESOLVER,\\n    ROUTE_1_TOLERANCE\\n} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {DebtBridgeInputData} from \\\"../../structs/SDebtBridge.sol\\\";\\nimport {\\n    _canDoMakerToAaveDebtBridge,\\n    _canDoMakerToMakerDebtBridge,\\n    _canDoMakerToCompoundDebtBridge\\n} from \\\"./conditions/FCanDoRefinance.sol\\\";\\nimport {\\n    PROTOCOL,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND,\\n    GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE,\\n    FAST_TX_FEE,\\n    VAULT_CREATION_COST\\n} from \\\"../../constants/CDebtBridge.sol\\\";\\nimport {\\n    IInstaPoolResolver\\n} from \\\"../../interfaces/InstaDapp/resolvers/IInstaPoolResolver.sol\\\";\\nimport {_getMakerVaultDebt} from \\\"../dapps/FMaker.sol\\\";\\nimport {_getGelatoExecutorFees} from \\\"./FGelato.sol\\\";\\nimport {DAI, ETH} from \\\"../../constants/CTokens.sol\\\";\\nimport {IOracleAggregator} from \\\"../../interfaces/gelato/IOracleAggregator.sol\\\";\\nimport {_convertTo18} from \\\"../../vendor/Convert.sol\\\";\\n\\nfunction _getFlashLoanRoute(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (uint256)\\n{\\n    IInstaPoolResolver.RouteData memory rData =\\n        IInstaPoolResolver(INSTA_POOL_RESOLVER).getTokenLimit(_debtToken);\\n\\n    if (rData.dydx > _debtAmt) return 0;\\n    if (rData.maker > _debtAmt) return 1;\\n    if (rData.compound > _debtAmt) return 2;\\n    if (rData.aave > _debtAmt) return 3;\\n    revert(\\\"FGelatoDebtBridge._getFlashLoanRoute: illiquid\\\");\\n}\\n\\nfunction _getDebtBridgeRoute(DebtBridgeInputData memory _data)\\n    view\\n    returns (PROTOCOL)\\n{\\n    if (_canDoMakerToAaveDebtBridge(_data)) return PROTOCOL.AAVE;\\n    else if (_canDoMakerToMakerDebtBridge(_data)) return PROTOCOL.MAKER;\\n    else if (_canDoMakerToCompoundDebtBridge(_data)) return PROTOCOL.COMPOUND;\\n    return PROTOCOL.NONE;\\n}\\n\\nfunction _getGasCostMakerToMaker(bool _newVault, uint256 _route)\\n    pure\\n    returns (uint256)\\n{\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToMaker: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            _newVault\\n                ? GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()[_route] +\\n                    VAULT_CREATION_COST\\n                : GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_MAKER()[_route]\\n        );\\n}\\n\\nfunction _getGasCostMakerToCompound(uint256 _route) pure returns (uint256) {\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToCompound: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_COMPOUND()[_route]\\n        );\\n}\\n\\nfunction _getGasCostMakerToAave(uint256 _route) pure returns (uint256) {\\n    _checkRouteIndex(\\n        _route,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToAave: invalid route index\\\"\\n    );\\n    return\\n        _getGasCostPremium(\\n            GAS_COSTS_FOR_FULL_REFINANCE_MAKER_TO_AAVE()[_route]\\n        );\\n}\\n\\nfunction _getGasCostPremium(uint256 _rawGasCost) pure returns (uint256) {\\n    return (_rawGasCost * (100 + FAST_TX_FEE)) / 100;\\n}\\n\\nfunction _getRealisedDebt(uint256 _debtToMove) pure returns (uint256) {\\n    return wmul(_debtToMove, ROUTE_1_TOLERANCE);\\n}\\n\\nfunction _checkRouteIndex(uint256 _route, string memory _revertMsg) pure {\\n    require(_route <= 4, _revertMsg);\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToAave(\\n    uint256 _fromVaultId,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToAave(_getFlashLoanRoute(DAI, wDaiToBorrow)),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToCompound(\\n    uint256 _fromVaultId,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToCompound(_getFlashLoanRoute(DAI, wDaiToBorrow)),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrowMakerToMaker(\\n    uint256 _fromVaultId,\\n    bool _newVault,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_fromVaultId));\\n\\n    return\\n        _getMaxAmtToBorrow(\\n            wDaiToBorrow,\\n            _getGasCostMakerToMaker(\\n                _newVault,\\n                _getFlashLoanRoute(DAI, wDaiToBorrow)\\n            ),\\n            _fees,\\n            _oracleAggregator\\n        );\\n}\\n\\nfunction _getMaxAmtToBorrow(\\n    uint256 _wDaiToBorrow,\\n    uint256 _gasCost,\\n    uint256 _fees,\\n    address _oracleAggregator\\n) view returns (uint256) {\\n    (uint256 gasCostInDAI, uint256 decimals) =\\n        IOracleAggregator(_oracleAggregator).getExpectedReturnAmount(\\n            _getGelatoExecutorFees(_gasCost),\\n            ETH,\\n            DAI\\n        );\\n\\n    gasCostInDAI = _convertTo18(decimals, gasCostInDAI);\\n\\n    return _wDaiToBorrow + gasCostInDAI + wmul(_wDaiToBorrow, _fees);\\n}\\n\",\"keccak256\":\"0x175aee7c0071ded9d065f293c225c65d8d29253e62e6199119d506c611a1e8d2\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/FCanDoRefinance.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {_isAaveLiquid} from \\\"./aave/FAaveHasLiquidity.sol\\\";\\nimport {_aavePositionWillBeSafe} from \\\"./aave/FAavePositionWillBeSafe.sol\\\";\\nimport {_isDebtAmtDust} from \\\"./maker/FIsDebtAmtDust.sol\\\";\\nimport {_isDebtCeilingReached} from \\\"./maker/FDebtCeilingIsReached.sol\\\";\\nimport {_destVaultWillBeSafe} from \\\"./maker/FDestVaultWillBeSafe.sol\\\";\\nimport {_cTokenHasLiquidity} from \\\"./compound/FCompoundHasLiquidity.sol\\\";\\nimport {\\n    _compoundPositionWillBeSafe\\n} from \\\"./compound/FCompoundPositionWillBeSafe.sol\\\";\\nimport {DebtBridgeInputData} from \\\"../../../structs/SDebtBridge.sol\\\";\\nimport {DAI} from \\\"../../../constants/CTokens.sol\\\";\\nimport {\\n    _getMaxAmtToBorrow,\\n    _getGasCostMakerToAave,\\n    _getGasCostMakerToCompound,\\n    _getGasCostMakerToMaker\\n} from \\\"../FGelatoDebtBridge.sol\\\";\\n\\nfunction _canDoMakerToAaveDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    _data.debtAmt = _getMaxAmtToBorrow(\\n        _data.debtAmt,\\n        _getGasCostMakerToAave(_data.flashRoute),\\n        _data.fees,\\n        _data.oracleAggregator\\n    );\\n    return\\n        _isAaveLiquid(DAI, _data.debtAmt) &&\\n        _aavePositionWillBeSafe(\\n            _data.dsa,\\n            _data.colAmt,\\n            _data.colToken,\\n            _data.debtAmt,\\n            _data.oracleAggregator\\n        );\\n}\\n\\nfunction _canDoMakerToMakerDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    _data.debtAmt = _getMaxAmtToBorrow(\\n        _data.debtAmt,\\n        _getGasCostMakerToMaker(_data.makerDestVaultId == 0, _data.flashRoute),\\n        _data.fees,\\n        _data.oracleAggregator\\n    );\\n    return\\n        !_isDebtAmtDust(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            _data.debtAmt\\n        ) &&\\n        !_isDebtCeilingReached(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            _data.debtAmt\\n        ) &&\\n        _destVaultWillBeSafe(\\n            _data.dsa,\\n            _data.makerDestVaultId,\\n            _data.makerDestColType,\\n            _data.colAmt,\\n            _data.debtAmt\\n        );\\n}\\n\\nfunction _canDoMakerToCompoundDebtBridge(DebtBridgeInputData memory _data)\\n    view\\n    returns (bool)\\n{\\n    _data.debtAmt = _getMaxAmtToBorrow(\\n        _data.debtAmt,\\n        _getGasCostMakerToCompound(_data.flashRoute),\\n        _data.fees,\\n        _data.oracleAggregator\\n    );\\n    return\\n        _cTokenHasLiquidity(DAI, _data.debtAmt) &&\\n        _compoundPositionWillBeSafe(\\n            _data.dsa,\\n            _data.colAmt,\\n            DAI,\\n            _data.debtAmt\\n        );\\n}\\n\",\"keccak256\":\"0xfeb332996ecdfecd2ac076897025e06b540134abf20e61b109938cb2c70912a6\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/aave/FAaveHasLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {IERC20} from \\\"../../../../interfaces/dapps/IERC20.sol\\\";\\nimport {\\n    ILendingPoolAddressesProvider\\n} from \\\"../../../../interfaces/dapps/Aave/ILendingPoolAddressesProvider.sol\\\";\\nimport {ILendingPool} from \\\"../../../../interfaces/dapps/Aave/ILendingPool.sol\\\";\\nimport {LENDING_POOL_ADDRESSES_PROVIDER} from \\\"../../../../constants/CAave.sol\\\";\\nimport {\\n    _getRealisedDebt\\n} from \\\"../../../../functions/gelato/FGelatoDebtBridge.sol\\\";\\nimport {_getMakerVaultDebt} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isAaveLiquid(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (bool)\\n{\\n    return\\n        IERC20(_debtToken).balanceOf(\\n            ILendingPool(\\n                ILendingPoolAddressesProvider(LENDING_POOL_ADDRESSES_PROVIDER)\\n                    .getLendingPool()\\n            )\\n                .getReserveData(_debtToken)\\n                .aTokenAddress\\n        ) > _debtAmt;\\n}\\n\",\"keccak256\":\"0xdab0be367444b3277d5945d200dbae6a19b53736c364417a545de30c29ce6ed1\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/aave/FAavePositionWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _getUserData,\\n    _getAssetLiquidationThreshold\\n} from \\\"../../../../functions/dapps/FAave.sol\\\";\\nimport {AaveUserData} from \\\"../../../../structs/SAave.sol\\\";\\nimport {GelatoBytes} from \\\"../../../../lib/GelatoBytes.sol\\\";\\nimport {wdiv, wmul, mul} from \\\"../../../../vendor/DSMath.sol\\\";\\nimport {\\n    IOracleAggregator\\n} from \\\"../../../../interfaces/gelato/IOracleAggregator.sol\\\";\\nimport {ETH, DAI} from \\\"../../../../constants/CTokens.sol\\\";\\nimport {_convertTo18} from \\\"../../../../vendor/Convert.sol\\\";\\n\\nfunction _aavePositionWillBeSafe(\\n    address _dsa,\\n    uint256 _colAmt,\\n    address _colToken,\\n    uint256 _debtAmt,\\n    address _oracleAggregator\\n) view returns (bool) {\\n    uint256 _colAmtInETH;\\n    uint256 _decimals;\\n    IOracleAggregator oracleAggregator = IOracleAggregator(_oracleAggregator);\\n\\n    AaveUserData memory userData = _getUserData(_dsa);\\n\\n    if (_colToken == ETH) _colAmtInETH = _colAmt;\\n    else {\\n        (_colAmtInETH, _decimals) = oracleAggregator.getExpectedReturnAmount(\\n            _colAmt,\\n            _colToken,\\n            ETH\\n        );\\n\\n        _colAmtInETH = _convertTo18(_decimals, _colAmtInETH);\\n    }\\n\\n    (_debtAmt, _decimals) = oracleAggregator.getExpectedReturnAmount(\\n        _debtAmt,\\n        DAI,\\n        ETH\\n    );\\n    _debtAmt = _convertTo18(_decimals, _debtAmt);\\n\\n    //\\n    //                  __\\n    //                  \\\\\\n    //                  /__ (Collateral)i in ETH x (Liquidation Threshold)i\\n    //  HealthFactor =  _________________________________________________\\n    //\\n    //                  Total Borrows in ETH + Total Fees in ETH\\n    //\\n\\n    return\\n        wdiv(\\n            (\\n                (mul(\\n                    userData.currentLiquidationThreshold,\\n                    userData.totalCollateralETH\\n                ) + mul(_colAmtInETH, _getAssetLiquidationThreshold(_colToken)))\\n            ) / 1e4,\\n            userData.totalBorrowsETH + _debtAmt\\n        ) > 1e18;\\n}\\n\",\"keccak256\":\"0x96331066dfa643fef3ebd213c5286b84e2e2a65e796507194cea39f49f4665ac\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/compound/FCompoundHasLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ICToken} from \\\"../../../../interfaces/dapps/Compound/ICToken.sol\\\";\\nimport {_getCToken} from \\\"../../../dapps/FCompound.sol\\\";\\n\\nfunction _cTokenHasLiquidity(address _debtToken, uint256 _debtAmt)\\n    view\\n    returns (bool)\\n{\\n    return ICToken(_getCToken(_debtToken)).getCash() > _debtAmt;\\n}\\n\",\"keccak256\":\"0x94ff371cde2624508c316b09e5a5f16efd1315091ec1a6dcd79204e683e2f78c\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/compound/FCompoundPositionWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {DAI} from \\\"../../../../constants/CTokens.sol\\\";\\nimport {\\n    _getCToken,\\n    _wouldCompoundAccountBeLiquid\\n} from \\\"../../../dapps/FCompound.sol\\\";\\n\\nfunction _compoundPositionWillBeSafe(\\n    address _dsa,\\n    uint256 _colAmt,\\n    address _debtToken,\\n    uint256 _debtAmt\\n) view returns (bool) {\\n    return\\n        _wouldCompoundAccountBeLiquid(\\n            _dsa,\\n            _colAmt,\\n            _getCToken(_debtToken),\\n            _debtAmt\\n        );\\n}\\n\",\"keccak256\":\"0x88ec9113308440560945b22168b24404709a70f28b8e639be393d68f8ff6b6ab\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FDebtCeilingIsReached.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _debtCeilingIsReachedNewVault,\\n    _debtCeilingIsReached,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isDebtCeilingReached(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return\\n        _debtCeilingIsReachedExplicit(_destVaultId, _destColType, _daiDebtAmt);\\n}\\n\\nfunction _debtCeilingIsReachedExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _debtCeilingIsReachedNewVault(_destColType, _daiDebtAmt)\\n            : _debtCeilingIsReached(_destVaultId, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x63d4ac5ebf15e2b820f5f8bacbd7856942c56e3f4c758ac72e2c23122f0bb6ad\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FDestVaultWillBeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _vaultWillBeSafe,\\n    _newVaultWillBeSafe,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _destVaultWillBeSafe(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return\\n        _destVaultWillBeSafeExplicit(\\n            _destVaultId,\\n            _destColType,\\n            _colAmt,\\n            _daiDebtAmt\\n        );\\n}\\n\\nfunction _destVaultWillBeSafeExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _colAmt,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _newVaultWillBeSafe(_destColType, _colAmt, _daiDebtAmt)\\n            : _vaultWillBeSafe(_destVaultId, _colAmt, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x02d7a4a2ce335b250eb1cbd445f9d76f90d5a183a86b715c0cf943022393dfb4\",\"license\":\"UNLICENSED\"},\"contracts/functions/gelato/conditions/maker/FIsDebtAmtDust.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    _debtIsDustNewVault,\\n    _debtIsDust,\\n    _isVaultOwner\\n} from \\\"../../../../functions/dapps/FMaker.sol\\\";\\n\\nfunction _isDebtAmtDust(\\n    address _dsa,\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    _destVaultId = _isVaultOwner(_destVaultId, _dsa) ? _destVaultId : 0;\\n\\n    return _isDebtAmtDustExplicit(_destVaultId, _destColType, _daiDebtAmt);\\n}\\n\\nfunction _isDebtAmtDustExplicit(\\n    uint256 _destVaultId,\\n    string memory _destColType,\\n    uint256 _daiDebtAmt\\n) view returns (bool) {\\n    return\\n        _destVaultId == 0\\n            ? _debtIsDustNewVault(_destColType, _daiDebtAmt)\\n            : _debtIsDust(_destVaultId, _daiDebtAmt);\\n}\\n\",\"keccak256\":\"0x3fe2e42cc5cf8221731e7f4dd926e973024eb3efab57b4c4568e45ce70765a20\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/IInstaDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n/// @notice Interface InstaDapp Index\\ninterface IndexInterface {\\n    function connectors(uint256 version) external view returns (address);\\n\\n    function list() external view returns (address);\\n}\\n\\n/// @notice Interface InstaDapp List\\ninterface ListInterface {\\n    function accountID(address _account) external view returns (uint64);\\n}\\n\\n/// @notice Interface InstaDapp InstaMemory\\ninterface MemoryInterface {\\n    function setUint(uint256 _id, uint256 _val) external;\\n\\n    function getUint(uint256 _id) external returns (uint256);\\n}\\n\\n/// @notice Interface InstaDapp Defi Smart Account wallet\\ninterface AccountInterface {\\n    function cast(\\n        address[] calldata _targets,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external payable returns (bytes32[] memory responses);\\n\\n    function version() external view returns (uint256);\\n\\n    function isAuth(address user) external view returns (bool);\\n\\n    function shield() external view returns (bool);\\n}\\n\\ninterface ConnectorInterface {\\n    function connectorID() external view returns (uint256 _type, uint256 _id);\\n\\n    function name() external view returns (string memory);\\n}\\n\\ninterface InstaMapping {\\n    function gemJoinMapping(bytes32) external view returns (address);\\n\\n    function cTokenMapping(address) external view returns (address);\\n}\\n\",\"keccak256\":\"0xe0675f18c98f99ac30d284feec4a1de5feb5f85c8d16c1a9e5cddd739dfb34c7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/IInstaFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IInstaFeeCollector {\\n    function setFeeCollector(address payable _feeCollector) external;\\n\\n    function setFee(uint256 _fee) external;\\n\\n    function fee() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address payable);\\n}\\n\",\"keccak256\":\"0xdb768ade8f511ae26c9de55b9373ad8b4eb8c99ab07a4bf097bfc8f25daa35b6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/connectors/IConnectBasic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IConnectBasic {\\n    function withdraw(\\n        address _erc20,\\n        uint256 _tokenAmt,\\n        address payable _to,\\n        uint256 _getId,\\n        uint256 _setId\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x86285eb2bd902dcc855ccdef25066b508860fdfe5e70c3c5dd3e25bf78e43286\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/connectors/IConnectDebtBridgeFee.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IConnectDebtBridgeFee {\\n    function calculateFee(\\n        uint256 _amount,\\n        uint256 _ftf,\\n        uint256 _fee,\\n        uint256 _getId,\\n        uint256 _setId,\\n        uint256 _setIdFee\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x3c8723204678c41bef4d44962a39394048cd2fad2ff4def7f1590e7684b1f5eb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/connectors/IConnectInstaPoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IConnectInstaPoolV2 {\\n    function flashBorrowAndCast(\\n        address token,\\n        uint256 amt,\\n        uint256 route,\\n        bytes memory data\\n    ) external payable;\\n\\n    function flashPayback(\\n        address token,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa04efafbfb4633a749d6d176a93eb3cce0372db148fc8bd7683d66c0e7114b10\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/connectors/IConnectMaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IConnectMaker {\\n    function payback(\\n        uint256 vault,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable;\\n\\n    function borrow(\\n        uint256 vault,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable;\\n\\n    function open(string calldata colType)\\n        external\\n        payable\\n        returns (uint256 vault);\\n\\n    function withdraw(\\n        uint256 vault,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable;\\n\\n    function deposit(\\n        uint256 vault,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x897c528456494fcef3ce3ab0fbfda4ede59c54518ccde0228c7729555dd59bc5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/InstaDapp/resolvers/IInstaPoolResolver.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity 0.8.0;\\n\\ninterface IInstaPoolResolver {\\n    struct RouteData {\\n        uint256 dydx;\\n        uint256 maker;\\n        uint256 compound;\\n        uint256 aave;\\n    }\\n\\n    function getTokenLimit(address token)\\n        external\\n        view\\n        returns (RouteData memory);\\n}\\n\",\"keccak256\":\"0xd1e148a8c7d84f528397ac90a23160bfa04df6ad1ec990a2447ddb5ae069dac0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ChainLinkInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ChainLinkInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa28e7bfd15b9353039c764d8203adc9fc066a32db1da3351f10eed6af70c57ad\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/IAaveProtocolDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IAaveProtocolDataProvider {\\n    function getUserReserveData(address asset, address user)\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n}\\n\",\"keccak256\":\"0x8444e5bce4ff4a8715f095a931605e9765bffe3cb206bdf33f4e849cfab85735\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ReserveData} from \\\"../../../structs/SAave.sol\\\";\\n\\ninterface ILendingPool {\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (ReserveData memory);\\n\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function getReservesList() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x1215c59b3edc74953de7c551ee7de24aa00bebf0529f523dea6c99cb1faf5c1b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Aave/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ILendingPoolAddressesProvider {\\n    function getLendingPool() external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4966d8f93cd89d770c8c5255aa0c266cb7df36adba5b195d0fd5d97960df8f02\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ICToken {\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCash() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x47be032b0dfd57cc06f58eb23c9cb8ec5aeaaee4abd3f620bd0260349e2251c5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ICToken} from \\\"./ICToken.sol\\\";\\nimport {Market} from \\\"../../../structs/SCompound.sol\\\";\\n\\ninterface IComptroller {\\n    function getAssetsIn(address account)\\n        external\\n        view\\n        returns (ICToken[] memory);\\n\\n    function oracle() external view returns (address);\\n\\n    function markets(address cToken)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isComped\\n        );\\n}\\n\",\"keccak256\":\"0x83078bc37abc76900f2db14752e9637c812d6e1798335f4ec7b257c4d0aaaa50\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Compound/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ICToken} from \\\"./ICToken.sol\\\";\\n\\ninterface IPriceOracle {\\n    function getUnderlyingPrice(ICToken cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa6042bacdf286c327a2fcaa322cbbaa85b6f1407b772f2b5785b58917f6695e9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd0fbf10a1342de2706ae8dd1881ffe09c7bc1f7a3ee93b39a3b5c4acebf24487\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/IMcdManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IMcdManager {\\n    function ilks(uint256) external view returns (bytes32);\\n\\n    function urns(uint256) external view returns (address);\\n\\n    function vat() external view returns (address);\\n\\n    function owns(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x600c309dbdb47e7fb5b5b135e174c5af0fd80a583cc92e9db15868626ea13944\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/ITokenJoinInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ITokenJoinInterface {\\n    function dec() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a73dd7b495b10a6405595d2a72749940cbe62610ea1b4d7ec02f815bf4ed4d6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/dapps/Maker/IVat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IVat {\\n    function ilks(bytes32)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function dai(address) external view returns (uint256);\\n\\n    function urns(bytes32, address) external view returns (uint256, uint256);\\n\\n    function debt() external view returns (uint256);\\n\\n    // solhint-disable-next-line\\n    function Line() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x562456d1f66878e0dacc113383383c2eb3d4edcb76c9e0ecc04251895f5a453d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/gelato/IGelatoGasPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IGelatoGasPriceOracle {\\n    function latestAnswer() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x5d16f3187c98a910aeb6309f4b5a705237806fba133c7174713a9df7f482cbcb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/gelato/IOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IOracleAggregator {\\n    function getExpectedReturnAmount(\\n        uint256 amountIn,\\n        address inToken,\\n        address outToken\\n    ) external view returns (uint256 returnAmount, uint256 outTokenDecimals);\\n}\\n\",\"keccak256\":\"0xde61cf48c28a17f34bba0327a79af354cff3b92fdbcbe76ea5e0d6b804210b47\",\"license\":\"UNLICENSED\"},\"contracts/lib/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2456950f3849af7457015c291b9a45271ca3497d1c870361878d0f35de41080\",\"license\":\"UNLICENSED\"},\"contracts/structs/SAave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\n// ////////// LendingPool /////////////////\\nstruct AaveUserData {\\n    uint256 totalCollateralETH;\\n    uint256 totalBorrowsETH;\\n    uint256 availableBorrowsETH;\\n    uint256 currentLiquidationThreshold;\\n    uint256 ltv;\\n    uint256 healthFactor;\\n    uint256 ethPriceInUsd;\\n}\\n\\nstruct ReserveConfigurationMap {\\n    uint256 data;\\n}\\n\\nstruct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n}\\n\",\"keccak256\":\"0x10956f70b043a4fdcaa69ceb6d286301ce8da849c0ccd5f5bc83690dab63f843\",\"license\":\"UNLICENSED\"},\"contracts/structs/SCompound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nstruct AccountLiquidityLocalVars {\\n    uint256 sumCollateral;\\n    uint256 sumBorrowPlusEffects;\\n    uint256 cTokenBalance;\\n    uint256 borrowBalance;\\n    uint256 exchangeRateMantissa;\\n    uint256 oraclePriceMantissa;\\n    uint256 collateralFactor;\\n    uint256 exchangeRate;\\n    uint256 oraclePrice;\\n    uint256 tokensToDenom;\\n}\\n\\nstruct Market {\\n    bool isListed;\\n    uint256 collateralFactorMantissa;\\n    mapping(address => bool) accountMembership;\\n    bool isComped;\\n}\\n\\nstruct CompData {\\n    uint256 tokenPriceInEth;\\n    uint256 tokenPriceInUsd;\\n    uint256 exchangeRateStored;\\n    uint256 balanceOfUser;\\n    uint256 borrowBalanceStoredUser;\\n    uint256 supplyRatePerBlock;\\n    uint256 borrowRatePerBlock;\\n    uint256 collateralFactor;\\n    bool isComped;\\n}\\n\",\"keccak256\":\"0xe8a0f77e7d1cfe283a9a9d356c0f32afb1fef06757e36c84948be9b0a4955927\",\"license\":\"UNLICENSED\"},\"contracts/structs/SDebtBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nstruct DebtBridgeInputData {\\n    address dsa;\\n    uint256 colAmt;\\n    address colToken;\\n    uint256 debtAmt;\\n    address oracleAggregator;\\n    uint256 makerDestVaultId;\\n    string makerDestColType;\\n    uint256 fees;\\n    uint256 flashRoute;\\n}\\n\",\"keccak256\":\"0xec7b95278e03209f89a8c95b53b15d1c3faad51fd733b1f1b3d4d1a36ebd3bdd\",\"license\":\"UNLICENSED\"},\"contracts/vendor/Convert.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {mul as _mul} from \\\"./DSMath.sol\\\";\\n\\nfunction _stringToBytes32(string memory str) pure returns (bytes32 result) {\\n    require(bytes(str).length != 0, \\\"string-empty\\\");\\n    assembly {\\n        result := mload(add(str, 32))\\n    }\\n}\\n\\nfunction _convertTo18(uint256 _dec, uint256 _amt) pure returns (uint256 amt) {\\n    amt = _mul(_amt, 10**(18 - _dec));\\n}\\n\",\"keccak256\":\"0xba31db6ad3b69599bc5a6d8dc27f39fa6795f671af2f69fcd747983c01b799ce\",\"license\":\"UNLICENSED\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: AGPL-3.0-or-later\\\"\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.0;\\n\\nfunction add(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n}\\n\\nfunction sub(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n}\\n\\nfunction mul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n}\\n\\nfunction min(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction max(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nfunction imin(int256 x, int256 y) pure returns (int256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction imax(int256 x, int256 y) pure returns (int256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nuint256 constant WAD = 10**18;\\nuint256 constant RAY = 10**27;\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), WAD / 2) / WAD;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction rmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), RAY / 2) / RAY;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, WAD), y / 2) / y;\\n}\\n\\n//rounds to zero if x*y < RAY / 2\\nfunction rdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, RAY), y / 2) / y;\\n}\\n\\n// This famous algorithm is called \\\"exponentiation by squaring\\\"\\n// and calculates x^n with x as fixed-point and n as regular unsigned.\\n//\\n// It's O(log n), instead of O(n) for naive repeated multiplication.\\n//\\n// These facts are why it works:\\n//\\n//  If n is even, then x^n = (x^2)^(n/2).\\n//  If n is odd,  then x^n = x * x^(n-1),\\n//   and applying the equation for even x gives\\n//    x^n = x * (x^2)^((n-1) / 2).\\n//\\n//  Also, EVM division is flooring and\\n//    floor[(n-1) / 2] = floor[n / 2].\\n//\\nfunction rpow(uint256 x, uint256 n) pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n        x = rmul(x, x);\\n\\n        if (n % 2 != 0) {\\n            z = rmul(z, x);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d7cc87f9c74e3c8d9cfe196e0bdd657f2c4c0fbb588db8cb941066e859ed60a\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162004a9138038062004a9183398181016040528101906200003891906200015d565b8383838383608081815250508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff1660601b815250503073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050505050505050506200023b565b600081519050620001408162000207565b92915050565b600081519050620001578162000221565b92915050565b600080600080608085870312156200017457600080fd5b6000620001848782880162000146565b945050602062000197878288016200012f565b9350506040620001aa878288016200012f565b9250506060620001bd878288016200012f565b91505092959194509250565b6000620001d682620001dd565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200021281620001c9565b81146200021e57600080fd5b50565b6200022c81620001fd565b81146200023857600080fd5b50565b60805160a05160601c60c05160601c60e05160601c6101005160601c6147d4620002bd600039600081816114390152611ded0152600081816101fa01526109c3015260008181610267015281816118de01528181611a8e0152818161231b015261255e015260008181610243015261062b015260006102c901526147d46000f3fe60806040526004361061007b5760003560e01c8063bc95af311161004e578063bc95af311461011d578063d48fe28014610148578063eb15f78114610173578063eb9e71261461019f5761007b565b806306fdde031461008057806308b0e9ce146100ab5780631263c73c146100d65780638dffe3f4146100f2575b600080fd5b34801561008c57600080fd5b506100956101dc565b6040516100a29190613e99565b60405180910390f35b3480156100b757600080fd5b506100c06101f8565b6040516100cd9190613cda565b60405180910390f35b6100f060048036038101906100eb9190613573565b61021c565b005b3480156100fe57600080fd5b50610107610241565b6040516101149190613cda565b60405180910390f35b34801561012957600080fd5b50610132610265565b60405161013f9190613cda565b60405180910390f35b34801561015457600080fd5b5061015d610289565b60405161016a9190613e99565b60405180910390f35b34801561017f57600080fd5b506101886102c2565b604051610196929190613fcd565b60405180910390f35b3480156101ab57600080fd5b506101c660048036038101906101c19190613490565b6102f4565b6040516101d39190613e99565b60405180910390f35b60405180606001604052806022815260200161477d6022913981565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061022b868686866104cb565b9150915061023982826108ce565b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280600281526020017f4f4b00000000000000000000000000000000000000000000000000000000000081525081565b60008060017f000000000000000000000000000000000000000000000000000000000000000080925081935050509091565b60606000868660049060249261030c939291906141ce565b810190610319919061343e565b905060008114156103ce573073ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561036a57600080fd5b505afa15801561037e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103a791906133d4565b6040516020016103b79190613c30565b6040516020818303038152906040529150506104c0565b6103d88189610a9a565b610486573073ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561042257600080fd5b505afa158015610436573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061045f91906133d4565b60405160200161046f9190613c52565b6040516020818303038152906040529150506104c0565b6040518060400160405280600281526020017f4f4b0000000000000000000000000000000000000000000000000000000000008152509150505b979650505050505050565b606080600167ffffffffffffffff81111561050f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561053d5781602001602082028036833780820191505090505b50915073eb4bf86589f808f90eec8e964dbf16bd4d2849058260008151811061058f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506105d38530610a9a565b6105de5760006105e0565b845b945060006105f56105f088610c2a565b610ef4565b9050600061060288610f0f565b90506000610624736b175474e89094c44da98b954eedeac495271d0f84611058565b90506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633c772b6c61067a61067560008e1487611193565b61126a565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee736b175474e89094c44da98b954eedeac495271d0f6040518463ffffffff1660e01b81526004016106c293929190613f96565b604080518083038186803b1580156106d957600080fd5b505afa1580156106ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107119190613537565b9150915061071f8183611284565b915060008060008c1461073e576107398d8d8989886112b0565b61074d565b61074c8d8c8c8a8a89611c64565b5b91509150600167ffffffffffffffff811115610792577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156107c557816020015b60608152602001906001900390816107b05790505b509750638d0a9b1b60e01b736b175474e89094c44da98b954eedeac495271d0f888785856040516020016107fa929190613dd9565b60405160208183030381529060405260405160240161081c9493929190613d48565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050886000815181106108b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052505050505050505094509492505050565b600063e0e90acf60e01b8383336040516024016108ed93929190613e10565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000803073ffffffffffffffffffffffffffffffffffffffff16836040516109749190613bd3565b600060405180830381855af49150503d80600081146109af576040519150601f19603f3d011682016040523d82523d6000602084013e6109b4565b606091505b509150915081610a9357610a927f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015610a2757600080fd5b505afa158015610a3b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a6491906133d4565b604051602001610a749190613c96565b6040516020818303038152906040528261273590919063ffffffff16565b5b5050505050565b600080831415610aad5760009050610c24565b735ef30b9986345249bc32d8928b7ee64de9435e3973ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b8152600401610afa9190613f7b565b60206040518083038186803b158015610b1257600080fd5b505afa925050508015610b4357506040513d601f19601f82011682018060405250810190610b409190613330565b60015b610bf157610b4f614605565b80610b5a5750610bb6565b80604051602001610b6b9190613cb8565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bad9190613e99565b60405180910390fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be890613f3b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16149150505b92915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e399050600080610c51838661289e565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9d57600080fd5b505afa158015610cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd59190613330565b905060008173ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b8152600401610d129190613e55565b60a06040518083038186803b158015610d2a57600080fd5b505afa158015610d3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6291906135df565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff16632424be5c86866040518363ffffffff1660e01b8152600401610da5929190613e70565b604080518083038186803b158015610dbc57600080fd5b505afa158015610dd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df49190613537565b91505060008373ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b8152600401610e329190613cda565b60206040518083038186803b158015610e4a57600080fd5b505afa158015610e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e829190613467565b90506000610e99610e9384866129be565b83612a2b565b90506b033b2e3c9fd0803ce800000081610eb39190614257565b985080610ecc8a6b033b2e3c9fd0803ce80000006129be565b10610ed75788610ee5565b600189610ee49190614201565b5b98505050505050505050919050565b6000610f0882670df27a2cdf448000612a84565b9050919050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7157600080fd5b505afa158015610f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa99190613330565b9050600080610fb8848761289e565b9150915060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c84846040518363ffffffff1660e01b8152600401610ff9929190613e70565b604080518083038186803b15801561101057600080fd5b505afa158015611024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110489190613537565b5090508095505050505050919050565b60008073a004a5afba04b74037e9e52ba1f7eb02b5e6150973ffffffffffffffffffffffffffffffffffffffff16635a860c87856040518263ffffffff1660e01b81526004016110a89190613cda565b60806040518083038186803b1580156110c057600080fd5b505afa1580156110d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f89190613415565b9050828160000151111561111057600091505061118d565b828160200151111561112657600191505061118d565b828160400151111561113c57600291505061118d565b828160600151111561115257600391505061118d565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118490613f5b565b60405180910390fd5b92915050565b60006111b7826040518060600160405280603e815260200161473f603e9139612ac8565b61126283611209576111c7612b14565b83600481106111ff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015161125d565b62030d40611215612b14565b846004811061124d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015161125c9190614201565b5b612b4e565b905092915050565b600061127d82611278612b7c565b6129be565b9050919050565b60006112a8828460126112979190614453565b600a6112a391906142db565b6129be565b905092915050565b606080600867ffffffffffffffff8111156112f4577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156113225781602001602082028036833780820191505090505b50915073ac02030d8a8f49ed04b2f52c394d3f901a10f8a982600081518110611374577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a9826001815181106113fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000082600281518110611492577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a98260038151811061151b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a9826004815181106115a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e5398f279175962e56fe4c5e0b62dc7208ef36c68260058151811061162d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e5398f279175962e56fe4c5e0b62dc7208ef36c6826006815181106116b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073eb4bf86589f808f90eec8e964dbf16bd4d2849058260078151811061173f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600867ffffffffffffffff8111156117ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156117ed57816020015b60608152602001906001900390816117d85790505b50905061181f877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000610258612c5d565b81600081518110611859577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250611891877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600080612ce5565b816001815181106118cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506119866000847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561194257600080fd5b505afa158015611956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197a9190613467565b61025880610259612d6d565b816002815181106119c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506119d88685600080612dfb565b81600381518110611a12577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250611a2d8660006102586000612e83565b81600481518110611a67577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250611b34736b175474e89094c44da98b954eedeac495271d0f60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611af257600080fd5b505afa158015611b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2a9190613359565b6102596000612f0b565b81600581518110611b6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250611baf736b175474e89094c44da98b954eedeac495271d0f847398edc8067cc671bcae82d36dcc609c3e4e078ac8600080612f0b565b81600681518110611be9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250611c15736b175474e89094c44da98b954eedeac495271d0f86600080612f96565b81600781518110611c4f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052509550959350505050565b606080600967ffffffffffffffff811115611ca8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611cd65781602001602082028036833780820191505090505b50915073ac02030d8a8f49ed04b2f52c394d3f901a10f8a982600081518110611d28577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a982600181518110611db1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000082600281518110611e46577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a982600381518110611ecf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a982600481518110611f58577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a982600581518110611fe1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e5398f279175962e56fe4c5e0b62dc7208ef36c68260068151811061206a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e5398f279175962e56fe4c5e0b62dc7208ef36c6826007815181106120f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073eb4bf86589f808f90eec8e964dbf16bd4d2849058260088151811061217c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600967ffffffffffffffff8111156121f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561222a57816020015b60608152602001906001900390816122155790505b50905061225c887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000610258612c5d565b81600081518110612296577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506122ce887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600080612ce5565b81600181518110612308577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506123c36000847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561237f57600080fd5b505afa158015612393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b79190613467565b61025880610259612d6d565b816002815181106123fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525061245587878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061301e565b8160038151811061248f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506124a8600085600080612dfb565b816004815181106124e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506124fd6000806102586000612e83565b81600581518110612537577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250612604736b175474e89094c44da98b954eedeac495271d0f60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125c257600080fd5b505afa1580156125d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fa9190613359565b6102596000612f0b565b8160068151811061263e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525061267f736b175474e89094c44da98b954eedeac495271d0f847398edc8067cc671bcae82d36dcc609c3e4e078ac8600080612f0b565b816007815181106126b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506126e5736b175474e89094c44da98b954eedeac495271d0f86600080612f96565b8160088151811061271f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250965096945050505050565b600460208351612745919061451c565b1415612842576000826020015190506308c379a060e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156127e657604483019250818360405160200161279b929190613bea565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127dd9190613e99565b60405180910390fd5b816040516020016127f79190613c0e565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128399190613e99565b60405180910390fd5b806040516020016128539190613c74565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128959190613e99565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd846040518263ffffffff1660e01b81526004016128da9190613f7b565b60206040518083038186803b1580156128f257600080fd5b505afa158015612906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292a9190613382565b91508373ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b81526004016129659190613f7b565b60206040518083038186803b15801561297d57600080fd5b505afa158015612991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b59190613330565b90509250929050565b6000808214806129e65750828283856129d791906143f9565b9250826129e49190614257565b145b612a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a1c90613edb565b60405180910390fd5b92915050565b6000828284612a3a9190614453565b9150811115612a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7590613ebb565b60405180910390fd5b92915050565b6000670de0b6b3a7640000612ab6612a9c85856129be565b6002670de0b6b3a7640000612ab19190614257565b61309d565b612ac09190614257565b905092915050565b60048211158190612b0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b069190613e99565b60405180910390fd5b505050565b612b1c6130f6565b604051806080016040528062266fd88152602001622feb948152602001623c97b8815260200162424ca8815250905090565b60006064601e6064612b609190614201565b83612b6b91906143f9565b612b759190614257565b9050919050565b60008073169e633a2d1e6c10dd91238ba11c4a708dfef37c73ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bd957600080fd5b505afa158015612bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1191906133ab565b905060008113612c56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c4d90613f1b565b60405180910390fd5b8091505090565b606063d5e0da3660e01b85858585604051602401612c7e9493929190613ff6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050949350505050565b606063674fb1b460e01b85858585604051602401612d069493929190613ff6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050949350505050565b606063acd2fd9360e01b878787878787604051602401612d929695949392919061403b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509695505050505050565b6060632505c3d960e01b85858585604051602401612e1c9493929190613ff6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050949350505050565b606063111d948260e01b85858585604051602401612ea49493929190613ff6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050949350505050565b6060634bd3ab8260e01b8686868686604051602401612f2e959493929190613cf5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905095945050505050565b606063213980e860e01b85858585604051602401612fb79493929190613d94565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050949350505050565b606063e4dcb06b60e01b826040516024016130399190613e99565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b60008282846130ac9190614201565b91508110156130f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130e790613efb565b60405180910390fd5b92915050565b6040518060800160405280600490602082028036833780820191505090505090565b600061312b613126846140cd565b61409c565b90508281526020810184848401111561314357600080fd5b61314e8482856144e9565b509392505050565b600081359050613165816146bb565b92915050565b60008151905061317a816146bb565b92915050565b60008151905061318f816146d2565b92915050565b6000815190506131a4816146e9565b92915050565b60008083601f8401126131bc57600080fd5b8235905067ffffffffffffffff8111156131d557600080fd5b6020830191508360018202830111156131ed57600080fd5b9250929050565b60008135905061320381614700565b92915050565b60008151905061321881614710565b92915050565b60008083601f84011261323057600080fd5b8235905067ffffffffffffffff81111561324957600080fd5b60208301915083600182028301111561326157600080fd5b9250929050565b600082601f83011261327957600080fd5b8151613289848260208601613118565b91505092915050565b6000608082840312156132a457600080fd5b6132ae608061409c565b905060006132be8482850161331b565b60008301525060206132d28482850161331b565b60208301525060406132e68482850161331b565b60408301525060606132fa8482850161331b565b60608301525092915050565b60008135905061331581614727565b92915050565b60008151905061332a81614727565b92915050565b60006020828403121561334257600080fd5b60006133508482850161316b565b91505092915050565b60006020828403121561336b57600080fd5b600061337984828501613180565b91505092915050565b60006020828403121561339457600080fd5b60006133a284828501613195565b91505092915050565b6000602082840312156133bd57600080fd5b60006133cb84828501613209565b91505092915050565b6000602082840312156133e657600080fd5b600082015167ffffffffffffffff81111561340057600080fd5b61340c84828501613268565b91505092915050565b60006080828403121561342757600080fd5b600061343584828501613292565b91505092915050565b60006020828403121561345057600080fd5b600061345e84828501613306565b91505092915050565b60006020828403121561347957600080fd5b60006134878482850161331b565b91505092915050565b600080600080600080600060c0888a0312156134ab57600080fd5b60006134b98a828b01613306565b97505060206134ca8a828b01613156565b965050604088013567ffffffffffffffff8111156134e757600080fd5b6134f38a828b016131aa565b955095505060606135068a828b016131f4565b93505060806135178a828b01613306565b92505060a06135288a828b01613306565b91505092959891949750929550565b6000806040838503121561354a57600080fd5b60006135588582860161331b565b92505060206135698582860161331b565b9150509250929050565b6000806000806060858703121561358957600080fd5b600061359787828801613306565b94505060206135a887828801613306565b935050604085013567ffffffffffffffff8111156135c557600080fd5b6135d18782880161321e565b925092505092959194509250565b600080600080600060a086880312156135f757600080fd5b60006136058882890161331b565b95505060206136168882890161331b565b94505060406136278882890161331b565b93505060606136388882890161331b565b92505060806136498882890161331b565b9150509295509295909350565b60006136628383613691565b60208301905092915050565b600061367a8383613791565b905092915050565b61368b81614499565b82525050565b61369a81614487565b82525050565b6136a981614487565b82525050565b60006136ba8261411d565b6136c48185614163565b93506136cf836140fd565b8060005b838110156137005781516136e78882613656565b97506136f283614149565b9250506001810190506136d3565b5085935050505092915050565b600061371882614128565b6137228185614174565b9350836020820285016137348561410d565b8060005b858110156137705784840389528151613751858261366e565b945061375c83614156565b925060208a01995050600181019050613738565b50829750879550505050505092915050565b61378b816144ab565b82525050565b600061379c82614133565b6137a68185614185565b93506137b68185602086016144e9565b6137bf816145da565b840191505092915050565b60006137d582614133565b6137df8185614196565b93506137ef8185602086016144e9565b6137f8816145da565b840191505092915050565b600061380e82614133565b61381881856141a7565b93506138288185602086016144e9565b80840191505092915050565b600061383f8261413e565b61384981856141b2565b93506138598185602086016144e9565b613862816145da565b840191505092915050565b60006138788261413e565b61388281856141c3565b93506138928185602086016144e9565b80840191505092915050565b60006138ab6015836141b2565b91507f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006000830152602082019050919050565b60006138eb6014836141b2565b91507f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006000830152602082019050919050565b600061392b6014836141b2565b91507f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006000830152602082019050919050565b600061396b600f836141c3565b91507f4e6f4572726f7253656c6563746f7200000000000000000000000000000000006000830152600f82019050919050565b60006139ab601b836141b2565b91507f5f67657447656c61746f47617350726963653a306f7242656c6f7700000000006000830152602082019050919050565b60006139eb6015836141c3565b91507f464d616b65722e5f69735661756c744f776e65723a00000000000000000000006000830152601582019050919050565b6000613a2b601e836141b2565b91507f464d616b65722e5f69735661756c744f776e65723a756e646566696e656400006000830152602082019050919050565b6000613a6b6017836141c3565b91507f3a205661756c74204964206973206e6f742076616c69640000000000000000006000830152601782019050919050565b6000613aab6018836141c3565b91507f3a205661756c74206e6f74206f776e65642062792064736100000000000000006000830152601882019050919050565b6000613aeb602e836141b2565b91507f4647656c61746f446562744272696467652e5f676574466c6173684c6f616e5260008301527f6f7574653a20696c6c69717569640000000000000000000000000000000000006020830152604082019050919050565b6000613b516014836141c3565b91507f556e657870656374656452657475726e646174610000000000000000000000006000830152601482019050919050565b6000613b916007836141c3565b91507f2e5f636173743a000000000000000000000000000000000000000000000000006000830152600782019050919050565b613bcd816144df565b82525050565b6000613bdf8284613803565b915081905092915050565b6000613bf6828561386d565b9150613c02828461386d565b91508190509392505050565b6000613c1a828461386d565b9150613c258261395e565b915081905092915050565b6000613c3c828461386d565b9150613c4782613a5e565b915081905092915050565b6000613c5e828461386d565b9150613c6982613a9e565b915081905092915050565b6000613c80828461386d565b9150613c8b82613b44565b915081905092915050565b6000613ca2828461386d565b9150613cad82613b84565b915081905092915050565b6000613cc3826139de565b9150613ccf828461386d565b915081905092915050565b6000602082019050613cef60008301846136a0565b92915050565b600060a082019050613d0a60008301886136a0565b613d176020830187613bc4565b613d246040830186613682565b613d316060830185613bc4565b613d3e6080830184613bc4565b9695505050505050565b6000608082019050613d5d60008301876136a0565b613d6a6020830186613bc4565b613d776040830185613bc4565b8181036060830152613d8981846137ca565b905095945050505050565b6000608082019050613da960008301876136a0565b613db66020830186613bc4565b613dc36040830185613bc4565b613dd06060830184613bc4565b95945050505050565b60006040820190508181036000830152613df381856136af565b90508181036020830152613e07818461370d565b90509392505050565b60006060820190508181036000830152613e2a81866136af565b90508181036020830152613e3e818561370d565b9050613e4d60408301846136a0565b949350505050565b6000602082019050613e6a6000830184613782565b92915050565b6000604082019050613e856000830185613782565b613e9260208301846136a0565b9392505050565b60006020820190508181036000830152613eb38184613834565b905092915050565b60006020820190508181036000830152613ed48161389e565b9050919050565b60006020820190508181036000830152613ef4816138de565b9050919050565b60006020820190508181036000830152613f148161391e565b9050919050565b60006020820190508181036000830152613f348161399e565b9050919050565b60006020820190508181036000830152613f5481613a1e565b9050919050565b60006020820190508181036000830152613f7481613ade565b9050919050565b6000602082019050613f906000830184613bc4565b92915050565b6000606082019050613fab6000830186613bc4565b613fb860208301856136a0565b613fc560408301846136a0565b949350505050565b6000604082019050613fe26000830185613bc4565b613fef6020830184613bc4565b9392505050565b600060808201905061400b6000830187613bc4565b6140186020830186613bc4565b6140256040830185613bc4565b6140326060830184613bc4565b95945050505050565b600060c0820190506140506000830189613bc4565b61405d6020830188613bc4565b61406a6040830187613bc4565b6140776060830186613bc4565b6140846080830185613bc4565b61409160a0830184613bc4565b979650505050505050565b6000604051905081810181811067ffffffffffffffff821117156140c3576140c26145ab565b5b8060405250919050565b600067ffffffffffffffff8211156140e8576140e76145ab565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600080858511156141de57600080fd5b838611156141eb57600080fd5b6001850283019150848603905094509492505050565b600061420c826144df565b9150614217836144df565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561424c5761424b61454d565b5b828201905092915050565b6000614262826144df565b915061426d836144df565b92508261427d5761427c61457c565b5b828204905092915050565b6000808291508390505b60018511156142d2578086048111156142ae576142ad61454d565b5b60018516156142bd5780820291505b80810290506142cb856145eb565b9450614292565b94509492505050565b60006142e6826144df565b91506142f1836144df565b925061431e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614326565b905092915050565b60008261433657600190506143f2565b8161434457600090506143f2565b816001811461435a576002811461436457614393565b60019150506143f2565b60ff8411156143765761437561454d565b5b8360020a91508482111561438d5761438c61454d565b5b506143f2565b5060208310610133831016604e8410600b84101617156143c85782820a9050838111156143c3576143c261454d565b5b6143f2565b6143d58484846001614288565b925090508184048111156143ec576143eb61454d565b5b81810290505b9392505050565b6000614404826144df565b915061440f836144df565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156144485761444761454d565b5b828202905092915050565b600061445e826144df565b9150614469836144df565b92508282101561447c5761447b61454d565b5b828203905092915050565b6000614492826144bf565b9050919050565b60006144a4826144bf565b9050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156145075780820151818401526020810190506144ec565b83811115614516576000848401525b50505050565b6000614527826144df565b9150614532836144df565b9250826145425761454161457c565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b60008160e01c9050919050565b600060443d1015614615576146b8565b60046000803e6146266000516145f8565b6308c379a0811461463757506146b8565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715614663575050506146b8565b808201805167ffffffffffffffff8111156146825750505050506146b8565b8060208301013d850181111561469d575050505050506146b8565b6146a6826145da565b60208401016040528296505050505050505b90565b6146c481614487565b81146146cf57600080fd5b50565b6146db81614499565b81146146e657600080fd5b50565b6146f2816144ab565b81146146fd57600080fd5b50565b6004811061470d57600080fd5b50565b614719816144b5565b811461472457600080fd5b50565b614730816144df565b811461473b57600080fd5b5056fe4647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f4d616b65723a20696e76616c696420726f75746520696e646578436f6e6e65637447656c61746f446174614d616b6572546f4d616b65722d76332e30a264697066735822122006ae931517d11536dea4fea8b62800f219f42e76f6443d75044f5b2195d351dd64736f6c63430008000033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063bc95af311161004e578063bc95af311461011d578063d48fe28014610148578063eb15f78114610173578063eb9e71261461019f5761007b565b806306fdde031461008057806308b0e9ce146100ab5780631263c73c146100d65780638dffe3f4146100f2575b600080fd5b34801561008c57600080fd5b506100956101dc565b6040516100a29190613e99565b60405180910390f35b3480156100b757600080fd5b506100c06101f8565b6040516100cd9190613cda565b60405180910390f35b6100f060048036038101906100eb9190613573565b61021c565b005b3480156100fe57600080fd5b50610107610241565b6040516101149190613cda565b60405180910390f35b34801561012957600080fd5b50610132610265565b60405161013f9190613cda565b60405180910390f35b34801561015457600080fd5b5061015d610289565b60405161016a9190613e99565b60405180910390f35b34801561017f57600080fd5b506101886102c2565b604051610196929190613fcd565b60405180910390f35b3480156101ab57600080fd5b506101c660048036038101906101c19190613490565b6102f4565b6040516101d39190613e99565b60405180910390f35b60405180606001604052806022815260200161477d6022913981565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061022b868686866104cb565b9150915061023982826108ce565b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280600281526020017f4f4b00000000000000000000000000000000000000000000000000000000000081525081565b60008060017f000000000000000000000000000000000000000000000000000000000000000080925081935050509091565b60606000868660049060249261030c939291906141ce565b810190610319919061343e565b905060008114156103ce573073ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561036a57600080fd5b505afa15801561037e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103a791906133d4565b6040516020016103b79190613c30565b6040516020818303038152906040529150506104c0565b6103d88189610a9a565b610486573073ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561042257600080fd5b505afa158015610436573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061045f91906133d4565b60405160200161046f9190613c52565b6040516020818303038152906040529150506104c0565b6040518060400160405280600281526020017f4f4b0000000000000000000000000000000000000000000000000000000000008152509150505b979650505050505050565b606080600167ffffffffffffffff81111561050f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561053d5781602001602082028036833780820191505090505b50915073eb4bf86589f808f90eec8e964dbf16bd4d2849058260008151811061058f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506105d38530610a9a565b6105de5760006105e0565b845b945060006105f56105f088610c2a565b610ef4565b9050600061060288610f0f565b90506000610624736b175474e89094c44da98b954eedeac495271d0f84611058565b90506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633c772b6c61067a61067560008e1487611193565b61126a565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee736b175474e89094c44da98b954eedeac495271d0f6040518463ffffffff1660e01b81526004016106c293929190613f96565b604080518083038186803b1580156106d957600080fd5b505afa1580156106ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107119190613537565b9150915061071f8183611284565b915060008060008c1461073e576107398d8d8989886112b0565b61074d565b61074c8d8c8c8a8a89611c64565b5b91509150600167ffffffffffffffff811115610792577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156107c557816020015b60608152602001906001900390816107b05790505b509750638d0a9b1b60e01b736b175474e89094c44da98b954eedeac495271d0f888785856040516020016107fa929190613dd9565b60405160208183030381529060405260405160240161081c9493929190613d48565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050886000815181106108b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052505050505050505094509492505050565b600063e0e90acf60e01b8383336040516024016108ed93929190613e10565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000803073ffffffffffffffffffffffffffffffffffffffff16836040516109749190613bd3565b600060405180830381855af49150503d80600081146109af576040519150601f19603f3d011682016040523d82523d6000602084013e6109b4565b606091505b509150915081610a9357610a927f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015610a2757600080fd5b505afa158015610a3b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a6491906133d4565b604051602001610a749190613c96565b6040516020818303038152906040528261273590919063ffffffff16565b5b5050505050565b600080831415610aad5760009050610c24565b735ef30b9986345249bc32d8928b7ee64de9435e3973ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b8152600401610afa9190613f7b565b60206040518083038186803b158015610b1257600080fd5b505afa925050508015610b4357506040513d601f19601f82011682018060405250810190610b409190613330565b60015b610bf157610b4f614605565b80610b5a5750610bb6565b80604051602001610b6b9190613cb8565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bad9190613e99565b60405180910390fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be890613f3b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16149150505b92915050565b600080735ef30b9986345249bc32d8928b7ee64de9435e399050600080610c51838661289e565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9d57600080fd5b505afa158015610cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd59190613330565b905060008173ffffffffffffffffffffffffffffffffffffffff1663d9638d36856040518263ffffffff1660e01b8152600401610d129190613e55565b60a06040518083038186803b158015610d2a57600080fd5b505afa158015610d3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6291906135df565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff16632424be5c86866040518363ffffffff1660e01b8152600401610da5929190613e70565b604080518083038186803b158015610dbc57600080fd5b505afa158015610dd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df49190613537565b91505060008373ffffffffffffffffffffffffffffffffffffffff16636c25b346866040518263ffffffff1660e01b8152600401610e329190613cda565b60206040518083038186803b158015610e4a57600080fd5b505afa158015610e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e829190613467565b90506000610e99610e9384866129be565b83612a2b565b90506b033b2e3c9fd0803ce800000081610eb39190614257565b985080610ecc8a6b033b2e3c9fd0803ce80000006129be565b10610ed75788610ee5565b600189610ee49190614201565b5b98505050505050505050919050565b6000610f0882670df27a2cdf448000612a84565b9050919050565b600080735ef30b9986345249bc32d8928b7ee64de9435e39905060008173ffffffffffffffffffffffffffffffffffffffff166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7157600080fd5b505afa158015610f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa99190613330565b9050600080610fb8848761289e565b9150915060008373ffffffffffffffffffffffffffffffffffffffff16632424be5c84846040518363ffffffff1660e01b8152600401610ff9929190613e70565b604080518083038186803b15801561101057600080fd5b505afa158015611024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110489190613537565b5090508095505050505050919050565b60008073a004a5afba04b74037e9e52ba1f7eb02b5e6150973ffffffffffffffffffffffffffffffffffffffff16635a860c87856040518263ffffffff1660e01b81526004016110a89190613cda565b60806040518083038186803b1580156110c057600080fd5b505afa1580156110d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f89190613415565b9050828160000151111561111057600091505061118d565b828160200151111561112657600191505061118d565b828160400151111561113c57600291505061118d565b828160600151111561115257600391505061118d565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118490613f5b565b60405180910390fd5b92915050565b60006111b7826040518060600160405280603e815260200161473f603e9139612ac8565b61126283611209576111c7612b14565b83600481106111ff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015161125d565b62030d40611215612b14565b846004811061124d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015161125c9190614201565b5b612b4e565b905092915050565b600061127d82611278612b7c565b6129be565b9050919050565b60006112a8828460126112979190614453565b600a6112a391906142db565b6129be565b905092915050565b606080600867ffffffffffffffff8111156112f4577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156113225781602001602082028036833780820191505090505b50915073ac02030d8a8f49ed04b2f52c394d3f901a10f8a982600081518110611374577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a9826001815181106113fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000082600281518110611492577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a98260038151811061151b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a9826004815181106115a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e5398f279175962e56fe4c5e0b62dc7208ef36c68260058151811061162d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e5398f279175962e56fe4c5e0b62dc7208ef36c6826006815181106116b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073eb4bf86589f808f90eec8e964dbf16bd4d2849058260078151811061173f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600867ffffffffffffffff8111156117ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156117ed57816020015b60608152602001906001900390816117d85790505b50905061181f877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000610258612c5d565b81600081518110611859577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250611891877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600080612ce5565b816001815181106118cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506119866000847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561194257600080fd5b505afa158015611956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197a9190613467565b61025880610259612d6d565b816002815181106119c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506119d88685600080612dfb565b81600381518110611a12577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250611a2d8660006102586000612e83565b81600481518110611a67577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250611b34736b175474e89094c44da98b954eedeac495271d0f60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611af257600080fd5b505afa158015611b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2a9190613359565b6102596000612f0b565b81600581518110611b6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250611baf736b175474e89094c44da98b954eedeac495271d0f847398edc8067cc671bcae82d36dcc609c3e4e078ac8600080612f0b565b81600681518110611be9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250611c15736b175474e89094c44da98b954eedeac495271d0f86600080612f96565b81600781518110611c4f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052509550959350505050565b606080600967ffffffffffffffff811115611ca8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611cd65781602001602082028036833780820191505090505b50915073ac02030d8a8f49ed04b2f52c394d3f901a10f8a982600081518110611d28577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a982600181518110611db1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000082600281518110611e46577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a982600381518110611ecf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a982600481518110611f58577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073ac02030d8a8f49ed04b2f52c394d3f901a10f8a982600581518110611fe1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e5398f279175962e56fe4c5e0b62dc7208ef36c68260068151811061206a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e5398f279175962e56fe4c5e0b62dc7208ef36c6826007815181106120f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073eb4bf86589f808f90eec8e964dbf16bd4d2849058260088151811061217c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600967ffffffffffffffff8111156121f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561222a57816020015b60608152602001906001900390816122155790505b50905061225c887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000610258612c5d565b81600081518110612296577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506122ce887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600080612ce5565b81600181518110612308577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506123c36000847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561237f57600080fd5b505afa158015612393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b79190613467565b61025880610259612d6d565b816002815181106123fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525061245587878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061301e565b8160038151811061248f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506124a8600085600080612dfb565b816004815181106124e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506124fd6000806102586000612e83565b81600581518110612537577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250612604736b175474e89094c44da98b954eedeac495271d0f60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125c257600080fd5b505afa1580156125d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fa9190613359565b6102596000612f0b565b8160068151811061263e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525061267f736b175474e89094c44da98b954eedeac495271d0f847398edc8067cc671bcae82d36dcc609c3e4e078ac8600080612f0b565b816007815181106126b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506126e5736b175474e89094c44da98b954eedeac495271d0f86600080612f96565b8160088151811061271f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250965096945050505050565b600460208351612745919061451c565b1415612842576000826020015190506308c379a060e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156127e657604483019250818360405160200161279b929190613bea565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127dd9190613e99565b60405180910390fd5b816040516020016127f79190613c0e565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128399190613e99565b60405180910390fd5b806040516020016128539190613c74565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128959190613e99565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff16632c2cb9fd846040518263ffffffff1660e01b81526004016128da9190613f7b565b60206040518083038186803b1580156128f257600080fd5b505afa158015612906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292a9190613382565b91508373ffffffffffffffffffffffffffffffffffffffff16632726b073846040518263ffffffff1660e01b81526004016129659190613f7b565b60206040518083038186803b15801561297d57600080fd5b505afa158015612991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b59190613330565b90509250929050565b6000808214806129e65750828283856129d791906143f9565b9250826129e49190614257565b145b612a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a1c90613edb565b60405180910390fd5b92915050565b6000828284612a3a9190614453565b9150811115612a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7590613ebb565b60405180910390fd5b92915050565b6000670de0b6b3a7640000612ab6612a9c85856129be565b6002670de0b6b3a7640000612ab19190614257565b61309d565b612ac09190614257565b905092915050565b60048211158190612b0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b069190613e99565b60405180910390fd5b505050565b612b1c6130f6565b604051806080016040528062266fd88152602001622feb948152602001623c97b8815260200162424ca8815250905090565b60006064601e6064612b609190614201565b83612b6b91906143f9565b612b759190614257565b9050919050565b60008073169e633a2d1e6c10dd91238ba11c4a708dfef37c73ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bd957600080fd5b505afa158015612bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1191906133ab565b905060008113612c56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c4d90613f1b565b60405180910390fd5b8091505090565b606063d5e0da3660e01b85858585604051602401612c7e9493929190613ff6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050949350505050565b606063674fb1b460e01b85858585604051602401612d069493929190613ff6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050949350505050565b606063acd2fd9360e01b878787878787604051602401612d929695949392919061403b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509695505050505050565b6060632505c3d960e01b85858585604051602401612e1c9493929190613ff6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050949350505050565b606063111d948260e01b85858585604051602401612ea49493929190613ff6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050949350505050565b6060634bd3ab8260e01b8686868686604051602401612f2e959493929190613cf5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905095945050505050565b606063213980e860e01b85858585604051602401612fb79493929190613d94565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050949350505050565b606063e4dcb06b60e01b826040516024016130399190613e99565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b60008282846130ac9190614201565b91508110156130f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130e790613efb565b60405180910390fd5b92915050565b6040518060800160405280600490602082028036833780820191505090505090565b600061312b613126846140cd565b61409c565b90508281526020810184848401111561314357600080fd5b61314e8482856144e9565b509392505050565b600081359050613165816146bb565b92915050565b60008151905061317a816146bb565b92915050565b60008151905061318f816146d2565b92915050565b6000815190506131a4816146e9565b92915050565b60008083601f8401126131bc57600080fd5b8235905067ffffffffffffffff8111156131d557600080fd5b6020830191508360018202830111156131ed57600080fd5b9250929050565b60008135905061320381614700565b92915050565b60008151905061321881614710565b92915050565b60008083601f84011261323057600080fd5b8235905067ffffffffffffffff81111561324957600080fd5b60208301915083600182028301111561326157600080fd5b9250929050565b600082601f83011261327957600080fd5b8151613289848260208601613118565b91505092915050565b6000608082840312156132a457600080fd5b6132ae608061409c565b905060006132be8482850161331b565b60008301525060206132d28482850161331b565b60208301525060406132e68482850161331b565b60408301525060606132fa8482850161331b565b60608301525092915050565b60008135905061331581614727565b92915050565b60008151905061332a81614727565b92915050565b60006020828403121561334257600080fd5b60006133508482850161316b565b91505092915050565b60006020828403121561336b57600080fd5b600061337984828501613180565b91505092915050565b60006020828403121561339457600080fd5b60006133a284828501613195565b91505092915050565b6000602082840312156133bd57600080fd5b60006133cb84828501613209565b91505092915050565b6000602082840312156133e657600080fd5b600082015167ffffffffffffffff81111561340057600080fd5b61340c84828501613268565b91505092915050565b60006080828403121561342757600080fd5b600061343584828501613292565b91505092915050565b60006020828403121561345057600080fd5b600061345e84828501613306565b91505092915050565b60006020828403121561347957600080fd5b60006134878482850161331b565b91505092915050565b600080600080600080600060c0888a0312156134ab57600080fd5b60006134b98a828b01613306565b97505060206134ca8a828b01613156565b965050604088013567ffffffffffffffff8111156134e757600080fd5b6134f38a828b016131aa565b955095505060606135068a828b016131f4565b93505060806135178a828b01613306565b92505060a06135288a828b01613306565b91505092959891949750929550565b6000806040838503121561354a57600080fd5b60006135588582860161331b565b92505060206135698582860161331b565b9150509250929050565b6000806000806060858703121561358957600080fd5b600061359787828801613306565b94505060206135a887828801613306565b935050604085013567ffffffffffffffff8111156135c557600080fd5b6135d18782880161321e565b925092505092959194509250565b600080600080600060a086880312156135f757600080fd5b60006136058882890161331b565b95505060206136168882890161331b565b94505060406136278882890161331b565b93505060606136388882890161331b565b92505060806136498882890161331b565b9150509295509295909350565b60006136628383613691565b60208301905092915050565b600061367a8383613791565b905092915050565b61368b81614499565b82525050565b61369a81614487565b82525050565b6136a981614487565b82525050565b60006136ba8261411d565b6136c48185614163565b93506136cf836140fd565b8060005b838110156137005781516136e78882613656565b97506136f283614149565b9250506001810190506136d3565b5085935050505092915050565b600061371882614128565b6137228185614174565b9350836020820285016137348561410d565b8060005b858110156137705784840389528151613751858261366e565b945061375c83614156565b925060208a01995050600181019050613738565b50829750879550505050505092915050565b61378b816144ab565b82525050565b600061379c82614133565b6137a68185614185565b93506137b68185602086016144e9565b6137bf816145da565b840191505092915050565b60006137d582614133565b6137df8185614196565b93506137ef8185602086016144e9565b6137f8816145da565b840191505092915050565b600061380e82614133565b61381881856141a7565b93506138288185602086016144e9565b80840191505092915050565b600061383f8261413e565b61384981856141b2565b93506138598185602086016144e9565b613862816145da565b840191505092915050565b60006138788261413e565b61388281856141c3565b93506138928185602086016144e9565b80840191505092915050565b60006138ab6015836141b2565b91507f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006000830152602082019050919050565b60006138eb6014836141b2565b91507f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006000830152602082019050919050565b600061392b6014836141b2565b91507f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006000830152602082019050919050565b600061396b600f836141c3565b91507f4e6f4572726f7253656c6563746f7200000000000000000000000000000000006000830152600f82019050919050565b60006139ab601b836141b2565b91507f5f67657447656c61746f47617350726963653a306f7242656c6f7700000000006000830152602082019050919050565b60006139eb6015836141c3565b91507f464d616b65722e5f69735661756c744f776e65723a00000000000000000000006000830152601582019050919050565b6000613a2b601e836141b2565b91507f464d616b65722e5f69735661756c744f776e65723a756e646566696e656400006000830152602082019050919050565b6000613a6b6017836141c3565b91507f3a205661756c74204964206973206e6f742076616c69640000000000000000006000830152601782019050919050565b6000613aab6018836141c3565b91507f3a205661756c74206e6f74206f776e65642062792064736100000000000000006000830152601882019050919050565b6000613aeb602e836141b2565b91507f4647656c61746f446562744272696467652e5f676574466c6173684c6f616e5260008301527f6f7574653a20696c6c69717569640000000000000000000000000000000000006020830152604082019050919050565b6000613b516014836141c3565b91507f556e657870656374656452657475726e646174610000000000000000000000006000830152601482019050919050565b6000613b916007836141c3565b91507f2e5f636173743a000000000000000000000000000000000000000000000000006000830152600782019050919050565b613bcd816144df565b82525050565b6000613bdf8284613803565b915081905092915050565b6000613bf6828561386d565b9150613c02828461386d565b91508190509392505050565b6000613c1a828461386d565b9150613c258261395e565b915081905092915050565b6000613c3c828461386d565b9150613c4782613a5e565b915081905092915050565b6000613c5e828461386d565b9150613c6982613a9e565b915081905092915050565b6000613c80828461386d565b9150613c8b82613b44565b915081905092915050565b6000613ca2828461386d565b9150613cad82613b84565b915081905092915050565b6000613cc3826139de565b9150613ccf828461386d565b915081905092915050565b6000602082019050613cef60008301846136a0565b92915050565b600060a082019050613d0a60008301886136a0565b613d176020830187613bc4565b613d246040830186613682565b613d316060830185613bc4565b613d3e6080830184613bc4565b9695505050505050565b6000608082019050613d5d60008301876136a0565b613d6a6020830186613bc4565b613d776040830185613bc4565b8181036060830152613d8981846137ca565b905095945050505050565b6000608082019050613da960008301876136a0565b613db66020830186613bc4565b613dc36040830185613bc4565b613dd06060830184613bc4565b95945050505050565b60006040820190508181036000830152613df381856136af565b90508181036020830152613e07818461370d565b90509392505050565b60006060820190508181036000830152613e2a81866136af565b90508181036020830152613e3e818561370d565b9050613e4d60408301846136a0565b949350505050565b6000602082019050613e6a6000830184613782565b92915050565b6000604082019050613e856000830185613782565b613e9260208301846136a0565b9392505050565b60006020820190508181036000830152613eb38184613834565b905092915050565b60006020820190508181036000830152613ed48161389e565b9050919050565b60006020820190508181036000830152613ef4816138de565b9050919050565b60006020820190508181036000830152613f148161391e565b9050919050565b60006020820190508181036000830152613f348161399e565b9050919050565b60006020820190508181036000830152613f5481613a1e565b9050919050565b60006020820190508181036000830152613f7481613ade565b9050919050565b6000602082019050613f906000830184613bc4565b92915050565b6000606082019050613fab6000830186613bc4565b613fb860208301856136a0565b613fc560408301846136a0565b949350505050565b6000604082019050613fe26000830185613bc4565b613fef6020830184613bc4565b9392505050565b600060808201905061400b6000830187613bc4565b6140186020830186613bc4565b6140256040830185613bc4565b6140326060830184613bc4565b95945050505050565b600060c0820190506140506000830189613bc4565b61405d6020830188613bc4565b61406a6040830187613bc4565b6140776060830186613bc4565b6140846080830185613bc4565b61409160a0830184613bc4565b979650505050505050565b6000604051905081810181811067ffffffffffffffff821117156140c3576140c26145ab565b5b8060405250919050565b600067ffffffffffffffff8211156140e8576140e76145ab565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600080858511156141de57600080fd5b838611156141eb57600080fd5b6001850283019150848603905094509492505050565b600061420c826144df565b9150614217836144df565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561424c5761424b61454d565b5b828201905092915050565b6000614262826144df565b915061426d836144df565b92508261427d5761427c61457c565b5b828204905092915050565b6000808291508390505b60018511156142d2578086048111156142ae576142ad61454d565b5b60018516156142bd5780820291505b80810290506142cb856145eb565b9450614292565b94509492505050565b60006142e6826144df565b91506142f1836144df565b925061431e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614326565b905092915050565b60008261433657600190506143f2565b8161434457600090506143f2565b816001811461435a576002811461436457614393565b60019150506143f2565b60ff8411156143765761437561454d565b5b8360020a91508482111561438d5761438c61454d565b5b506143f2565b5060208310610133831016604e8410600b84101617156143c85782820a9050838111156143c3576143c261454d565b5b6143f2565b6143d58484846001614288565b925090508184048111156143ec576143eb61454d565b5b81810290505b9392505050565b6000614404826144df565b915061440f836144df565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156144485761444761454d565b5b828202905092915050565b600061445e826144df565b9150614469836144df565b92508282101561447c5761447b61454d565b5b828203905092915050565b6000614492826144bf565b9050919050565b60006144a4826144bf565b9050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156145075780820151818401526020810190506144ec565b83811115614516576000848401525b50505050565b6000614527826144df565b9150614532836144df565b9250826145425761454161457c565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b60008160e01c9050919050565b600060443d1015614615576146b8565b60046000803e6146266000516145f8565b6308c379a0811461463757506146b8565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715614663575050506146b8565b808201805167ffffffffffffffff8111156146825750505050506146b8565b8060208301013d850181111561469d575050505050506146b8565b6146a6826145da565b60208401016040528296505050505050505b90565b6146c481614487565b81146146cf57600080fd5b50565b6146db81614499565b81146146e657600080fd5b50565b6146f2816144ab565b81146146fd57600080fd5b50565b6004811061470d57600080fd5b50565b614719816144b5565b811461472457600080fd5b50565b614730816144df565b811461473b57600080fd5b5056fe4647656c61746f446562744272696467652e5f676574476173436f73744d616b6572546f4d616b65723a20696e76616c696420726f75746520696e646578436f6e6e65637447656c61746f446174614d616b6572546f4d616b65722d76332e30a264697066735822122006ae931517d11536dea4fea8b62800f219f42e76f6443d75044f5b2195d351dd64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "connectorID()": {
        "details": "Connector Details"
      },
      "getDataAndCastMakerToMaker(uint256,uint256,string)": {
        "details": "payable to be compatible in conjunction with DSA.cast payable target",
        "params": {
          "_colType": "colType of the new vault. example : ETH-B, ETH-A.",
          "_vaultAId": "Id of the unsafe vault of the client of Vault A Collateral.",
          "_vaultBId": "Id of the vault B Collateral of the client."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getDataAndCastMakerToMaker(uint256,uint256,string)": {
        "notice": "Entry Point for DSA.cast DebtBridge from e.g ETH-A to ETH-B"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
